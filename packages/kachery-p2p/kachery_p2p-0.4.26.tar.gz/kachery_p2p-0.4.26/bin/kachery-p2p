#!/usr/bin/env python

import sys
import os
import click
import json
import kachery_p2p as kp

@click.group(help="Kachery peer-to-peer command-line client")
def cli():
    pass

@click.command(help="Show the channels that this node belongs to.")
def get_channels():
    channels = kp.get_channels()
    for channel in channels:
        num_peers = channel["numPeers"]
        if num_peers == 1:
            num_peers_str = '1 peer'
        else:
            num_peers_str = f'{num_peers} peers'
        print(f'{channel["name"]}: {num_peers_str}')

@click.command(help="Find a file.")
@click.argument('uri')
def find_file(uri):
    infos = kp.find_file(uri)
    for info in infos:
        print(json.dumps(info, indent=4))

@click.command(help="Download a file.")
@click.argument('uri')
@click.option('--dest', default=None, help='Optional local path of destination file.')
@click.option('--from-node', default=None, help='Optionally specify the ID of the node to download from')
@click.option('--from-channel', default=None, help='Optionally specify the name of the channel to download from')
@click.option('--exp-nop2p', is_flag=True, help='Disable p2p')
@click.option('--exp-file-server-url', multiple=True, help='Optional URLs of static file servers')
def load_file(uri, dest, from_node, from_channel, exp_nop2p, exp_file_server_url):
    kp._experimental_config(nop2p=exp_nop2p, file_server_urls=list(exp_file_server_url))
    x = kp.load_file(uri, dest=dest, from_node=from_node, from_channel=from_channel)
    print(x)

@click.command(help="Download a file and write the content to stdout.")
@click.argument('uri')
@click.option('--start', help='The start byte (optional)', default=None)
@click.option('--end', help='The end byte non-inclusive (optional)', default=None)
@click.option('--exp-nop2p', is_flag=True, help='Disable p2p')
@click.option('--exp-file-server-url', multiple=True, help='Optional URLs of static file servers')
def cat_file(uri, start, end, exp_nop2p, exp_file_server_url):
    old_stdout = sys.stdout
    sys.stdout = sys.stderr

    kp._experimental_config(nop2p=exp_nop2p, file_server_urls=list(exp_file_server_url))

    if start is None and end is None:
        path1 = kp.load_file(uri)
        if not path1:
            raise Exception('Error loading file for cat.')
        sys.stdout = old_stdout
        with open(path1, 'rb') as f:
            while True:
                data = os.read(f.fileno(), 4096)
                if len(data) == 0:
                    break
                os.write(sys.stdout.fileno(), data)
    else:
        assert start is not None and end is not None
        start = int(start)
        end = int(end)
        assert start <= end
        if start == end:
            return
        sys.stdout = old_stdout
        kp.load_bytes(uri=uri, start=start, end=end, write_to_stdout=True)

@click.command(help="Print messages in a subfeed.")
@click.argument('uri')
def print_messages(uri):
    sf = kp.load_subfeed(uri)
    sf.print_messages()

@click.command(help="Print messages in a subfeed.")
def log():
    f = kp.load_feed('kachery-p2p-daemon-log')
    sf = f.get_subfeed('default')
    sf.print_messages()


# Note that npx-latest/npm-latest uses the latest version of the daemon on npm, which may be desireable for some bootstrap nodes, but not adviseable if you want to be sure that kachery-p2p is constistent with the node daemon

@click.command(help="Start the daemon.")
@click.option('--channel', multiple=True, help='Channel to join')
@click.option('--bootstrap', multiple=True, help='Override the default bootstrap node(s). Use --bootstrap ip:port')
@click.option('--verbose', default=0, help='Verbosity level')
@click.option('--dverbose', default=0, help='Discovery verbosity level')
@click.option('--method', default='npx', help='Method for starting daemon: npx (default), npx-latest, npm, npm-latest or dev')
@click.option('--host', default='', help='IP for connecting to this daemon')
@click.option('--port', default=0, help='Optional port to listen on (0 means do not listen)')
@click.option('--file-server-port', default=0, help='Optional port for serving static files')
@click.option('--node-arg', multiple=True, help='Additional arguments to send to node')
def start_daemon(method, channel, verbose, dverbose, host, port, file_server_port, bootstrap, node_arg):
    kp.start_daemon(method=method, channels=channel, verbose=verbose, dverbose=dverbose, host=host, port=port, file_server_port=file_server_port, bootstrap=bootstrap, node_arg=node_arg)

@click.command(help="Stop the daemon.")
def stop_daemon():
    kp.stop_daemon()

@click.command(help="Print information about this node.")
def node_info():
    node_id = kp.get_node_id()
    print(f'Node ID: {node_id}')

@click.command(help="Display kachery_p2p version and exit.")
def version():
    click.echo(f"This is kachery_p2p version {kp.__version__}.")
    exit()

cli.add_command(cat_file)
cli.add_command(find_file)
cli.add_command(get_channels)
cli.add_command(load_file)
cli.add_command(log)
cli.add_command(node_info)
cli.add_command(print_messages)
cli.add_command(start_daemon)
cli.add_command(stop_daemon)
cli.add_command(version)

if __name__ == "__main__":
    cli()