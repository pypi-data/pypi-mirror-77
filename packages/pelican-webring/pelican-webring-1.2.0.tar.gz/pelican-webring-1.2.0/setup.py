# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pelican', 'pelican.plugins.webring']

package_data = \
{'': ['*'], 'pelican.plugins.webring': ['test_data/*']}

install_requires = \
['feedparser>=5.2,<6.0', 'pelican>=4.5,<5.0']

extras_require = \
{'markdown': ['markdown>=3.1.1,<4.0.0']}

setup_kwargs = {
    'name': 'pelican-webring',
    'version': '1.2.0',
    'description': 'Adds a webring to your site from a list of web feeds',
    'long_description': '# Webring\n\n[![Build Status](https://github.com/pelican-plugins/webring/workflows/build/badge.svg)](https://github.com/pelican-plugins/webring/actions) [![PyPI Version](https://img.shields.io/pypi/v/pelican-webring)](https://pypi.org/project/pelican-webring/)\n\nThis Pelican plugin adds a webring or feed aggregation to your site from a list\nof web feeds.\n\nIt retrieves the latest posts from a list of web feeds and makes them available\nin templates, effectively creating a [partial webring][1] or feed aggregation.\nPosts are sorted from newer to older.\n\nIt is inspired by [openring](https://git.sr.ht/~sircmpwn/openring), a tool for\ngenerating an HTML file to include in your [SSG][2] from a template and a list\nof web feeds, and\n[pelican-planet](https://framagit.org/bochecha/pelican-planet), a Pelican\nplugin for creating feed aggregations.\n\nInstallation\n------------\n\nThis plugin can be installed via:\n\n    pip install pelican-webring\n\nSettings\n--------\n\n```\nWEBRING_FEED_URLS = []\n```\nA list of web feeds in the form of a URL or local file.\n\n```\nWEBRING_MAX_ARTICLES = 3\n```\nThe maximum number of articles.\n\n```\nWEBRING_ARTICLES_PER_FEED = 1\n```\nThe maximum number of articles per feed.\n\n```\nWEBRING_SUMMARY_WORDS = 20\n```\nThe maximum number of words of post summaries. If set to 0, truncation is\ndisabled.\n\n```\nWEBRING_CLEAN_SUMMARY_HTML = True\n```\nWhether to clean html tags from post summaries or not.\n\n**Example**\n\nLet\'s suppose we have two blogs in our webring and want to show two articles\nper blog. We would also like to show a quite short summary.\n\n```\nWEBRING_FEED_URLS = [\n    \'https://justinmayer.com/feeds/all.atom.xml\',\n    \'https://danluu.com/atom.xml\'\n]\nWEBRING_ARTICLES_PER_FEED = 2\nWEBRING_MAX_ARTICLES = 4\nWEBRING_SUMMARY_LENGTH = 25\n```\n\nTemplates\n---------\n\nThe plugin makes available the resulting web feed articles in the variable\n`webring_articles`.\n\nAll existing _date_ attributes are Pelican `utils.SafeDatetime` objects, which\ncan be used with [Pelican\'s Jinja filter\n`strftime`](https://docs.getpelican.com/en/stable/themes.html#date-formatting).\n\nEach article contains all available properties in the original feed entry, for\nexample:\n\n- `article.title`: The article title.\n- `article.link`: The article URL.\n- `article.date`: The article date as a Pelican `utils.SafeDatetime` object.\n- `article.summary`: The article summary, as provided in the web feed and modified\naccording to this plugin\'s settings.\n- `article.description`: The original article summary, without cleaning or\n  truncation.\n\nArticles also contain information about the _source feed_, which can be\naccessed through `source_` prefixed attributes:\n\n- `source_title`: The title of the web feed.\n- `source_link`: A link to the web feed.\n- `source_id`: An identification field provided in some web feeds.\n\nIf you access an attribute that is not present in the entry or source feed, an\nempty string will be returned, except for _dates_ (`published`, `updated`,\n`created` and `expired`) that `None` is returned.\n\nFor a list of available entry and source feed attributes, [read the feedparser\nreference document](https://pythonhosted.org/feedparser/reference.html).\n\nYou can use `webring_articles` in any kind of content type, including _pages_\nand _articles_. Read the following sections for examples on how to use this\nvariable in your templates.\n\n### Adding a Webring section in the bottom of articles\n\nImagine we\'d like to put our webring in the bottom of articles, using the\ndefault Pelican template (ie. notmyidea). To simplify, we\'ll use the existing\nCSS classes.\n\nEdit the `notmyidea/templates/base.html` file and make it look like this:\n\n```\n        ...\n        <section id="extras" class="body">\n        {% if WEBRING_FEED_URLS %}\n            <div class="webring">\n                <h2>Webring</h2>\n                {% for article in webring_articles %}\n                <p><a href="{{ article.link }}">{{ article.title }}</a></p>\n                <p>{{ article.date|strftime(\'%d %B %Y\') }} - {{ article.summary}}</p>\n                {% endfor %}\n            </div>\n        {% endif %}\n        {% if LINKS %}\n        ...\n```\n\nIf there were no links or social widgets, the result would be like in the\nimage below:\n\n![Footer Webring](https://github.com/pelican-plugins/webring/raw/master/webring-footer.jpg)\n\n### Adding a feed aggregation page\n\nIn this case, we\'d like to generate a new page with all feed contents processed\nby this plugin. For example, imagine we\'d like to access that page as:\n`https://my-domain.com/feed-aggregation`.\n\nThis objective can be accomplished in several ways in Pelican. We\'re showing\nhere one that only requires a new HTML template.\n\nThe following is an example template file named `feed-aggregation.html` based on\n`page.html` that should reside in your theme template directory:\n\n```\n{% extends "base.html" %}\n{% block title %}Feed aggregation{% endblock %}\n\n{% block content %}\n<section id="content" class="body">\n    <h1 class="entry-title">Feed aggregation</h1>\n\n    {% if WEBRING_FEED_URLS %}\n        {% for article in webring_articles %}\n            <article class="hentry">\n                <header>\n                    <h2><a href="{{ article.link }}">{{ article.title }}</a></h2>\n                </header>\n                <p>{{ article.date|strftime(\'%d %B %Y\') }}</p>\n                <div class="entry-content">\n                {{ article.summary}}\n                </div>\n            </article>\n        {% endfor %}\n    {% endif %}\n\n</section>\n{% endblock %}\n```\n\nFinally, in order for our template to be rendered in the wanted location, we add the following **template page** to our `pelicanconf.py`. Note that `feed-aggregation.html` is relative to your theme\'s template directory.\n\n```\nTEMPLATE_PAGES = { \'feed-aggregation.html\': \'feed-aggregation/index.html\' }\n```\n\nThe final result would be as in the image below:\n\n![Page Webring](https://github.com/pelican-plugins/webring/raw/master/webring-page.jpg)\n\nContributing\n------------\n\nContributions are welcome and much appreciated. Every little bit helps. You can contribute by improving the documentation, adding missing features, and fixing bugs. You can also help out by reviewing and commenting on [existing issues][].\n\nTo start contributing to this plugin, review the [Contributing to Pelican][] documentation, beginning with the **Contributing Code** section.\n\n[existing issues]: https://github.com/pelican-plugins/webring/issues\n[Contributing to Pelican]: https://docs.getpelican.com/en/latest/contribute.html\n[1]: https://en.wikipedia.org/wiki/Webring "In a proper webring, websites would be linked in a circular structure."\n[2]: https://en.wikipedia.org/wiki/Category:Static_website_generators "Static Site Generator"\n',
    'author': 'David Alfonso',
    'author_email': 'developer@davidalfonso.es',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/pelican-plugins/webring',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
