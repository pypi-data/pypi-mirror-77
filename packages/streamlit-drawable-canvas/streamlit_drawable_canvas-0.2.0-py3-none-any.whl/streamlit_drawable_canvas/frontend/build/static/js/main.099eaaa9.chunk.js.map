{"version":3,"sources":["streamlit/streamlit.ts","streamlit/ArrowTable.ts","streamlit/StreamlitReact.tsx","lib/fabrictool.ts","lib/freedraw.ts","lib/line.ts","lib/transform.ts","DrawableCanvas.tsx","index.tsx"],"names":["ComponentMessageType","ArrowTable","dataBuffer","indexBuffer","columnsBuffer","styler","dataTable","indexTable","columnsTable","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","push","type","join","content","dataColumnIndex","getContent","dataRowIndex","id","uuid","displayValuesTable","table","column","getColumnAt","getColumnTypeId","Type","Timestamp","nanosToDate","get","this","Table","from","caption","styles","undefined","schema","fields","typeId","nanos","Date","length","numCols","rows","dataRows","columns","dataColumns","Streamlit","API_VERSION","RENDER_EVENT","events","EventTarget","registeredMessageListener","lastFrameHeight","setComponentReady","window","addEventListener","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","body","scrollHeight","SET_FRAME_HEIGHT","setComponentValue","value","SET_COMPONENT_VALUE","event","data","onRenderMessage","args","console","error","dataframeArgs","argsDataframeToObject","disabled","Boolean","CustomEvent","detail","dispatchEvent","argsDataframe","argsDataframeArrow","map","key","toArrowTable","Object","fromEntries","df","index","parent","postMessage","isStreamlitMessage","React","PureComponent","FabricTool","canvas","_canvas","FreedrawTool","strokeWidth","strokeColor","isDrawingMode","freeDrawingBrush","width","color","LineTool","isMouseDown","currentLine","fabric","Line","selection","forEachObject","o","selectable","evented","on","e","onMouseDown","onMouseMove","onMouseUp","onMouseOut","off","pointer","getPointer","points","x","y","fill","stroke","originX","originY","add","set","x2","y2","setCoords","renderAll","TransformTool","remove","getActiveObject","sendDataToStreamlit","imageData","getContext","getImageData","getWidth","getHeight","Array","withStreamlitConnection","WrappedComponent","ComponentWrapper","props","componentDidMount","onRenderEvent","componentWillUnmount","removeEventListener","renderEvent","setState","renderData","render","state","componentError","message","innerWidth","getDerivedStateFromError","hoistNonReactStatics","canvasWidth","canvasHeight","backgroundColor","drawingMode","useState","Canvas","setCanvas","useEffect","c","enableRetinaScaling","cleanup","freedraw","line","transform","configureCanvas","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.099eaaa9.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2020 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\"\nimport { ArrowDataframeProto, ArrowTable } from \"./ArrowTable\"\n\n/** Data sent in the custom Streamlit render event. */\nexport interface RenderData {\n  args: any\n  disabled: boolean\n}\n\n/** Messages from Component -> Streamlit */\nenum ComponentMessageType {\n  // A component sends this message when it's ready to receive messages\n  // from Streamlit. Streamlit won't send any messages until it gets this.\n  // Data: { apiVersion: number }\n  COMPONENT_READY = \"streamlit:componentReady\",\n\n  // The component has a new widget value. Send it back to Streamlit, which\n  // will then re-run the app.\n  // Data: { value: any }\n  SET_COMPONENT_VALUE = \"streamlit:setComponentValue\",\n\n  // The component has a new height for its iframe.\n  // Data: { height: number }\n  SET_FRAME_HEIGHT = \"streamlit:setFrameHeight\",\n}\n\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nexport class Streamlit {\n  /**\n   * The Streamlit component API version we're targetting.\n   * There's currently only 1!\n   */\n  public static readonly API_VERSION = 1\n\n  public static readonly RENDER_EVENT = \"streamlit:render\"\n\n  /** Dispatches events received from Streamlit. */\n  public static readonly events = new EventTarget()\n\n  private static registeredMessageListener = false\n  private static lastFrameHeight?: number\n\n  /**\n   * Tell Streamlit that the component is ready to start receiving data.\n   * Streamlit will defer emitting RENDER events until it receives the\n   * COMPONENT_READY message.\n   */\n  public static setComponentReady = (): void => {\n    if (!Streamlit.registeredMessageListener) {\n      // Register for message events if we haven't already\n      window.addEventListener(\"message\", Streamlit.onMessageEvent)\n      Streamlit.registeredMessageListener = true\n    }\n\n    Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n      apiVersion: Streamlit.API_VERSION,\n    })\n  }\n\n  /**\n   * Report the component's height to Streamlit.\n   * This should be called every time the component changes its DOM - that is,\n   * when it's first loaded, and any time it updates.\n   */\n  public static setFrameHeight = (height?: number): void => {\n    if (height === undefined) {\n      // `height` is optional. If undefined, it defaults to scrollHeight,\n      // which is the entire height of the element minus its border,\n      // scrollbar, and margin.\n      height = document.body.scrollHeight\n    }\n\n    if (height === Streamlit.lastFrameHeight) {\n      // Don't bother updating if our height hasn't changed.\n      return\n    }\n\n    Streamlit.lastFrameHeight = height\n    Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height })\n  }\n\n  /**\n   * Set the component's value. This value will be returned to the Python\n   * script, and the script will be re-run.\n   *\n   * For example:\n   *\n   * JavaScript:\n   * Streamlit.setComponentValue(\"ahoy!\")\n   *\n   * Python:\n   * value = st.my_component(...)\n   * st.write(value) # -> \"ahoy!\"\n   *\n   * The value must be serializable into JSON.\n   */\n  public static setComponentValue = (value: any): void => {\n    Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, { value })\n  }\n\n  /** Receive a ForwardMsg from the Streamlit app */\n  private static onMessageEvent = (event: MessageEvent): void => {\n    const type = event.data[\"type\"]\n    switch (type) {\n      case Streamlit.RENDER_EVENT:\n        Streamlit.onRenderMessage(event.data)\n        break\n    }\n  }\n\n  /**\n   * Handle an untyped Streamlit render event and redispatch it as a\n   * StreamlitRenderEvent.\n   */\n  private static onRenderMessage = (data: any): void => {\n    let args = data[\"args\"]\n    if (args == null) {\n      console.error(\n        `Got null args in onRenderMessage. This should never happen`\n      )\n      args = {}\n    }\n\n    // Parse our dataframe arguments with arrow, and merge them into our args dict\n    const dataframeArgs =\n      data[\"dfs\"] && data[\"dfs\"].length > 0\n        ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n        : {}\n\n    args = {\n      ...args,\n      ...dataframeArgs,\n    }\n\n    const disabled = Boolean(data[\"disabled\"])\n\n    // Dispatch a render event!\n    const eventData = { disabled, args }\n    const event = new CustomEvent<RenderData>(Streamlit.RENDER_EVENT, {\n      detail: eventData,\n    })\n    Streamlit.events.dispatchEvent(event)\n  }\n\n  private static argsDataframeToObject = (\n    argsDataframe: ArgsDataframe[]\n  ): object => {\n    const argsDataframeArrow = argsDataframe.map(\n      ({ key, value }: ArgsDataframe) => [key, Streamlit.toArrowTable(value)]\n    )\n    return Object.fromEntries(argsDataframeArrow)\n  }\n\n  private static toArrowTable = (df: ArrowDataframeProto): ArrowTable => {\n    const { data, index, columns } = df.data\n    return new ArrowTable(data, index, columns)\n  }\n\n  /** Post a message to the Streamlit app. */\n  private static sendBackMsg = (type: string, data?: any): void => {\n    window.parent.postMessage(\n      {\n        isStreamlitMessage: true,\n        type: type,\n        ...data,\n      },\n      \"*\"\n    )\n  }\n}\n\ninterface ArgsDataframe {\n  key: string\n  value: ArrowDataframeProto\n}\n","/**\n * @license\n * Copyright 2018-2019 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Table, Type } from \"apache-arrow\"\n\ntype CellType = \"blank\" | \"index\" | \"columns\" | \"data\"\n\nexport interface ArrowDataframeProto {\n  data: ArrowTableProto\n  height: string\n  width: string\n}\n\nexport interface ArrowTableProto {\n  data: Uint8Array\n  index: Uint8Array\n  columns: Uint8Array\n  styler: Styler\n}\n\ninterface Cell {\n  classNames: string\n  content: string\n  id?: string\n  type: CellType\n}\n\ninterface Styler {\n  caption?: string\n  displayValuesTable: Table\n  styles?: string\n  uuid: string\n}\n\nexport class ArrowTable {\n  private readonly dataTable: Table\n  private readonly indexTable: Table\n  private readonly columnsTable: Table\n  private readonly styler?: Styler\n\n  constructor(\n    dataBuffer: Uint8Array,\n    indexBuffer: Uint8Array,\n    columnsBuffer: Uint8Array,\n    styler?: any\n  ) {\n    this.dataTable = Table.from(dataBuffer)\n    this.indexTable = Table.from(indexBuffer)\n    this.columnsTable = Table.from(columnsBuffer)\n    this.styler = styler\n      ? {\n          caption: styler.get(\"caption\"),\n          displayValuesTable: Table.from(styler.get(\"displayValues\")),\n          styles: styler.get(\"styles\"),\n          uuid: styler.get(\"uuid\"),\n        }\n      : undefined\n  }\n\n  get rows(): number {\n    return this.indexTable.length + this.columnsTable.numCols\n  }\n\n  get columns(): number {\n    return this.indexTable.numCols + this.columnsTable.length\n  }\n\n  get headerRows(): number {\n    return this.rows - this.dataRows\n  }\n\n  get headerColumns(): number {\n    return this.columns - this.dataColumns\n  }\n\n  get dataRows(): number {\n    return this.dataTable.length\n  }\n\n  get dataColumns(): number {\n    return this.dataTable.numCols\n  }\n\n  get uuid(): string | undefined {\n    return this.styler && this.styler.uuid\n  }\n\n  get caption(): string | undefined {\n    return this.styler && this.styler.caption\n  }\n\n  get styles(): string | undefined {\n    return this.styler && this.styler.styles\n  }\n\n  get table(): Table {\n    return this.dataTable\n  }\n\n  get index(): Table {\n    return this.indexTable\n  }\n\n  get columnTable(): Table {\n    return this.columnsTable\n  }\n\n  public getCell = (rowIndex: number, columnIndex: number): Cell => {\n    const isBlankCell =\n      rowIndex < this.headerRows && columnIndex < this.headerColumns\n    const isIndexCell =\n      rowIndex >= this.headerRows && columnIndex < this.headerColumns\n    const isColumnsCell =\n      rowIndex < this.headerRows && columnIndex >= this.headerColumns\n\n    if (isBlankCell) {\n      const classNames = [\"blank\"]\n      if (columnIndex > 0) {\n        classNames.push(\"level\" + rowIndex)\n      }\n\n      return {\n        type: \"blank\",\n        classNames: classNames.join(\" \"),\n        content: \"\",\n      }\n    } else if (isColumnsCell) {\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"col_heading\",\n        \"level\" + rowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n\n      return {\n        type: \"columns\",\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.columnsTable, dataColumnIndex, rowIndex),\n      }\n    } else if (isIndexCell) {\n      const dataRowIndex = rowIndex - this.headerRows\n      const classNames = [\n        \"row_heading\",\n        \"level\" + columnIndex,\n        \"row\" + dataRowIndex,\n      ]\n\n      return {\n        type: \"index\",\n        id: `T_${this.uuid}level${columnIndex}_row${dataRowIndex}`,\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.indexTable, dataRowIndex, columnIndex),\n      }\n    } else {\n      const dataRowIndex = rowIndex - this.headerRows\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"data\",\n        \"row\" + dataRowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n      const content = this.styler\n        ? this.getContent(\n            this.styler.displayValuesTable,\n            dataRowIndex,\n            dataColumnIndex\n          )\n        : this.getContent(this.dataTable, dataRowIndex, dataColumnIndex)\n\n      return {\n        type: \"data\",\n        id: `T_${this.uuid}row${dataRowIndex}_col${dataColumnIndex}`,\n        classNames: classNames.join(\" \"),\n        content,\n      }\n    }\n  }\n\n  public getContent = (\n    table: Table,\n    rowIndex: number,\n    columnIndex: number\n  ): any => {\n    const column = table.getColumnAt(columnIndex)\n    if (column === null) {\n      return \"\"\n    }\n\n    const columnTypeId = this.getColumnTypeId(table, columnIndex)\n    switch (columnTypeId) {\n      case Type.Timestamp: {\n        return this.nanosToDate(column.get(rowIndex))\n      }\n      default: {\n        return column.get(rowIndex)\n      }\n    }\n  }\n\n  /**\n   * Returns apache-arrow specific typeId of column.\n   */\n  private getColumnTypeId(table: Table, columnIndex: number): Type {\n    return table.schema.fields[columnIndex].type.typeId\n  }\n\n  private nanosToDate(nanos: number): Date {\n    return new Date(nanos / 1e6)\n  }\n}\n","import hoistNonReactStatics from \"hoist-non-react-statics\"\nimport React, { ReactNode } from \"react\"\nimport { RenderData, Streamlit } from \"./streamlit\"\n\n/**\n * Props passed to custom Streamlit components.\n */\nexport interface ComponentProps {\n  /** Named dictionary of arguments passed from Python. */\n  args: any\n\n  /** The component's width. */\n  width: number\n\n  /**\n   * True if the component should be disabled.\n   * All components get disabled while the app is being re-run,\n   * and become re-enabled when the re-run has finished.\n   */\n  disabled: boolean\n}\n\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nexport class StreamlitComponentBase<S = {}> extends React.PureComponent<\n  ComponentProps,\n  S\n> {\n  public componentDidMount(): void {\n    // After we're rendered for the first time, tell Streamlit that our height\n    // has changed.\n    Streamlit.setFrameHeight()\n  }\n\n  public componentDidUpdate(): void {\n    // After we're updated, tell Streamlit that our height may have changed.\n    Streamlit.setFrameHeight()\n  }\n}\n\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(\n  WrappedComponent: React.ComponentType<ComponentProps>\n): React.ComponentType {\n  interface WrapperProps {}\n\n  interface WrapperState {\n    renderData?: RenderData\n    componentError?: Error\n  }\n\n  class ComponentWrapper extends React.PureComponent<\n    WrapperProps,\n    WrapperState\n  > {\n    public constructor(props: WrapperProps) {\n      super(props)\n      this.state = {\n        renderData: undefined,\n        componentError: undefined,\n      }\n    }\n\n    public static getDerivedStateFromError = (\n      error: Error\n    ): Partial<WrapperState> => {\n      return { componentError: error }\n    }\n\n    public componentDidMount = (): void => {\n      // Set up event listeners, and signal to Streamlit that we're ready.\n      // We won't render the component until we receive the first RENDER_EVENT.\n      Streamlit.events.addEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n      Streamlit.setComponentReady()\n    }\n\n    public componentWillUnmount = (): void => {\n      Streamlit.events.removeEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n    }\n\n    /**\n     * Streamlit is telling this component to redraw.\n     * We save the render data in State, so that it can be passed to the\n     * component in our own render() function.\n     */\n    private onRenderEvent = (event: Event): void => {\n      // Update our state with the newest render data\n      const renderEvent = event as CustomEvent<RenderData>\n      this.setState({ renderData: renderEvent.detail })\n    }\n\n    public render = (): ReactNode => {\n      // If our wrapped component threw an error, display it.\n      if (this.state.componentError != null) {\n        return (\n          <div>\n            <h1>Component Error</h1>\n            <span>{this.state.componentError.message}</span>\n          </div>\n        )\n      }\n\n      // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n      if (this.state.renderData == null) {\n        return null\n      }\n\n      return (\n        <WrappedComponent\n          width={window.innerWidth}\n          disabled={this.state.renderData.disabled}\n          args={this.state.renderData.args}\n        />\n      )\n    }\n  }\n\n  return hoistNonReactStatics(ComponentWrapper, WrappedComponent)\n}\n","import { PythonArgs } from \"../DrawableCanvas\"\r\nimport { fabric } from \"fabric\"\r\n\r\n/**\r\n * Base class for any fabric tool that configures and draws on canvas\r\n */\r\nabstract class FabricTool {\r\n  protected _canvas: fabric.Canvas\r\n\r\n  /**\r\n   * Pass Fabric canvas by reference so tools can configure it\r\n   */\r\n  constructor(canvas: fabric.Canvas) {\r\n    this._canvas = canvas\r\n  }\r\n\r\n  /**\r\n   * Configure canvas and register a callback to clean eventListeners\r\n   * @param args\r\n   */\r\n  abstract configureCanvas(args: PythonArgs): () => void\r\n}\r\n\r\nexport default FabricTool\r\n","import { PythonArgs } from \"../DrawableCanvas\"\r\nimport FabricTool from \"./fabrictool\"\r\n\r\nclass FreedrawTool extends FabricTool {\r\n  configureCanvas(args: PythonArgs): () => void {\r\n    const { strokeWidth, strokeColor } = args\r\n    this._canvas.isDrawingMode = true\r\n    this._canvas.freeDrawingBrush.width = strokeWidth\r\n    this._canvas.freeDrawingBrush.color = strokeColor\r\n    return () => {}\r\n  }\r\n}\r\n\r\nexport default FreedrawTool\r\n","import { fabric } from \"fabric\"\r\nimport { PythonArgs } from \"../DrawableCanvas\"\r\nimport FabricTool from \"./fabrictool\"\r\n\r\nclass LineTool extends FabricTool {\r\n  isMouseDown: boolean = false\r\n  strokeWidth: number = 10\r\n  strokeColor: string = \"#ffffff\"\r\n  currentLine: fabric.Line = new fabric.Line()\r\n\r\n  configureCanvas(args: PythonArgs): () => void {\r\n    this._canvas.isDrawingMode = false\r\n    this._canvas.selection = false\r\n    this._canvas.forEachObject((o) => (o.selectable = o.evented = false))\r\n\r\n    const { strokeWidth, strokeColor } = args\r\n    this.strokeWidth = strokeWidth\r\n    this.strokeColor = strokeColor\r\n\r\n    this._canvas.on(\"mouse:down\", (e: any) => this.onMouseDown(e))\r\n    this._canvas.on(\"mouse:move\", (e: any) => this.onMouseMove(e))\r\n    this._canvas.on(\"mouse:up\", (e: any) => this.onMouseUp(e))\r\n    this._canvas.on(\"mouse:out\", (e: any) => this.onMouseOut(e))\r\n    return () => {\r\n      this._canvas.off(\"mouse:down\")\r\n      this._canvas.off(\"mouse:move\")\r\n      this._canvas.off(\"mouse:up\")\r\n      this._canvas.off(\"mouse:out\")\r\n    }\r\n  }\r\n\r\n  onMouseDown(o: any) {\r\n    let canvas = this._canvas\r\n    this.isMouseDown = true\r\n    var pointer = canvas.getPointer(o.e)\r\n    var points = [pointer.x, pointer.y, pointer.x, pointer.y]\r\n    this.currentLine = new fabric.Line(points, {\r\n      strokeWidth: this.strokeWidth,\r\n      fill: this.strokeColor,\r\n      stroke: this.strokeColor,\r\n      originX: \"center\",\r\n      originY: \"center\",\r\n      selectable: false,\r\n      evented: false,\r\n    })\r\n    canvas.add(this.currentLine)\r\n  }\r\n\r\n  onMouseMove(o: any) {\r\n    if (!this.isMouseDown) return\r\n    let canvas = this._canvas\r\n    var pointer = canvas.getPointer(o.e)\r\n    this.currentLine.set({ x2: pointer.x, y2: pointer.y })\r\n    this.currentLine.setCoords()\r\n    canvas.renderAll()\r\n  }\r\n\r\n  onMouseUp(o: any) {\r\n    this.isMouseDown = false\r\n  }\r\n\r\n  onMouseOut(o: any) {\r\n    this.isMouseDown = false\r\n  }\r\n}\r\n\r\nexport default LineTool\r\n","import { PythonArgs, sendDataToStreamlit } from \"../DrawableCanvas\"\r\nimport FabricTool from \"./fabrictool\"\r\n\r\nclass TransformTool extends FabricTool {\r\n  configureCanvas(args: PythonArgs): () => void {\r\n    let canvas = this._canvas\r\n    canvas.isDrawingMode = false\r\n    canvas.selection = true\r\n    canvas.forEachObject((o) => (o.selectable = o.evented = true))\r\n\r\n    canvas.on(\"mouse:dblclick\", () => {\r\n      canvas.remove(canvas.getActiveObject())\r\n      sendDataToStreamlit(canvas)\r\n    })\r\n    return () => {\r\n      canvas.off(\"mouse:dblclick\")\r\n    }\r\n  }\r\n}\r\n\r\nexport default TransformTool\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"./streamlit\"\r\nimport { fabric } from \"fabric\"\r\n\r\nimport FabricTool from \"./lib/fabrictool\"\r\nimport FreedrawTool from \"./lib/freedraw\"\r\nimport LineTool from \"./lib/line\"\r\nimport TransformTool from \"./lib/transform\"\r\n\r\n/**\r\n * Arguments Streamlit receives from the Python side\r\n */\r\nexport interface PythonArgs {\r\n  strokeWidth: number\r\n  strokeColor: string\r\n  backgroundColor: string\r\n  canvasWidth: number\r\n  canvasHeight: number\r\n  drawingMode: string\r\n}\r\n\r\ninterface Tools {\r\n  [key: string]: FabricTool\r\n}\r\n\r\n/**\r\n * Download data from canvas to send back to Streamlit\r\n */\r\nexport function sendDataToStreamlit(canvas: fabric.Canvas): void {\r\n  canvas.renderAll()\r\n  const imageData = canvas\r\n    .getContext()\r\n    .getImageData(0, 0, canvas.getWidth(), canvas.getHeight())\r\n  const data = Array.from(imageData[\"data\"])\r\n  Streamlit.setComponentValue({\r\n    data: data,\r\n    width: imageData[\"width\"],\r\n    height: imageData[\"height\"],\r\n  })\r\n}\r\n\r\n/**\r\n * Define logic for the canvas area\r\n */\r\nconst DrawableCanvas = ({ args }: ComponentProps) => {\r\n  const {\r\n    canvasWidth,\r\n    canvasHeight,\r\n    backgroundColor,\r\n    drawingMode,\r\n  }: PythonArgs = args\r\n  const [canvas, setCanvas] = useState(new fabric.Canvas(\"\"))\r\n\r\n  /**\r\n   * Initialize canvas on component mount\r\n   */\r\n  useEffect(() => {\r\n    const c = new fabric.Canvas(\"c\", {\r\n      enableRetinaScaling: false,\r\n    })\r\n    setCanvas(c)\r\n    Streamlit.setFrameHeight()\r\n  }, [canvasHeight, canvasWidth])\r\n\r\n  /**\r\n   * Update canvas with background and selected tool\r\n   */\r\n  useEffect(() => {\r\n    if (!canvas) {\r\n      return\r\n    }\r\n\r\n    canvas.backgroundColor = backgroundColor\r\n\r\n    const tools: Tools = {\r\n      freedraw: new FreedrawTool(canvas),\r\n      line: new LineTool(canvas),\r\n      transform: new TransformTool(canvas),\r\n    }\r\n    const selectedTool = tools[drawingMode]\r\n    const cleanup = selectedTool.configureCanvas(args)\r\n\r\n    const onMouseUp = () => {\r\n      sendDataToStreamlit(canvas)\r\n    }\r\n    canvas.on(\"mouse:up\", onMouseUp)\r\n\r\n    sendDataToStreamlit(canvas)\r\n\r\n    // Run tool cleanup + mouseeventup remove\r\n    return () => {\r\n      cleanup()\r\n      canvas.off(\"mouse:up\", onMouseUp)\r\n    }\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <canvas id=\"c\" width={canvasWidth} height={canvasHeight} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default withStreamlitConnection(DrawableCanvas)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport DrawableCanvas from \"./DrawableCanvas\"\r\n\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <DrawableCanvas />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}