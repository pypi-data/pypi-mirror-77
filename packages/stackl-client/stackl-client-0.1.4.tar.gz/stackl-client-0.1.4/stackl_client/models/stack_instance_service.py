# coding: utf-8

"""
    STACKL

    stackl  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from stackl_client.configuration import Configuration


class StackInstanceService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'infrastructure_target': 'str',
        'hosts': 'list[str]',
        'provisioning_parameters': 'object',
        'secrets': 'object'
    }

    attribute_map = {
        'infrastructure_target': 'infrastructure_target',
        'hosts': 'hosts',
        'provisioning_parameters': 'provisioning_parameters',
        'secrets': 'secrets'
    }

    def __init__(self, infrastructure_target=None, hosts=None, provisioning_parameters=None, secrets=None, local_vars_configuration=None):  # noqa: E501
        """StackInstanceService - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._infrastructure_target = None
        self._hosts = None
        self._provisioning_parameters = None
        self._secrets = None
        self.discriminator = None

        if infrastructure_target is not None:
            self.infrastructure_target = infrastructure_target
        if hosts is not None:
            self.hosts = hosts
        if provisioning_parameters is not None:
            self.provisioning_parameters = provisioning_parameters
        if secrets is not None:
            self.secrets = secrets

    @property
    def infrastructure_target(self):
        """Gets the infrastructure_target of this StackInstanceService.  # noqa: E501


        :return: The infrastructure_target of this StackInstanceService.  # noqa: E501
        :rtype: str
        """
        return self._infrastructure_target

    @infrastructure_target.setter
    def infrastructure_target(self, infrastructure_target):
        """Sets the infrastructure_target of this StackInstanceService.


        :param infrastructure_target: The infrastructure_target of this StackInstanceService.  # noqa: E501
        :type infrastructure_target: str
        """

        self._infrastructure_target = infrastructure_target

    @property
    def hosts(self):
        """Gets the hosts of this StackInstanceService.  # noqa: E501


        :return: The hosts of this StackInstanceService.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this StackInstanceService.


        :param hosts: The hosts of this StackInstanceService.  # noqa: E501
        :type hosts: list[str]
        """

        self._hosts = hosts

    @property
    def provisioning_parameters(self):
        """Gets the provisioning_parameters of this StackInstanceService.  # noqa: E501


        :return: The provisioning_parameters of this StackInstanceService.  # noqa: E501
        :rtype: object
        """
        return self._provisioning_parameters

    @provisioning_parameters.setter
    def provisioning_parameters(self, provisioning_parameters):
        """Sets the provisioning_parameters of this StackInstanceService.


        :param provisioning_parameters: The provisioning_parameters of this StackInstanceService.  # noqa: E501
        :type provisioning_parameters: object
        """

        self._provisioning_parameters = provisioning_parameters

    @property
    def secrets(self):
        """Gets the secrets of this StackInstanceService.  # noqa: E501


        :return: The secrets of this StackInstanceService.  # noqa: E501
        :rtype: object
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this StackInstanceService.


        :param secrets: The secrets of this StackInstanceService.  # noqa: E501
        :type secrets: object
        """

        self._secrets = secrets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}
        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = {item[0]: (item[1].to_dict() if hasattr(item[1], "to_dict") else (
                    [x.to_dict() if hasattr(x, "to_dict") else x for x in item[1]]
                    if isinstance(item[1], list)
                else item[1]) )
                for item in value.items()}
            else:
                result[attr] = value
        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StackInstanceService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StackInstanceService):
            return True

        return self.to_dict() != other.to_dict()
