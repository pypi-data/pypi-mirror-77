(window["webpackJsonp_jupyterlab_application_top"]=window["webpackJsonp_jupyterlab_application_top"]||[]).push([[9404,5588],{qUNE:(t,e,o)=>{"use strict";o.r(e);o.d(e,{ITooltipManager:()=>s,Tooltip:()=>m});var n=o("l37l");const s=new n.Token("@jupyterlab/tooltip:ITooltipManager");var i=o("aV2H");var r=o("xUe3");var d=o("gAOJ");const a="jp-Tooltip";const c="jp-Tooltip-content";const h="jp-mod-tooltip";const l=20;const p=250;const u=true;class m extends i.Widget{constructor(t){super();this._content=null;const e=this.layout=new i.PanelLayout;const o=new d.MimeModel({data:t.bundle});this.anchor=t.anchor;this.addClass(a);this.hide();this._editor=t.editor;this._rendermime=t.rendermime;const n=this._rendermime.preferredMimeType(t.bundle,"any");if(!n){return}this._content=this._rendermime.createRenderer(n);void this._content.renderModel(o);this._content.addClass(c);e.addWidget(this._content)}dispose(){if(this._content){this._content.dispose();this._content=null}super.dispose()}handleEvent(t){if(this.isHidden||this.isDisposed){return}const{node:e}=this;const o=t.target;switch(t.type){case"keydown":if(e.contains(o)){return}this.dispose();break;case"mousedown":if(e.contains(o)){this.activate();return}this.dispose();break;case"scroll":this._evtScroll(t);break;default:break}}onActivateRequest(t){this.node.tabIndex=-1;this.node.focus()}onAfterAttach(t){document.body.classList.add(h);document.addEventListener("keydown",this,u);document.addEventListener("mousedown",this,u);this.anchor.node.addEventListener("scroll",this,u);this.update()}onBeforeDetach(t){document.body.classList.remove(h);document.removeEventListener("keydown",this,u);document.removeEventListener("mousedown",this,u);this.anchor.node.removeEventListener("scroll",this,u)}onUpdateRequest(t){if(this.isHidden){this.show()}this._setGeometry();super.onUpdateRequest(t)}_evtScroll(t){if(this.node.contains(t.target)){return}this.update()}_setGeometry(){const t=this._editor;const e=t.getCursorPosition();const o=t.getOffsetAt(e);const n=t.getLine(e.line);if(!n){return}const s=n.substring(0,o).split(/\W+/);const i=s[s.length-1];const d=i?o-i.length:o;const a=t.getPositionAt(d);if(!a){return}const c=t.getCoordinateForPosition(a);const h=window.getComputedStyle(this.node);const u=parseInt(h.paddingLeft,10)||0;r.HoverBox.setGeometry({anchor:c,host:t.host,maxHeight:p,minHeight:l,node:this.node,offset:{horizontal:-1*u},privilege:"below",style:h})}}}}]);