Metadata-Version: 2.1
Name: lob-pyweb
Version: 0.6.2
Summary: UNKNOWN
Home-page: https://github.com/lobnek/pyweb
Author: Thomas Schmelzer
Author-email: thomas.schmelzer@gmail.com
License: MIT
Platform: UNKNOWN
Description-Content-Type: text/markdown
Requires-Dist: flask (>=1.1.2)
Requires-Dist: flask-caching (>=1.9.0)
Requires-Dist: waitress (>=1.4.4)
Requires-Dist: dash (>=1.12.0)
Requires-Dist: dash-daq (>=0.5.0)
Requires-Dist: flask-mongoengine (>=0.9.5)
Requires-Dist: whitenoise (>=5.1.0)
Requires-Dist: dnspython (>=1.16.0)
Requires-Dist: flask-bootstrap (>=3.3.7.1)

# pyweb

[![Action Status](https://github.com/lobnek/pyweb/workflows/Test/badge.svg)](https://github.com/lobnek/pyweb/actions/)

This project is the backbone for the web applications. 

## Technology

We take advantage of various technologies here

* We host static files with [Whitenoise](https://pypi.org/project/whitenoise/).
    ```python
    # add whitenoise
    server.wsgi_app = WhiteNoise(server.wsgi_app, root='/static', prefix='assets/')
    ```

* We use the [Waitress](https://docs.pylonsproject.org/projects/waitress/en/stable/) server.
    ```python
    #!/usr/bin/env python3
    from waitress import serve
    from pyweb.app import create_app


    if __name__ == '__main__':
        serve(app=create_app(), port=8000)
    ``` 

* The flask application is relying on the popular blueprint concept. We expose a REST server for performance calculations.
Applications built on this package can reuse the very same blueprints and remain slim and elegant.
    ```python
    def create_app():
        server = create_server(extensions=[engine, cache], static_folder="/static")

        server.register_blueprint(blue_whoosh, url_prefix="/whoosh")
        server.register_blueprint(blue_post, url_prefix="/engine")
        server.register_blueprint(blue_admin, url_prefix="/admin")

        # add whitenoise
        server.wsgi_app = WhiteNoise(server.wsgi_app, root='/static', prefix='assets/')

        return server
    ```    

* We use Flask extensions and a central settings.cfg file to initialize the extensions only once. Within the Dockerfile we set
    ```python
    ENV APPLICATION_SETTINGS="/server/config/settings.cfg"
    ```


* We extensively test the app and achieve a full coverage score. We test against a client created as a pytest fixture.
    ```python
    @pytest.fixture(scope="module")
    def client():
        app = create_app()

        with app.app_context():
            __init_session()

        yield app.test_client()
    ```

* We use httpie within the Docker image for simple testing and debugging



