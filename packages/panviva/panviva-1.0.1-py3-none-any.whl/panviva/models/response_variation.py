# coding: utf-8

"""
    Panviva API Suite v3

    Wouldn't it be great if you could share information seamlessly? This connector allows you to push your knowledge further and consume a complete list of Panviva's API offerings.  **Content APIs** perform resource related operations , e.g. `document`, `folder`, `file`, `container`, `image`.  **Live APIs** enable real-time communications with online users on our client application.  **Artefact APIs** interact with curated Panviva content, created by the Digital Orchestrator.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@panviva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ResponseVariation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'list[ResponseSection]',
        'channels': 'list[Channel]',
        'id': 'int',
        'date_created': 'datetime',
        'date_modified': 'datetime'
    }

    attribute_map = {
        'content': 'content',
        'channels': 'channels',
        'id': 'id',
        'date_created': 'dateCreated',
        'date_modified': 'dateModified'
    }

    def __init__(self, content=None, channels=None, id=None, date_created=None, date_modified=None):  # noqa: E501
        """ResponseVariation - a model defined in Swagger"""  # noqa: E501

        self._content = None
        self._channels = None
        self._id = None
        self._date_created = None
        self._date_modified = None
        self.discriminator = None

        if content is not None:
            self.content = content
        if channels is not None:
            self.channels = channels
        if id is not None:
            self.id = id
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified

    @property
    def content(self):
        """Gets the content of this ResponseVariation.  # noqa: E501


        :return: The content of this ResponseVariation.  # noqa: E501
        :rtype: list[ResponseSection]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ResponseVariation.


        :param content: The content of this ResponseVariation.  # noqa: E501
        :type: list[ResponseSection]
        """

        self._content = content

    @property
    def channels(self):
        """Gets the channels of this ResponseVariation.  # noqa: E501


        :return: The channels of this ResponseVariation.  # noqa: E501
        :rtype: list[Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ResponseVariation.


        :param channels: The channels of this ResponseVariation.  # noqa: E501
        :type: list[Channel]
        """

        self._channels = channels

    @property
    def id(self):
        """Gets the id of this ResponseVariation.  # noqa: E501


        :return: The id of this ResponseVariation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseVariation.


        :param id: The id of this ResponseVariation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def date_created(self):
        """Gets the date_created of this ResponseVariation.  # noqa: E501


        :return: The date_created of this ResponseVariation.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ResponseVariation.


        :param date_created: The date_created of this ResponseVariation.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this ResponseVariation.  # noqa: E501


        :return: The date_modified of this ResponseVariation.  # noqa: E501
        :rtype: datetime
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this ResponseVariation.


        :param date_modified: The date_modified of this ResponseVariation.  # noqa: E501
        :type: datetime
        """

        self._date_modified = date_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseVariation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseVariation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
