# coding: utf-8

"""
    Panviva API Suite v3

    Wouldn't it be great if you could share information seamlessly? This connector allows you to push your knowledge further and consume a complete list of Panviva's API offerings.  **Content APIs** perform resource related operations , e.g. `document`, `folder`, `file`, `container`, `image`.  **Live APIs** enable real-time communications with online users on our client application.  **Artefact APIs** interact with curated Panviva content, created by the Digital Orchestrator.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@panviva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ResponseSection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'media_type': 'str',
        'text': 'str',
        'href': 'str',
        'resource_location': 'str'
    }

    attribute_map = {
        'media_type': 'mediaType',
        'text': 'text',
        'href': 'href',
        'resource_location': 'resourceLocation'
    }

    def __init__(self, media_type=None, text=None, href=None, resource_location=None):  # noqa: E501
        """ResponseSection - a model defined in Swagger"""  # noqa: E501

        self._media_type = None
        self._text = None
        self._href = None
        self._resource_location = None
        self.discriminator = None

        if media_type is not None:
            self.media_type = media_type
        if text is not None:
            self.text = text
        if href is not None:
            self.href = href
        if resource_location is not None:
            self.resource_location = resource_location

    @property
    def media_type(self):
        """Gets the media_type of this ResponseSection.  # noqa: E501


        :return: The media_type of this ResponseSection.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this ResponseSection.


        :param media_type: The media_type of this ResponseSection.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def text(self):
        """Gets the text of this ResponseSection.  # noqa: E501


        :return: The text of this ResponseSection.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ResponseSection.


        :param text: The text of this ResponseSection.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def href(self):
        """Gets the href of this ResponseSection.  # noqa: E501


        :return: The href of this ResponseSection.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ResponseSection.


        :param href: The href of this ResponseSection.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def resource_location(self):
        """Gets the resource_location of this ResponseSection.  # noqa: E501


        :return: The resource_location of this ResponseSection.  # noqa: E501
        :rtype: str
        """
        return self._resource_location

    @resource_location.setter
    def resource_location(self, resource_location):
        """Sets the resource_location of this ResponseSection.


        :param resource_location: The resource_location of this ResponseSection.  # noqa: E501
        :type: str
        """

        self._resource_location = resource_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseSection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
