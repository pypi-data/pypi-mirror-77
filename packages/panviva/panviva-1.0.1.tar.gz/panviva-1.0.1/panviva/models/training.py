# coding: utf-8

"""
    Panviva API Suite v3

    Wouldn't it be great if you could share information seamlessly? This connector allows you to push your knowledge further and consume a complete list of Panviva's API offerings.  **Content APIs** perform resource related operations , e.g. `document`, `folder`, `file`, `container`, `image`.  **Live APIs** enable real-time communications with online users on our client application.  **Artefact APIs** interact with curated Panviva content, created by the Digital Orchestrator.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@panviva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Training(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failure_feedback': 'str',
        'force_page_sequence': 'bool',
        'force_question_sequence': 'bool',
        'passing_score': 'int',
        'success_feedback': 'str'
    }

    attribute_map = {
        'failure_feedback': 'failureFeedback',
        'force_page_sequence': 'forcePageSequence',
        'force_question_sequence': 'forceQuestionSequence',
        'passing_score': 'passingScore',
        'success_feedback': 'successFeedback'
    }

    def __init__(self, failure_feedback=None, force_page_sequence=None, force_question_sequence=None, passing_score=None, success_feedback=None):  # noqa: E501
        """Training - a model defined in Swagger"""  # noqa: E501

        self._failure_feedback = None
        self._force_page_sequence = None
        self._force_question_sequence = None
        self._passing_score = None
        self._success_feedback = None
        self.discriminator = None

        if failure_feedback is not None:
            self.failure_feedback = failure_feedback
        if force_page_sequence is not None:
            self.force_page_sequence = force_page_sequence
        if force_question_sequence is not None:
            self.force_question_sequence = force_question_sequence
        if passing_score is not None:
            self.passing_score = passing_score
        if success_feedback is not None:
            self.success_feedback = success_feedback

    @property
    def failure_feedback(self):
        """Gets the failure_feedback of this Training.  # noqa: E501


        :return: The failure_feedback of this Training.  # noqa: E501
        :rtype: str
        """
        return self._failure_feedback

    @failure_feedback.setter
    def failure_feedback(self, failure_feedback):
        """Sets the failure_feedback of this Training.


        :param failure_feedback: The failure_feedback of this Training.  # noqa: E501
        :type: str
        """

        self._failure_feedback = failure_feedback

    @property
    def force_page_sequence(self):
        """Gets the force_page_sequence of this Training.  # noqa: E501


        :return: The force_page_sequence of this Training.  # noqa: E501
        :rtype: bool
        """
        return self._force_page_sequence

    @force_page_sequence.setter
    def force_page_sequence(self, force_page_sequence):
        """Sets the force_page_sequence of this Training.


        :param force_page_sequence: The force_page_sequence of this Training.  # noqa: E501
        :type: bool
        """

        self._force_page_sequence = force_page_sequence

    @property
    def force_question_sequence(self):
        """Gets the force_question_sequence of this Training.  # noqa: E501


        :return: The force_question_sequence of this Training.  # noqa: E501
        :rtype: bool
        """
        return self._force_question_sequence

    @force_question_sequence.setter
    def force_question_sequence(self, force_question_sequence):
        """Sets the force_question_sequence of this Training.


        :param force_question_sequence: The force_question_sequence of this Training.  # noqa: E501
        :type: bool
        """

        self._force_question_sequence = force_question_sequence

    @property
    def passing_score(self):
        """Gets the passing_score of this Training.  # noqa: E501


        :return: The passing_score of this Training.  # noqa: E501
        :rtype: int
        """
        return self._passing_score

    @passing_score.setter
    def passing_score(self, passing_score):
        """Sets the passing_score of this Training.


        :param passing_score: The passing_score of this Training.  # noqa: E501
        :type: int
        """

        self._passing_score = passing_score

    @property
    def success_feedback(self):
        """Gets the success_feedback of this Training.  # noqa: E501


        :return: The success_feedback of this Training.  # noqa: E501
        :rtype: str
        """
        return self._success_feedback

    @success_feedback.setter
    def success_feedback(self, success_feedback):
        """Sets the success_feedback of this Training.


        :param success_feedback: The success_feedback of this Training.  # noqa: E501
        :type: str
        """

        self._success_feedback = success_feedback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Training, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Training):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
