# coding: utf-8

"""
    Panviva API Suite v3

    Wouldn't it be great if you could share information seamlessly? This connector allows you to push your knowledge further and consume a complete list of Panviva's API offerings.  **Content APIs** perform resource related operations , e.g. `document`, `folder`, `file`, `container`, `image`.  **Live APIs** enable real-time communications with online users on our client application.  **Artefact APIs** interact with curated Panviva content, created by the Digital Orchestrator.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@panviva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetFileResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'version': 'int',
        'language': 'str',
        'tags': 'list[Tag]',
        'hidden': 'bool',
        'source': 'str',
        'type': 'str',
        'content': 'str',
        'file_name': 'str',
        'release': 'int',
        'released': 'bool',
        'copyright': 'str',
        'classification': 'str',
        'status': 'str',
        'percentage': 'int',
        'release_date': 'datetime',
        'keywords': 'list[str]',
        'csh_keywords': 'list[str]',
        'change_note': 'str',
        'updated_date': 'datetime',
        'created_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'version': 'version',
        'language': 'language',
        'tags': 'tags',
        'hidden': 'hidden',
        'source': 'source',
        'type': 'type',
        'content': 'content',
        'file_name': 'fileName',
        'release': 'release',
        'released': 'released',
        'copyright': 'copyright',
        'classification': 'classification',
        'status': 'status',
        'percentage': 'percentage',
        'release_date': 'releaseDate',
        'keywords': 'keywords',
        'csh_keywords': 'cshKeywords',
        'change_note': 'changeNote',
        'updated_date': 'updatedDate',
        'created_date': 'createdDate'
    }

    def __init__(self, id=None, name=None, description=None, version=None, language=None, tags=None, hidden=None, source=None, type=None, content=None, file_name=None, release=None, released=None, copyright=None, classification=None, status=None, percentage=None, release_date=None, keywords=None, csh_keywords=None, change_note=None, updated_date=None, created_date=None):  # noqa: E501
        """GetFileResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._version = None
        self._language = None
        self._tags = None
        self._hidden = None
        self._source = None
        self._type = None
        self._content = None
        self._file_name = None
        self._release = None
        self._released = None
        self._copyright = None
        self._classification = None
        self._status = None
        self._percentage = None
        self._release_date = None
        self._keywords = None
        self._csh_keywords = None
        self._change_note = None
        self._updated_date = None
        self._created_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if version is not None:
            self.version = version
        if language is not None:
            self.language = language
        if tags is not None:
            self.tags = tags
        if hidden is not None:
            self.hidden = hidden
        if source is not None:
            self.source = source
        if type is not None:
            self.type = type
        if content is not None:
            self.content = content
        if file_name is not None:
            self.file_name = file_name
        if release is not None:
            self.release = release
        if released is not None:
            self.released = released
        if copyright is not None:
            self.copyright = copyright
        if classification is not None:
            self.classification = classification
        if status is not None:
            self.status = status
        if percentage is not None:
            self.percentage = percentage
        if release_date is not None:
            self.release_date = release_date
        if keywords is not None:
            self.keywords = keywords
        if csh_keywords is not None:
            self.csh_keywords = csh_keywords
        if change_note is not None:
            self.change_note = change_note
        if updated_date is not None:
            self.updated_date = updated_date
        if created_date is not None:
            self.created_date = created_date

    @property
    def id(self):
        """Gets the id of this GetFileResponse.  # noqa: E501


        :return: The id of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetFileResponse.


        :param id: The id of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetFileResponse.  # noqa: E501


        :return: The name of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetFileResponse.


        :param name: The name of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this GetFileResponse.  # noqa: E501


        :return: The description of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetFileResponse.


        :param description: The description of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def version(self):
        """Gets the version of this GetFileResponse.  # noqa: E501


        :return: The version of this GetFileResponse.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GetFileResponse.


        :param version: The version of this GetFileResponse.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def language(self):
        """Gets the language of this GetFileResponse.  # noqa: E501


        :return: The language of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GetFileResponse.


        :param language: The language of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def tags(self):
        """Gets the tags of this GetFileResponse.  # noqa: E501


        :return: The tags of this GetFileResponse.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetFileResponse.


        :param tags: The tags of this GetFileResponse.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def hidden(self):
        """Gets the hidden of this GetFileResponse.  # noqa: E501


        :return: The hidden of this GetFileResponse.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this GetFileResponse.


        :param hidden: The hidden of this GetFileResponse.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def source(self):
        """Gets the source of this GetFileResponse.  # noqa: E501


        :return: The source of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GetFileResponse.


        :param source: The source of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def type(self):
        """Gets the type of this GetFileResponse.  # noqa: E501


        :return: The type of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetFileResponse.


        :param type: The type of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def content(self):
        """Gets the content of this GetFileResponse.  # noqa: E501


        :return: The content of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GetFileResponse.


        :param content: The content of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def file_name(self):
        """Gets the file_name of this GetFileResponse.  # noqa: E501


        :return: The file_name of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this GetFileResponse.


        :param file_name: The file_name of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def release(self):
        """Gets the release of this GetFileResponse.  # noqa: E501


        :return: The release of this GetFileResponse.  # noqa: E501
        :rtype: int
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this GetFileResponse.


        :param release: The release of this GetFileResponse.  # noqa: E501
        :type: int
        """

        self._release = release

    @property
    def released(self):
        """Gets the released of this GetFileResponse.  # noqa: E501


        :return: The released of this GetFileResponse.  # noqa: E501
        :rtype: bool
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this GetFileResponse.


        :param released: The released of this GetFileResponse.  # noqa: E501
        :type: bool
        """

        self._released = released

    @property
    def copyright(self):
        """Gets the copyright of this GetFileResponse.  # noqa: E501


        :return: The copyright of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this GetFileResponse.


        :param copyright: The copyright of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._copyright = copyright

    @property
    def classification(self):
        """Gets the classification of this GetFileResponse.  # noqa: E501


        :return: The classification of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this GetFileResponse.


        :param classification: The classification of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._classification = classification

    @property
    def status(self):
        """Gets the status of this GetFileResponse.  # noqa: E501


        :return: The status of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetFileResponse.


        :param status: The status of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def percentage(self):
        """Gets the percentage of this GetFileResponse.  # noqa: E501


        :return: The percentage of this GetFileResponse.  # noqa: E501
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this GetFileResponse.


        :param percentage: The percentage of this GetFileResponse.  # noqa: E501
        :type: int
        """

        self._percentage = percentage

    @property
    def release_date(self):
        """Gets the release_date of this GetFileResponse.  # noqa: E501


        :return: The release_date of this GetFileResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this GetFileResponse.


        :param release_date: The release_date of this GetFileResponse.  # noqa: E501
        :type: datetime
        """

        self._release_date = release_date

    @property
    def keywords(self):
        """Gets the keywords of this GetFileResponse.  # noqa: E501


        :return: The keywords of this GetFileResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this GetFileResponse.


        :param keywords: The keywords of this GetFileResponse.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def csh_keywords(self):
        """Gets the csh_keywords of this GetFileResponse.  # noqa: E501


        :return: The csh_keywords of this GetFileResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._csh_keywords

    @csh_keywords.setter
    def csh_keywords(self, csh_keywords):
        """Sets the csh_keywords of this GetFileResponse.


        :param csh_keywords: The csh_keywords of this GetFileResponse.  # noqa: E501
        :type: list[str]
        """

        self._csh_keywords = csh_keywords

    @property
    def change_note(self):
        """Gets the change_note of this GetFileResponse.  # noqa: E501


        :return: The change_note of this GetFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._change_note

    @change_note.setter
    def change_note(self, change_note):
        """Sets the change_note of this GetFileResponse.


        :param change_note: The change_note of this GetFileResponse.  # noqa: E501
        :type: str
        """

        self._change_note = change_note

    @property
    def updated_date(self):
        """Gets the updated_date of this GetFileResponse.  # noqa: E501


        :return: The updated_date of this GetFileResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this GetFileResponse.


        :param updated_date: The updated_date of this GetFileResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    @property
    def created_date(self):
        """Gets the created_date of this GetFileResponse.  # noqa: E501


        :return: The created_date of this GetFileResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GetFileResponse.


        :param created_date: The created_date of this GetFileResponse.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetFileResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetFileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
