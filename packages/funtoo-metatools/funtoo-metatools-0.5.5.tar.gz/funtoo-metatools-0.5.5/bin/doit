#!/usr/bin/env python3

import asyncio
import sys

import pop.hub
import logging

hub_logger = logging.getLogger("pop.hub")
hub_logger.setLevel(logging.DEBUG)
hub = pop.hub.Hub()

hub.pop.sub.add(dyne_name="pkgtools", omit_class=False)

if __name__ == "__main__":
	errors = asyncio.run(hub.pkgtools.autogen.start())
	if len(errors):
		sys.stderr.write('\n\n')
		for e, tb_info in errors:
			if type(e) == hub.pkgtools.fetch.FetchError:
				logging.error(repr(e))
			elif type(e) == hub.pkgtools.ebuild.BreezyError:
				logging.error(e.msg)
			else:
				logging.error(repr(e) + ': ')
				for tb in tb_info:
					filename, line, func, text = tb
					logging.error(f'  file {filename} line {line}: {func}: {text}')
		sys.stderr.write("\n\nErrors encountered.\n")
		sys.exit(1)
# TODO: add after-action report (listing any failures.)
# TODO: add mass-autogen YAML support.
# TODO: add 'facts' database concept to allow more resiliency on failures (fall back to cached facts from last
#       successful run)

# vim: ts=4 sw=4 noet
