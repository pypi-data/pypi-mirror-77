{"version":3,"sources":["streamlit/streamlit.ts","streamlit/ArrowTable.ts","streamlit/StreamlitReact.tsx","components/timeline.js","App.tsx","index.tsx"],"names":["ComponentMessageType","ArrowTable","dataBuffer","indexBuffer","columnsBuffer","styler","dataTable","indexTable","columnsTable","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","push","type","join","content","dataColumnIndex","getContent","dataRowIndex","id","uuid","displayValuesTable","table","column","getColumnAt","getColumnTypeId","Type","Timestamp","nanosToDate","get","this","Table","from","caption","styles","undefined","schema","fields","typeId","nanos","Date","length","numCols","rows","dataRows","columns","dataColumns","Streamlit","API_VERSION","RENDER_EVENT","events","EventTarget","registeredMessageListener","lastFrameHeight","setComponentReady","window","addEventListener","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","body","scrollHeight","SET_FRAME_HEIGHT","setComponentValue","value","SET_COMPONENT_VALUE","event","data","onRenderMessage","args","console","error","dataframeArgs","argsDataframeToObject","disabled","Boolean","CustomEvent","detail","dispatchEvent","argsDataframe","argsDataframeArrow","map","key","toArrowTable","Object","fromEntries","df","index","parent","postMessage","isStreamlitMessage","StreamlitComponentBase","React","PureComponent","timeline","ref","useRef","drawTimeline","keys","appearance","videoLength","end_time","start_time","svg","d3","current","attr","framesCount","track_ids","thumbnails","yPos","xOrigin","getBoundingClientRect","x","xStep","thumbnailStep","thumbnail_rate","forEach","trackId","trackIx","append","faceSize","track_faces","tooltip","style","prev","prevIdx","segments","currSegment","start","curr","idx","lastIdx","end","present","getAppearanceSegments","s","segmentIx","color","colorHover","segmentId","on","xEvent","Math","abs","pageX","transition","duration","thumbnailIx","min","floor","tooltipYOffset","html","pageY","useEffect","withStreamlitConnection","WrappedComponent","ComponentWrapper","props","componentDidMount","onRenderEvent","componentDidUpdate","state","componentError","componentWillUnmount","removeEventListener","renderEvent","setState","renderData","render","message","width","innerWidth","getDerivedStateFromError","hoistNonReactStatics","totalTracks","className","margin","href","target","alt","src","ReactDOM","StrictMode","getElementById"],"mappings":";2MA4BKA,E,6GCoBQC,EAAb,WAME,WACEC,EACAC,EACAC,EACAC,GACC,IAAD,gCAVeC,eAUf,OATeC,gBASf,OAReC,kBAQf,OAPeH,YAOf,OA8DKI,QAAU,SAACC,EAAkBC,GAClC,IAAMC,EACJF,EAAW,EAAKG,YAAcF,EAAc,EAAKG,cAC7CC,EACJL,GAAY,EAAKG,YAAcF,EAAc,EAAKG,cAC9CE,EACJN,EAAW,EAAKG,YAAcF,GAAe,EAAKG,cAEpD,GAAIF,EAAa,CACf,IAAMK,EAAa,CAAC,SAKpB,OAJIN,EAAc,GAChBM,EAAWC,KAAK,QAAUR,GAGrB,CACLS,KAAM,QACNF,WAAYA,EAAWG,KAAK,KAC5BC,QAAS,IAEN,GAAIL,EAAe,CACxB,IAAMM,EAAkBX,EAAc,EAAKG,cAO3C,MAAO,CACLK,KAAM,UACNF,WARiB,CACjB,cACA,QAAUP,EACV,MAAQY,GAKeF,KAAK,KAC5BC,QAAS,EAAKE,WAAW,EAAKf,aAAcc,EAAiBZ,IAE1D,GAAIK,EAAa,CACtB,IAAMS,EAAed,EAAW,EAAKG,WAC/BI,EAAa,CACjB,cACA,QAAUN,EACV,MAAQa,GAGV,MAAO,CACLL,KAAM,QACNM,GAAG,KAAD,OAAO,EAAKC,KAAZ,gBAAwBf,EAAxB,eAA0Ca,GAC5CP,WAAYA,EAAWG,KAAK,KAC5BC,QAAS,EAAKE,WAAW,EAAKhB,WAAYiB,EAAcb,IAG1D,IAAMa,EAAed,EAAW,EAAKG,WAC/BS,EAAkBX,EAAc,EAAKG,cACrCG,EAAa,CACjB,OACA,MAAQO,EACR,MAAQF,GAEJD,EAAU,EAAKhB,OACjB,EAAKkB,WACH,EAAKlB,OAAOsB,mBACZH,EACAF,GAEF,EAAKC,WAAW,EAAKjB,UAAWkB,EAAcF,GAElD,MAAO,CACLH,KAAM,OACNM,GAAG,KAAD,OAAO,EAAKC,KAAZ,cAAsBF,EAAtB,eAAyCF,GAC3CL,WAAYA,EAAWG,KAAK,KAC5BC,YAhIJ,KAqIKE,WAAa,SAClBK,EACAlB,EACAC,GAEA,IAAMkB,EAASD,EAAME,YAAYnB,GACjC,GAAe,OAAXkB,EACF,MAAO,GAIT,OADqB,EAAKE,gBAAgBH,EAAOjB,IAE/C,KAAKqB,IAAKC,UACR,OAAO,EAAKC,YAAYL,EAAOM,IAAIzB,IAErC,QACE,OAAOmB,EAAOM,IAAIzB,KApJtB0B,KAAK9B,UAAY+B,IAAMC,KAAKpC,GAC5BkC,KAAK7B,WAAa8B,IAAMC,KAAKnC,GAC7BiC,KAAK5B,aAAe6B,IAAMC,KAAKlC,GAC/BgC,KAAK/B,OAASA,EACV,CACEkC,QAASlC,EAAO8B,IAAI,WACpBR,mBAAoBU,IAAMC,KAAKjC,EAAO8B,IAAI,kBAC1CK,OAAQnC,EAAO8B,IAAI,UACnBT,KAAMrB,EAAO8B,IAAI,cAEnBM,EAtBR,4DAwK0Bb,EAAcjB,GACpC,OAAOiB,EAAMc,OAAOC,OAAOhC,GAAaQ,KAAKyB,SAzKjD,kCA4KsBC,GAClB,OAAO,IAAIC,KAAKD,EAAQ,OA7K5B,2BA0BI,OAAOT,KAAK7B,WAAWwC,OAASX,KAAK5B,aAAawC,UA1BtD,8BA8BI,OAAOZ,KAAK7B,WAAWyC,QAAUZ,KAAK5B,aAAauC,SA9BvD,iCAkCI,OAAOX,KAAKa,KAAOb,KAAKc,WAlC5B,oCAsCI,OAAOd,KAAKe,QAAUf,KAAKgB,cAtC/B,+BA0CI,OAAOhB,KAAK9B,UAAUyC,SA1C1B,kCA8CI,OAAOX,KAAK9B,UAAU0C,UA9C1B,2BAkDI,OAAOZ,KAAK/B,QAAU+B,KAAK/B,OAAOqB,OAlDtC,8BAsDI,OAAOU,KAAK/B,QAAU+B,KAAK/B,OAAOkC,UAtDtC,6BA0DI,OAAOH,KAAK/B,QAAU+B,KAAK/B,OAAOmC,SA1DtC,4BA8DI,OAAOJ,KAAK9B,YA9DhB,4BAkEI,OAAO8B,KAAK7B,aAlEhB,kCAsEI,OAAO6B,KAAK5B,iBAtEhB,M,SDpBKR,K,2CAAAA,E,kDAAAA,E,6CAAAA,M,KAsBE,IAAMqD,EAAb,kCAAaA,EAKYC,YAAc,EAL1BD,EAOYE,aAAe,mBAP3BF,EAUYG,OAAS,IAAIC,IAVzBJ,EAYIK,2BAA4B,EAZhCL,EAaIM,qB,EAbJN,EAoBGO,kBAAoB,WAC3BP,EAAUK,4BAEbG,OAAOC,iBAAiB,UAAWT,EAAUU,gBAC7CV,EAAUK,2BAA4B,GAGxCL,EAAUW,YAAYhE,EAAqBiE,gBAAiB,CAC1DC,WAAYb,EAAUC,eA5BfD,EAqCGc,eAAiB,SAACC,QACf3B,IAAX2B,IAIFA,EAASC,SAASC,KAAKC,cAGrBH,IAAWf,EAAUM,kBAKzBN,EAAUM,gBAAkBS,EAC5Bf,EAAUW,YAAYhE,EAAqBwE,iBAAkB,CAAEJ,aAnDtDf,EAqEGoB,kBAAoB,SAACC,GACjCrB,EAAUW,YAAYhE,EAAqB2E,oBAAqB,CAAED,WAtEzDrB,EA0EIU,eAAiB,SAACa,GAE/B,OADaA,EAAMC,KAAN,MAEX,KAAKxB,EAAUE,aACbF,EAAUyB,gBAAgBF,EAAMC,QA9E3BxB,EAuFIyB,gBAAkB,SAACD,GAChC,IAAIE,EAAOF,EAAI,KACH,MAARE,IACFC,QAAQC,MAAR,8DAGAF,EAAO,IAIT,IAAMG,EACJL,EAAI,KAAWA,EAAI,IAAQ9B,OAAS,EAChCM,EAAU8B,sBAAsBN,EAAI,KACpC,GAENE,EAAI,2BACCA,GACAG,GAGL,IAAME,EAAWC,QAAQR,EAAI,UAIvBD,EAAQ,IAAIU,YAAwBjC,EAAUE,aAAc,CAChEgC,OAFgB,CAAEH,WAAUL,UAI9B1B,EAAUG,OAAOgC,cAAcZ,IAlHtBvB,EAqHI8B,sBAAwB,SACrCM,GAEA,IAAMC,EAAqBD,EAAcE,KACvC,gBAAGC,EAAH,EAAGA,IAAKlB,EAAR,EAAQA,MAAR,MAAmC,CAACkB,EAAKvC,EAAUwC,aAAanB,OAElE,OAAOoB,OAAOC,YAAYL,IA3HjBrC,EA8HIwC,aAAe,SAACG,GAAyC,IAAD,EACpCA,EAAGnB,KAA5BA,EAD6D,EAC7DA,KAAMoB,EADuD,EACvDA,MAAO9C,EADgD,EAChDA,QACrB,OAAO,IAAIlD,EAAW4E,EAAMoB,EAAO9C,IAhI1BE,EAoIIW,YAAc,SAAC7C,EAAc0D,GAC1ChB,OAAOqC,OAAOC,YAAd,aAEIC,oBAAoB,EACpBjF,KAAMA,GACH0D,GAEL,ME/JC,IAAMwB,EAAb,kLAOIhD,EAAUc,mBAPd,2CAYId,EAAUc,qBAZd,GAAoDmC,IAAMC,e,WCzB3C,cAAmB,IAAhBC,EAAe,EAAfA,SACVC,EAAMC,mBAgCNC,EAAe,SAACF,EAAKD,GACzB,GAAiB,OAAbA,EAAJ,CAIA,IAEMpC,EAFa,GAES0B,OAAOc,KAAKJ,EAASK,YAAY9D,OACvD+D,EAAcN,EAASO,SAAWP,EAASQ,WAE3CC,EAAMC,IAAUT,EAAIU,SAC1BF,EAAIG,KAAK,QALK,KAKWA,KAAK,SAAUhD,GAExC,IAAMiD,EAAcb,EAASK,WAAWL,EAASc,UAAU,IAAIvE,OACzDwE,EAAaf,EAASe,WAExBC,EAAO,EAELC,EAAUhB,EAAIU,QAAQO,wBAAwBC,EAC9CC,EAbQ,IAaQP,EAChBQ,EAAgBD,EAAQpB,EAASsB,eAGvCtB,EAASc,UAAUS,SAAQ,SAACC,EAASC,GAEjBhB,EAAIiB,OAAO,QAE1BA,OAAO,YACPd,KAAK,KAFR,eAEsBa,IACnBC,OAAO,UACPd,KAAK,KAAMe,MACXf,KAAK,KAAMe,KAAeX,EAdf,IAeXJ,KAAK,IAAKe,MACblB,EACGiB,OAAO,KACPA,OAAO,SACPd,KAAK,IAAK,GACVA,KAAK,IAAKI,EApBC,IAqBXJ,KAAK,QAjBO,IAkBZA,KAAK,SAlBO,IAmBZA,KACC,aARJ,gCAS6BZ,EAAS4B,YAAYJ,KAE/CZ,KAAK,YAXR,oBAWkCa,EAXlC,MAYGb,KAAK,YAAa,yBAErB,IAAMiB,EAAUnB,IACN,QACPgB,OAAO,OACPd,KAAK,KAHQ,kBAGSY,IACtBZ,KAAK,QAAS,WACdkB,MAAM,UAAW,IAjFM,SAACzB,GAC7B,IAEI0B,EAAMC,EAFJC,EAAW,GACbC,EAAc,CAAEC,MAAO,GAG3B9B,EAAWkB,SAAQ,SAACa,EAAMC,QACVpG,IAAT8F,EAAuBK,IAASL,IACnCG,EAAW,IAAUF,EACrBE,EAAW,QAAcH,EAEzBE,EAASvH,KAAKwH,GAEdA,EAAc,CAAEC,MAAOE,IAEzBL,EAAUK,EACVN,EAAOK,KAIT,IAAME,EAAUjC,EAAW9D,OAAS,EAOpC,OANA2F,EAAW,2BACNA,GADM,IAETK,IAAKD,EACLE,QAASnC,EAAWiC,KAEtBL,EAASvH,KAAKwH,GACPD,GA0DYQ,CAAsBzC,EAASK,WAAWmB,IAClDD,SAAQ,SAACmB,EAAGC,GACnB,IAAMC,EAAQF,EAAEF,QAAU,UAAY,UAChCK,EAAaH,EAAEF,QAAU,UAAY,UAErCM,EAAS,qBAAiBrB,EAAjB,YAA4BkB,GAE3ClC,EACGiB,OAAO,QACPd,KAAK,KAAMkC,GACXlC,KAAK,IAAK8B,EAAEP,MAAQf,GACpBR,KAAK,IAAKI,GACVJ,KAAK,QAAS8B,EAAEH,IAAMnB,EAAQsB,EAAEP,MAAQf,GACxCR,KAAK,SAAU,GACfkB,MAAM,OAAQc,GACdd,MAAM,SAAU,WAChBA,MAAM,eAAgB,GACtBiB,GAAG,aAAa,WACCrC,IAAUoC,GAClBhB,MAAM,OAAQe,GAEtB,IAAMG,EAASC,KAAKC,IAAIxC,IAASyC,MAAQlC,GAEzC,GAAIF,EAAY,CACdc,EAAQuB,aAAaC,SAAS,KAAKvB,MAAM,UAAW,GACpD,IAAMwB,EAAcL,KAAKM,IACvBN,KAAKO,MAAMR,EAAS3B,GACpBN,EAAWxE,OAAS,GAIhBkH,EAAiBhC,EAAU,GAAK,IAAM,EAE5CI,EACG6B,KADH,oEAEiE3C,EAAWuC,GAF5E,SAIGxB,MAAM,OAJT,UAIoBpB,IAASyC,MAAQ,GAJrC,OAKGrB,MAAM,MALT,UAKmBpB,IAASiD,MAAQF,EALpC,WAQHV,GAAG,YAAY,WACErC,IAAA,sBAAyBiC,IACjCb,MAAM,OAAQc,GAElB7B,GACFc,EAAQuB,aAAaC,SAAS,KAAKvB,MAAM,UAAW,MAGvDiB,GAAG,SAAS,WACX,IAAMC,EAASC,KAAKC,IAAIxC,IAASyC,MAAQlC,GAQzCpE,EAAUoB,kBANaqC,GADL0C,EApGZ,YA+GZhC,GAhHiB,QAwHrB,OAJA4C,qBAAU,WACRzD,EAAaF,EAAKD,KACjB,CAACA,IAEG,yBAAKC,IAAKA,KCrGJ4D,EFXR,SACLC,GACsB,IAQhBC,EARe,kDAYnB,WAAmBC,GAAsB,IAAD,8BACtC,cAAMA,IAkBDC,kBAAoB,WAGzBpH,EAAUG,OAAOM,iBACfT,EAAUE,aACV,EAAKmH,eAEPrH,EAAUO,qBA1B4B,EA6BjC+G,mBAAqB,WAKO,MAA7B,EAAKC,MAAMC,gBACbxH,EAAUc,kBAnC0B,EAuCjC2G,qBAAuB,WAC5BzH,EAAUG,OAAOuH,oBACf1H,EAAUE,aACV,EAAKmH,gBA1C+B,EAmDhCA,cAAgB,SAAC9F,GAEvB,IAAMoG,EAAcpG,EACpB,EAAKqG,SAAS,CAAEC,WAAYF,EAAYzF,UAtDF,EAyDjC4F,OAAS,WAEd,OAAiC,MAA7B,EAAKP,MAAMC,eAEX,6BACE,+CACA,8BAAO,EAAKD,MAAMC,eAAeO,UAMV,MAAzB,EAAKR,MAAMM,WACN,KAIP,kBAACZ,EAAD,CACEe,MAAOxH,OAAOyH,WACdlG,SAAU,EAAKwF,MAAMM,WAAW9F,SAChCL,KAAM,EAAK6F,MAAMM,WAAWnG,QA3EhC,EAAK6F,MAAQ,CACXM,gBAAYzI,EACZoI,oBAAgBpI,GAJoB,EAZrB,UAQU6D,IAAMC,eAuFrC,OAvFMgE,EAiBUgB,yBAA2B,SACvCtG,GAEA,MAAO,CAAE4F,eAAgB5F,IAmEtBuG,IAAqBjB,EAAkBD,GEtFjCD,C,4MA9CNI,kBAAoB,WACzB,IAAMgB,EAAc,EAAKjB,MAAMzF,KAAX,SAA4BuC,UAAUvE,OAC1DM,EAAUc,eAA6B,GAAdsH,EAAmB,M,EAGvCN,OAAS,WACd,IAAM3E,EAAW,EAAKgE,MAAMzF,KAAX,SAEjB,OACE,yBAAK2G,UAAU,OACb,0BAAMpD,MAAO,CAAEqD,OAAQ,SACrB,oCACE,6BAASrD,MAAO,CAAEqD,OAAQ,SACxB,kBAAC,EAAD,CAAUnF,SAAUA,OAI1B,4CACY,IACV,2BACE,uBAAGoF,KAAK,wCAAwCC,OAAO,UACrD,yBACEC,IAAI,cACJC,IAAI,oBACJ3H,OAAO,KACPiH,MAAM,SAGP,IAXP,KAYK,IACH,2BACE,uBAAGO,KAAK,mBAAmBC,OAAO,UAAlC,a,YAhCMxF,I,MCPlB2F,IAASb,OACP,kBAAC,IAAMc,WAAP,KACE,kBAAC,EAAD,OAEF5H,SAAS6H,eAAe,W","file":"static/js/main.eed10c02.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2020 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\"\nimport { ArrowDataframeProto, ArrowTable } from \"./ArrowTable\"\n\n/** Data sent in the custom Streamlit render event. */\nexport interface RenderData {\n  args: any\n  disabled: boolean\n}\n\n/** Messages from Component -> Streamlit */\nenum ComponentMessageType {\n  // A component sends this message when it's ready to receive messages\n  // from Streamlit. Streamlit won't send any messages until it gets this.\n  // Data: { apiVersion: number }\n  COMPONENT_READY = \"streamlit:componentReady\",\n\n  // The component has a new widget value. Send it back to Streamlit, which\n  // will then re-run the app.\n  // Data: { value: any }\n  SET_COMPONENT_VALUE = \"streamlit:setComponentValue\",\n\n  // The component has a new height for its iframe.\n  // Data: { height: number }\n  SET_FRAME_HEIGHT = \"streamlit:setFrameHeight\",\n}\n\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nexport class Streamlit {\n  /**\n   * The Streamlit component API version we're targetting.\n   * There's currently only 1!\n   */\n  public static readonly API_VERSION = 1\n\n  public static readonly RENDER_EVENT = \"streamlit:render\"\n\n  /** Dispatches events received from Streamlit. */\n  public static readonly events = new EventTarget()\n\n  private static registeredMessageListener = false\n  private static lastFrameHeight?: number\n\n  /**\n   * Tell Streamlit that the component is ready to start receiving data.\n   * Streamlit will defer emitting RENDER events until it receives the\n   * COMPONENT_READY message.\n   */\n  public static setComponentReady = (): void => {\n    if (!Streamlit.registeredMessageListener) {\n      // Register for message events if we haven't already\n      window.addEventListener(\"message\", Streamlit.onMessageEvent)\n      Streamlit.registeredMessageListener = true\n    }\n\n    Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n      apiVersion: Streamlit.API_VERSION,\n    })\n  }\n\n  /**\n   * Report the component's height to Streamlit.\n   * This should be called every time the component changes its DOM - that is,\n   * when it's first loaded, and any time it updates.\n   */\n  public static setFrameHeight = (height?: number): void => {\n    if (height === undefined) {\n      // `height` is optional. If undefined, it defaults to scrollHeight,\n      // which is the entire height of the element minus its border,\n      // scrollbar, and margin.\n      height = document.body.scrollHeight\n    }\n\n    if (height === Streamlit.lastFrameHeight) {\n      // Don't bother updating if our height hasn't changed.\n      return\n    }\n\n    Streamlit.lastFrameHeight = height\n    Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height })\n  }\n\n  /**\n   * Set the component's value. This value will be returned to the Python\n   * script, and the script will be re-run.\n   *\n   * For example:\n   *\n   * JavaScript:\n   * Streamlit.setComponentValue(\"ahoy!\")\n   *\n   * Python:\n   * value = st.my_component(...)\n   * st.write(value) # -> \"ahoy!\"\n   *\n   * The value must be serializable into JSON.\n   */\n  public static setComponentValue = (value: any): void => {\n    Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, { value })\n  }\n\n  /** Receive a ForwardMsg from the Streamlit app */\n  private static onMessageEvent = (event: MessageEvent): void => {\n    const type = event.data[\"type\"]\n    switch (type) {\n      case Streamlit.RENDER_EVENT:\n        Streamlit.onRenderMessage(event.data)\n        break\n    }\n  }\n\n  /**\n   * Handle an untyped Streamlit render event and redispatch it as a\n   * StreamlitRenderEvent.\n   */\n  private static onRenderMessage = (data: any): void => {\n    let args = data[\"args\"]\n    if (args == null) {\n      console.error(\n        `Got null args in onRenderMessage. This should never happen`\n      )\n      args = {}\n    }\n\n    // Parse our dataframe arguments with arrow, and merge them into our args dict\n    const dataframeArgs =\n      data[\"dfs\"] && data[\"dfs\"].length > 0\n        ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n        : {}\n\n    args = {\n      ...args,\n      ...dataframeArgs,\n    }\n\n    const disabled = Boolean(data[\"disabled\"])\n\n    // Dispatch a render event!\n    const eventData = { disabled, args }\n    const event = new CustomEvent<RenderData>(Streamlit.RENDER_EVENT, {\n      detail: eventData,\n    })\n    Streamlit.events.dispatchEvent(event)\n  }\n\n  private static argsDataframeToObject = (\n    argsDataframe: ArgsDataframe[]\n  ): object => {\n    const argsDataframeArrow = argsDataframe.map(\n      ({ key, value }: ArgsDataframe) => [key, Streamlit.toArrowTable(value)]\n    )\n    return Object.fromEntries(argsDataframeArrow)\n  }\n\n  private static toArrowTable = (df: ArrowDataframeProto): ArrowTable => {\n    const { data, index, columns } = df.data\n    return new ArrowTable(data, index, columns)\n  }\n\n  /** Post a message to the Streamlit app. */\n  private static sendBackMsg = (type: string, data?: any): void => {\n    window.parent.postMessage(\n      {\n        isStreamlitMessage: true,\n        type: type,\n        ...data,\n      },\n      \"*\"\n    )\n  }\n}\n\ninterface ArgsDataframe {\n  key: string\n  value: ArrowDataframeProto\n}\n","/**\n * @license\n * Copyright 2018-2019 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Table, Type } from \"apache-arrow\"\n\ntype CellType = \"blank\" | \"index\" | \"columns\" | \"data\"\n\nexport interface ArrowDataframeProto {\n  data: ArrowTableProto\n  height: string\n  width: string\n}\n\nexport interface ArrowTableProto {\n  data: Uint8Array\n  index: Uint8Array\n  columns: Uint8Array\n  styler: Styler\n}\n\ninterface Cell {\n  classNames: string\n  content: string\n  id?: string\n  type: CellType\n}\n\ninterface Styler {\n  caption?: string\n  displayValuesTable: Table\n  styles?: string\n  uuid: string\n}\n\nexport class ArrowTable {\n  private readonly dataTable: Table\n  private readonly indexTable: Table\n  private readonly columnsTable: Table\n  private readonly styler?: Styler\n\n  constructor(\n    dataBuffer: Uint8Array,\n    indexBuffer: Uint8Array,\n    columnsBuffer: Uint8Array,\n    styler?: any\n  ) {\n    this.dataTable = Table.from(dataBuffer)\n    this.indexTable = Table.from(indexBuffer)\n    this.columnsTable = Table.from(columnsBuffer)\n    this.styler = styler\n      ? {\n          caption: styler.get(\"caption\"),\n          displayValuesTable: Table.from(styler.get(\"displayValues\")),\n          styles: styler.get(\"styles\"),\n          uuid: styler.get(\"uuid\"),\n        }\n      : undefined\n  }\n\n  get rows(): number {\n    return this.indexTable.length + this.columnsTable.numCols\n  }\n\n  get columns(): number {\n    return this.indexTable.numCols + this.columnsTable.length\n  }\n\n  get headerRows(): number {\n    return this.rows - this.dataRows\n  }\n\n  get headerColumns(): number {\n    return this.columns - this.dataColumns\n  }\n\n  get dataRows(): number {\n    return this.dataTable.length\n  }\n\n  get dataColumns(): number {\n    return this.dataTable.numCols\n  }\n\n  get uuid(): string | undefined {\n    return this.styler && this.styler.uuid\n  }\n\n  get caption(): string | undefined {\n    return this.styler && this.styler.caption\n  }\n\n  get styles(): string | undefined {\n    return this.styler && this.styler.styles\n  }\n\n  get table(): Table {\n    return this.dataTable\n  }\n\n  get index(): Table {\n    return this.indexTable\n  }\n\n  get columnTable(): Table {\n    return this.columnsTable\n  }\n\n  public getCell = (rowIndex: number, columnIndex: number): Cell => {\n    const isBlankCell =\n      rowIndex < this.headerRows && columnIndex < this.headerColumns\n    const isIndexCell =\n      rowIndex >= this.headerRows && columnIndex < this.headerColumns\n    const isColumnsCell =\n      rowIndex < this.headerRows && columnIndex >= this.headerColumns\n\n    if (isBlankCell) {\n      const classNames = [\"blank\"]\n      if (columnIndex > 0) {\n        classNames.push(\"level\" + rowIndex)\n      }\n\n      return {\n        type: \"blank\",\n        classNames: classNames.join(\" \"),\n        content: \"\",\n      }\n    } else if (isColumnsCell) {\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"col_heading\",\n        \"level\" + rowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n\n      return {\n        type: \"columns\",\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.columnsTable, dataColumnIndex, rowIndex),\n      }\n    } else if (isIndexCell) {\n      const dataRowIndex = rowIndex - this.headerRows\n      const classNames = [\n        \"row_heading\",\n        \"level\" + columnIndex,\n        \"row\" + dataRowIndex,\n      ]\n\n      return {\n        type: \"index\",\n        id: `T_${this.uuid}level${columnIndex}_row${dataRowIndex}`,\n        classNames: classNames.join(\" \"),\n        content: this.getContent(this.indexTable, dataRowIndex, columnIndex),\n      }\n    } else {\n      const dataRowIndex = rowIndex - this.headerRows\n      const dataColumnIndex = columnIndex - this.headerColumns\n      const classNames = [\n        \"data\",\n        \"row\" + dataRowIndex,\n        \"col\" + dataColumnIndex,\n      ]\n      const content = this.styler\n        ? this.getContent(\n            this.styler.displayValuesTable,\n            dataRowIndex,\n            dataColumnIndex\n          )\n        : this.getContent(this.dataTable, dataRowIndex, dataColumnIndex)\n\n      return {\n        type: \"data\",\n        id: `T_${this.uuid}row${dataRowIndex}_col${dataColumnIndex}`,\n        classNames: classNames.join(\" \"),\n        content,\n      }\n    }\n  }\n\n  public getContent = (\n    table: Table,\n    rowIndex: number,\n    columnIndex: number\n  ): any => {\n    const column = table.getColumnAt(columnIndex)\n    if (column === null) {\n      return \"\"\n    }\n\n    const columnTypeId = this.getColumnTypeId(table, columnIndex)\n    switch (columnTypeId) {\n      case Type.Timestamp: {\n        return this.nanosToDate(column.get(rowIndex))\n      }\n      default: {\n        return column.get(rowIndex)\n      }\n    }\n  }\n\n  /**\n   * Returns apache-arrow specific typeId of column.\n   */\n  private getColumnTypeId(table: Table, columnIndex: number): Type {\n    return table.schema.fields[columnIndex].type.typeId\n  }\n\n  private nanosToDate(nanos: number): Date {\n    return new Date(nanos / 1e6)\n  }\n}\n","import hoistNonReactStatics from \"hoist-non-react-statics\"\nimport React, { ReactNode } from \"react\"\nimport { RenderData, Streamlit } from \"./streamlit\"\n\n/**\n * Props passed to custom Streamlit components.\n */\nexport interface ComponentProps {\n  /** Named dictionary of arguments passed from Python. */\n  args: any\n\n  /** The component's width. */\n  width: number\n\n  /**\n   * True if the component should be disabled.\n   * All components get disabled while the app is being re-run,\n   * and become re-enabled when the re-run has finished.\n   */\n  disabled: boolean\n}\n\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nexport class StreamlitComponentBase<S = {}> extends React.PureComponent<\n  ComponentProps,\n  S\n> {\n  public componentDidMount(): void {\n    // After we're rendered for the first time, tell Streamlit that our height\n    // has changed.\n    Streamlit.setFrameHeight()\n  }\n\n  public componentDidUpdate(): void {\n    // After we're updated, tell Streamlit that our height may have changed.\n    Streamlit.setFrameHeight()\n  }\n}\n\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(\n  WrappedComponent: React.ComponentType<ComponentProps>\n): React.ComponentType {\n  interface WrapperProps {}\n\n  interface WrapperState {\n    renderData?: RenderData\n    componentError?: Error\n  }\n\n  class ComponentWrapper extends React.PureComponent<\n    WrapperProps,\n    WrapperState\n  > {\n    public constructor(props: WrapperProps) {\n      super(props)\n      this.state = {\n        renderData: undefined,\n        componentError: undefined,\n      }\n    }\n\n    /**\n     * Error boundary function. This will be called if our wrapped\n     * component throws an error. We store the caught error in our state,\n     * and display it in the next render().\n     */\n    public static getDerivedStateFromError = (\n      error: Error\n    ): Partial<WrapperState> => {\n      return { componentError: error }\n    }\n\n    public componentDidMount = (): void => {\n      // Set up event listeners, and signal to Streamlit that we're ready.\n      // We won't render the component until we receive the first RENDER_EVENT.\n      Streamlit.events.addEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n      Streamlit.setComponentReady()\n    }\n\n    public componentDidUpdate = (): void => {\n      // If our child threw an error, we display it in render(). In this\n      // case, the child won't be mounted and therefore won't call\n      // `setFrameHeight` on its own. We do it here so that the rendered\n      // error will be visible.\n      if (this.state.componentError != null) {\n        Streamlit.setFrameHeight()\n      }\n    }\n\n    public componentWillUnmount = (): void => {\n      Streamlit.events.removeEventListener(\n        Streamlit.RENDER_EVENT,\n        this.onRenderEvent\n      )\n    }\n\n    /**\n     * Streamlit is telling this component to redraw.\n     * We save the render data in State, so that it can be passed to the\n     * component in our own render() function.\n     */\n    private onRenderEvent = (event: Event): void => {\n      // Update our state with the newest render data\n      const renderEvent = event as CustomEvent<RenderData>\n      this.setState({ renderData: renderEvent.detail })\n    }\n\n    public render = (): ReactNode => {\n      // If our wrapped component threw an error, display it.\n      if (this.state.componentError != null) {\n        return (\n          <div>\n            <h1>Component Error</h1>\n            <span>{this.state.componentError.message}</span>\n          </div>\n        )\n      }\n\n      // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n      if (this.state.renderData == null) {\n        return null\n      }\n\n      return (\n        <WrappedComponent\n          width={window.innerWidth}\n          disabled={this.state.renderData.disabled}\n          args={this.state.renderData.args}\n        />\n      )\n    }\n  }\n\n  return hoistNonReactStatics(ComponentWrapper, WrappedComponent)\n}\n","import React, { useRef, useEffect } from \"react\"\nimport * as d3 from \"d3\"\n\nimport { Streamlit } from \"../streamlit\"\n\nexport default ({ timeline }) => {\n  const ref = useRef()\n\n  // Split appearances in segments of consecutive values.\n  const getAppearanceSegments = (appearance) => {\n    const segments = []\n    var currSegment = { start: 0 }\n    let prev, prevIdx\n\n    appearance.forEach((curr, idx) => {\n      if ((prev !== undefined) & (curr !== prev)) {\n        currSegment[\"end\"] = prevIdx\n        currSegment[\"present\"] = prev\n        // Close current group.\n        segments.push(currSegment)\n        // Create a new one.\n        currSegment = { start: idx }\n      }\n      prevIdx = idx\n      prev = curr\n    })\n\n    // Close last open group.\n    const lastIdx = appearance.length - 1\n    currSegment = {\n      ...currSegment,\n      end: lastIdx,\n      present: appearance[lastIdx],\n    }\n    segments.push(currSegment)\n    return segments\n  }\n\n  const drawTimeline = (ref, timeline) => {\n    if (timeline === null) {\n      return\n    }\n\n    const lineHeight = 85\n    const width = 600\n    const height = lineHeight * Object.keys(timeline.appearance).length\n    const videoLength = timeline.end_time - timeline.start_time\n\n    const svg = d3.select(ref.current)\n    svg.attr(\"width\", width).attr(\"height\", height)\n\n    const framesCount = timeline.appearance[timeline.track_ids[0]].length\n    const thumbnails = timeline.thumbnails\n\n    let yPos = 8\n    const yMargin = 12\n    const xOrigin = ref.current.getBoundingClientRect().x\n    const xStep = width / framesCount\n    const thumbnailStep = xStep * timeline.thumbnail_rate\n    const faceSize = 45\n\n    timeline.track_ids.forEach((trackId, trackIx) => {\n      // Display face.\n      const faceImage = svg.append(\"defs\")\n      faceImage\n        .append(\"clipPath\")\n        .attr(\"id\", `face-${trackIx}`)\n        .append(\"circle\")\n        .attr(\"cx\", faceSize / 2)\n        .attr(\"cy\", faceSize / 2 + yPos + yMargin)\n        .attr(\"r\", faceSize / 2)\n      svg\n        .append(\"g\")\n        .append(\"image\")\n        .attr(\"x\", 0)\n        .attr(\"y\", yPos + yMargin)\n        .attr(\"width\", faceSize)\n        .attr(\"height\", faceSize)\n        .attr(\n          \"xlink:href\",\n          `data:image/png;base64,${timeline.track_faces[trackId]}`\n        )\n        .attr(\"clip-path\", `url(#face-${trackIx})`)\n        .attr(\"transform\", \"translate(posx, posy)\")\n\n      const tooltip = d3\n        .select(\"body\")\n        .append(\"div\")\n        .attr(\"id\", `tooltip-${trackId}`)\n        .attr(\"class\", \"tooltip\")\n        .style(\"opacity\", 0)\n\n      // Draw timeline.\n      const segments = getAppearanceSegments(timeline.appearance[trackId])\n      segments.forEach((s, segmentIx) => {\n        const color = s.present ? \"#2a9d8f\" : \"#f4a261\"\n        const colorHover = s.present ? \"#264653\" : \"#e76f51\"\n\n        const segmentId = `d3-segment-${trackIx}-${segmentIx}`\n\n        svg\n          .append(\"rect\")\n          .attr(\"id\", segmentId)\n          .attr(\"x\", s.start * xStep)\n          .attr(\"y\", yPos)\n          .attr(\"width\", s.end * xStep - s.start * xStep)\n          .attr(\"height\", 8)\n          .style(\"fill\", color)\n          .style(\"cursor\", \"pointer\")\n          .style(\"stroke-width\", 1)\n          .on(\"mouseover\", () => {\n            const rectRef = d3.select(segmentId)\n            rectRef.style(\"fill\", colorHover)\n\n            const xEvent = Math.abs(d3.event.pageX - xOrigin)\n\n            if (thumbnails) {\n              tooltip.transition().duration(200).style(\"opacity\", 1)\n              const thumbnailIx = Math.min(\n                Math.floor(xEvent / thumbnailStep),\n                thumbnails.length - 1\n              )\n\n              // Whether the tooltip should pop up to the top or bottom of the line\n              const tooltipYOffset = trackIx > 1 ? -136 : 0\n\n              tooltip\n                .html(\n                  `<img width=\"120\" height=\"120\" src=\"data:image/png;base64, ${thumbnails[thumbnailIx]}\" />`\n                )\n                .style(\"left\", `${d3.event.pageX - 64}px`)\n                .style(\"top\", `${d3.event.pageY + tooltipYOffset}px`)\n            }\n          })\n          .on(\"mouseout\", () => {\n            const rectRef = d3.select(`#d3-segment-${segmentIx}`)\n            rectRef.style(\"fill\", color)\n\n            if (thumbnails) {\n              tooltip.transition().duration(500).style(\"opacity\", 0)\n            }\n          })\n          .on(\"click\", () => {\n            const xEvent = Math.abs(d3.event.pageX - xOrigin)\n            const widthRate = xEvent / width\n            const seekTimeSecond = videoLength * widthRate\n\n            //\n            // If the user clicks on the timeline, we set the component value to the\n            // time in seconds where the user clicked\n            //\n            Streamlit.setComponentValue(seekTimeSecond)\n          })\n      })\n\n      yPos += lineHeight\n    })\n  }\n\n  useEffect(() => {\n    drawTimeline(ref, timeline)\n  }, [timeline])\n\n  return <svg ref={ref} />\n}\n","import React, { ReactNode } from \"react\"\n\nimport {\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from \"./streamlit\"\n\nimport Timeline from \"./components/timeline\"\n\ninterface State {\n  time: number\n  youtube: any\n}\n\nclass App extends StreamlitComponentBase<State> {\n  public componentDidMount = () => {\n    const totalTracks = this.props.args[\"timeline\"].track_ids.length\n    Streamlit.setFrameHeight(totalTracks * 85 + 124)\n  }\n\n  public render = (): ReactNode => {\n    const timeline = this.props.args[\"timeline\"]\n\n    return (\n      <div className=\"app\">\n        <main style={{ margin: \"20px\" }}>\n          <>\n            <section style={{ margin: \"20px\" }}>\n              <Timeline timeline={timeline} />\n            </section>\n          </>\n        </main>\n        <footer>\n          Made with{\" \"}\n          <b>\n            <a href=\"https://github.com/pento-group/terran\" target=\"_blank\">\n              <img\n                alt=\"Terran logo\"\n                src=\"terran-square.svg\"\n                height=\"64\"\n                width=\"64\"\n              />\n            </a>\n          </b>{\" \"}\n          by{\" \"}\n          <b>\n            <a href=\"https://pento.ai\" target=\"_blank\">\n              Pento\n            </a>\n          </b>\n        </footer>\n      </div>\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(App)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport App from \"./App\"\nimport \"./index.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}