#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tacp.api_client import ApiClient


class EditApplicationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_application_disk_using_post(self, body, uuid, **kwargs):  # noqa: E501
        """Add a disk to an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_disk_using_post(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDiskSizeAndLimitPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_application_disk_using_post_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_application_disk_using_post_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def create_application_disk_using_post_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Add a disk to an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_disk_using_post_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDiskSizeAndLimitPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_application_disk_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_application_disk_using_post`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `create_application_disk_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/disks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_application_vnic_using_post(self, body, uuid, **kwargs):  # noqa: E501
        """Add a vNIC to an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_vnic_using_post(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateOrEditApplicationNetworkOptionsPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_application_vnic_using_post_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_application_vnic_using_post_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def create_application_vnic_using_post_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Add a vNIC to an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_application_vnic_using_post_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateOrEditApplicationNetworkOptionsPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_application_vnic_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_application_vnic_using_post`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `create_application_vnic_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/vnics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_application_disk_using_delete(self, disk_uuid, uuid, **kwargs):  # noqa: E501
        """Delete a disk from an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_disk_using_delete(disk_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str disk_uuid: disk_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_disk_using_delete_with_http_info(disk_uuid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_disk_using_delete_with_http_info(disk_uuid, uuid, **kwargs)  # noqa: E501
            return data

    def delete_application_disk_using_delete_with_http_info(self, disk_uuid, uuid, **kwargs):  # noqa: E501
        """Delete a disk from an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_disk_using_delete_with_http_info(disk_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str disk_uuid: disk_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['disk_uuid', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_disk_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'disk_uuid' is set
        if ('disk_uuid' not in params or
                params['disk_uuid'] is None):
            raise ValueError("Missing the required parameter `disk_uuid` when calling `delete_application_disk_using_delete`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `delete_application_disk_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'disk_uuid' in params:
            path_params['disk_uuid'] = params['disk_uuid']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/disks/{disk_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_application_vnic_using_delete(self, uuid, vnic_uuid, **kwargs):  # noqa: E501
        """Delete a vNIC from an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_vnic_using_delete(uuid, vnic_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: uuid (required)
        :param str vnic_uuid: vnic_uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_application_vnic_using_delete_with_http_info(uuid, vnic_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_vnic_using_delete_with_http_info(uuid, vnic_uuid, **kwargs)  # noqa: E501
            return data

    def delete_application_vnic_using_delete_with_http_info(self, uuid, vnic_uuid, **kwargs):  # noqa: E501
        """Delete a vNIC from an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_vnic_using_delete_with_http_info(uuid, vnic_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: uuid (required)
        :param str vnic_uuid: vnic_uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'vnic_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_vnic_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `delete_application_vnic_using_delete`")  # noqa: E501
        # verify the required parameter 'vnic_uuid' is set
        if ('vnic_uuid' not in params or
                params['vnic_uuid'] is None):
            raise ValueError("Missing the required parameter `vnic_uuid` when calling `delete_application_vnic_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'vnic_uuid' in params:
            path_params['vnic_uuid'] = params['vnic_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/vnics/{vnic_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_boot_order_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Update the boot order for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_boot_order_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_boot_order_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_boot_order_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_boot_order_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Update the boot order for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_boot_order_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_boot_order_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_boot_order_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_boot_order_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/boot-order', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_compute_category_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Update the category for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_compute_category_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_compute_category_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_compute_category_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_compute_category_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Update the category for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_compute_category_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_compute_category_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_compute_category_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_compute_category_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/compute-category', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_compute_tags_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Update compute tags for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_compute_tags_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_compute_tags_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_compute_tags_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_compute_tags_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Update compute tags for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_compute_tags_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_compute_tags_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_compute_tags_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_compute_tags_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/compute-tags', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_datacenter_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Update datacenter for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_datacenter_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_datacenter_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_datacenter_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_datacenter_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Update datacenter for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_datacenter_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_datacenter_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_datacenter_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_datacenter_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/datacenter', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_description_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Update description for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_description_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_description_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_description_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_description_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Update description for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_description_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_description_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_description_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_description_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/description', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_disk_bandwidth_limit_using_put(self, body, disk_uuid, uuid, **kwargs):  # noqa: E501
        """Update disk bandwidth limit for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_disk_bandwidth_limit_using_put(body, disk_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDiskBandwidthPayload body: payload (required)
        :param str disk_uuid: disk_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_disk_bandwidth_limit_using_put_with_http_info(body, disk_uuid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_disk_bandwidth_limit_using_put_with_http_info(body, disk_uuid, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_disk_bandwidth_limit_using_put_with_http_info(self, body, disk_uuid, uuid, **kwargs):  # noqa: E501
        """Update disk bandwidth limit for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_disk_bandwidth_limit_using_put_with_http_info(body, disk_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDiskBandwidthPayload body: payload (required)
        :param str disk_uuid: disk_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'disk_uuid', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_disk_bandwidth_limit_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_disk_bandwidth_limit_using_put`")  # noqa: E501
        # verify the required parameter 'disk_uuid' is set
        if ('disk_uuid' not in params or
                params['disk_uuid'] is None):
            raise ValueError("Missing the required parameter `disk_uuid` when calling `edit_application_disk_bandwidth_limit_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_disk_bandwidth_limit_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'disk_uuid' in params:
            path_params['disk_uuid'] = params['disk_uuid']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/disks/{disk_uuid}/bandwidth-limit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_disk_iops_limit_using_put(self, body, disk_uuid, uuid, **kwargs):  # noqa: E501
        """Update disk iops limit for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_disk_iops_limit_using_put(body, disk_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDiskIopsPayload body: payload (required)
        :param str disk_uuid: disk_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_disk_iops_limit_using_put_with_http_info(body, disk_uuid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_disk_iops_limit_using_put_with_http_info(body, disk_uuid, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_disk_iops_limit_using_put_with_http_info(self, body, disk_uuid, uuid, **kwargs):  # noqa: E501
        """Update disk iops limit for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_disk_iops_limit_using_put_with_http_info(body, disk_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDiskIopsPayload body: payload (required)
        :param str disk_uuid: disk_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'disk_uuid', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_disk_iops_limit_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_disk_iops_limit_using_put`")  # noqa: E501
        # verify the required parameter 'disk_uuid' is set
        if ('disk_uuid' not in params or
                params['disk_uuid'] is None):
            raise ValueError("Missing the required parameter `disk_uuid` when calling `edit_application_disk_iops_limit_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_disk_iops_limit_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'disk_uuid' in params:
            path_params['disk_uuid'] = params['disk_uuid']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/disks/{disk_uuid}/iops-limit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_disk_name_using_put(self, body, disk_uuid, uuid, **kwargs):  # noqa: E501
        """Update disk name for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_disk_name_using_put(body, disk_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDiskSizePayload body: payload (required)
        :param str disk_uuid: disk_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_disk_name_using_put_with_http_info(body, disk_uuid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_disk_name_using_put_with_http_info(body, disk_uuid, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_disk_name_using_put_with_http_info(self, body, disk_uuid, uuid, **kwargs):  # noqa: E501
        """Update disk name for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_disk_name_using_put_with_http_info(body, disk_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDiskSizePayload body: payload (required)
        :param str disk_uuid: disk_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'disk_uuid', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_disk_name_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_disk_name_using_put`")  # noqa: E501
        # verify the required parameter 'disk_uuid' is set
        if ('disk_uuid' not in params or
                params['disk_uuid'] is None):
            raise ValueError("Missing the required parameter `disk_uuid` when calling `edit_application_disk_name_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_disk_name_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'disk_uuid' in params:
            path_params['disk_uuid'] = params['disk_uuid']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/disks/{disk_uuid}/name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_disk_size_using_put(self, body, disk_uuid, uuid, **kwargs):  # noqa: E501
        """Resize an application disk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_disk_size_using_put(body, disk_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDiskSizePayload body: payload (required)
        :param str disk_uuid: disk_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_disk_size_using_put_with_http_info(body, disk_uuid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_disk_size_using_put_with_http_info(body, disk_uuid, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_disk_size_using_put_with_http_info(self, body, disk_uuid, uuid, **kwargs):  # noqa: E501
        """Resize an application disk  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_disk_size_using_put_with_http_info(body, disk_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiDiskSizePayload body: payload (required)
        :param str disk_uuid: disk_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'disk_uuid', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_disk_size_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_disk_size_using_put`")  # noqa: E501
        # verify the required parameter 'disk_uuid' is set
        if ('disk_uuid' not in params or
                params['disk_uuid'] is None):
            raise ValueError("Missing the required parameter `disk_uuid` when calling `edit_application_disk_size_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_disk_size_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'disk_uuid' in params:
            path_params['disk_uuid'] = params['disk_uuid']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/disks/{disk_uuid}/size', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_memory_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Update memory for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_memory_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_memory_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_memory_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_memory_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Update memory for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_memory_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_memory_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_memory_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_memory_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/memory', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_migration_zone_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Update migration zone for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_migration_zone_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_migration_zone_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_migration_zone_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_migration_zone_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Update migration zone for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_migration_zone_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_migration_zone_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_migration_zone_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_migration_zone_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/migration-zone', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_name_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Update name for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_name_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_name_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_name_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_name_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Update name for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_name_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_name_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_name_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_name_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_vcpus_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Update virtual CPUs for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_vcpus_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_vcpus_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_vcpus_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_vcpus_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Update virtual CPUs for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_vcpus_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_vcpus_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_vcpus_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_vcpus_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/vcpus', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_vnic_firewall_using_put(self, body, uuid, vnic_uuid, **kwargs):  # noqa: E501
        """Update vNIC firewall override for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_vnic_firewall_using_put(body, uuid, vnic_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateOrEditApplicationNetworkOptionsPayload body: payload (required)
        :param str uuid: uuid (required)
        :param str vnic_uuid: vnic_uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_vnic_firewall_using_put_with_http_info(body, uuid, vnic_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_vnic_firewall_using_put_with_http_info(body, uuid, vnic_uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_vnic_firewall_using_put_with_http_info(self, body, uuid, vnic_uuid, **kwargs):  # noqa: E501
        """Update vNIC firewall override for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_vnic_firewall_using_put_with_http_info(body, uuid, vnic_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateOrEditApplicationNetworkOptionsPayload body: payload (required)
        :param str uuid: uuid (required)
        :param str vnic_uuid: vnic_uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid', 'vnic_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_vnic_firewall_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_vnic_firewall_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_vnic_firewall_using_put`")  # noqa: E501
        # verify the required parameter 'vnic_uuid' is set
        if ('vnic_uuid' not in params or
                params['vnic_uuid'] is None):
            raise ValueError("Missing the required parameter `vnic_uuid` when calling `edit_application_vnic_firewall_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'vnic_uuid' in params:
            path_params['vnic_uuid'] = params['vnic_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/vnics/{vnic_uuid}/firewall', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_vnic_mac_address_using_put(self, body, uuid, vnic_uuid, **kwargs):  # noqa: E501
        """Update vNIC MAC address for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_vnic_mac_address_using_put(body, uuid, vnic_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateOrEditApplicationNetworkOptionsPayload body: payload (required)
        :param str uuid: uuid (required)
        :param str vnic_uuid: vnic_uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_vnic_mac_address_using_put_with_http_info(body, uuid, vnic_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_vnic_mac_address_using_put_with_http_info(body, uuid, vnic_uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_vnic_mac_address_using_put_with_http_info(self, body, uuid, vnic_uuid, **kwargs):  # noqa: E501
        """Update vNIC MAC address for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_vnic_mac_address_using_put_with_http_info(body, uuid, vnic_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateOrEditApplicationNetworkOptionsPayload body: payload (required)
        :param str uuid: uuid (required)
        :param str vnic_uuid: vnic_uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid', 'vnic_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_vnic_mac_address_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_vnic_mac_address_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_vnic_mac_address_using_put`")  # noqa: E501
        # verify the required parameter 'vnic_uuid' is set
        if ('vnic_uuid' not in params or
                params['vnic_uuid'] is None):
            raise ValueError("Missing the required parameter `vnic_uuid` when calling `edit_application_vnic_mac_address_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'vnic_uuid' in params:
            path_params['vnic_uuid'] = params['vnic_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/vnics/{vnic_uuid}/mac-address', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_vnic_name_using_put(self, body, uuid, vnic_uuid, **kwargs):  # noqa: E501
        """Update vNIC name for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_vnic_name_using_put(body, uuid, vnic_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateOrEditApplicationNetworkOptionsPayload body: payload (required)
        :param str uuid: uuid (required)
        :param str vnic_uuid: vnic_uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_vnic_name_using_put_with_http_info(body, uuid, vnic_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_vnic_name_using_put_with_http_info(body, uuid, vnic_uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_vnic_name_using_put_with_http_info(self, body, uuid, vnic_uuid, **kwargs):  # noqa: E501
        """Update vNIC name for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_vnic_name_using_put_with_http_info(body, uuid, vnic_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateOrEditApplicationNetworkOptionsPayload body: payload (required)
        :param str uuid: uuid (required)
        :param str vnic_uuid: vnic_uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid', 'vnic_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_vnic_name_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_vnic_name_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_vnic_name_using_put`")  # noqa: E501
        # verify the required parameter 'vnic_uuid' is set
        if ('vnic_uuid' not in params or
                params['vnic_uuid'] is None):
            raise ValueError("Missing the required parameter `vnic_uuid` when calling `edit_application_vnic_name_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'vnic_uuid' in params:
            path_params['vnic_uuid'] = params['vnic_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/vnics/{vnic_uuid}/name', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_application_vnic_type_using_put(self, body, uuid, vnic_uuid, **kwargs):  # noqa: E501
        """Update vNIC networking mode for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_vnic_type_using_put(body, uuid, vnic_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateOrEditApplicationNetworkOptionsPayload body: payload (required)
        :param str uuid: uuid (required)
        :param str vnic_uuid: vnic_uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_application_vnic_type_using_put_with_http_info(body, uuid, vnic_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_application_vnic_type_using_put_with_http_info(body, uuid, vnic_uuid, **kwargs)  # noqa: E501
            return data

    def edit_application_vnic_type_using_put_with_http_info(self, body, uuid, vnic_uuid, **kwargs):  # noqa: E501
        """Update vNIC networking mode for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_application_vnic_type_using_put_with_http_info(body, uuid, vnic_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateOrEditApplicationNetworkOptionsPayload body: payload (required)
        :param str uuid: uuid (required)
        :param str vnic_uuid: vnic_uuid (required)
        :return: ApiSlamActionRequestWithMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid', 'vnic_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_application_vnic_type_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_application_vnic_type_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `edit_application_vnic_type_using_put`")  # noqa: E501
        # verify the required parameter 'vnic_uuid' is set
        if ('vnic_uuid' not in params or
                params['vnic_uuid'] is None):
            raise ValueError("Missing the required parameter `vnic_uuid` when calling `edit_application_vnic_type_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501
        if 'vnic_uuid' in params:
            path_params['vnic_uuid'] = params['vnic_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/vnics/{vnic_uuid}/type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiSlamActionRequestWithMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def toggle_application_automatic_recovery_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Toggle automatic recovery for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_application_automatic_recovery_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.toggle_application_automatic_recovery_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.toggle_application_automatic_recovery_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def toggle_application_automatic_recovery_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Toggle automatic recovery for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_application_automatic_recovery_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_application_automatic_recovery_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `toggle_application_automatic_recovery_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `toggle_application_automatic_recovery_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/automatic-recovery', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def toggle_application_hardware_assisted_virtualization_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Toggle nested virtualization for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_application_hardware_assisted_virtualization_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.toggle_application_hardware_assisted_virtualization_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.toggle_application_hardware_assisted_virtualization_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def toggle_application_hardware_assisted_virtualization_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Toggle nested virtualization for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_application_hardware_assisted_virtualization_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_application_hardware_assisted_virtualization_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `toggle_application_hardware_assisted_virtualization_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `toggle_application_hardware_assisted_virtualization_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/hardware-assisted-virtualization', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def toggle_application_vm_mode_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Update virtual machine mode for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_application_vm_mode_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.toggle_application_vm_mode_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.toggle_application_vm_mode_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def toggle_application_vm_mode_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Update virtual machine mode for an application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_application_vm_mode_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiEditApplicationPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_application_vm_mode_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `toggle_application_vm_mode_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `toggle_application_vm_mode_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/applications/{uuid}/vm-mode', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
