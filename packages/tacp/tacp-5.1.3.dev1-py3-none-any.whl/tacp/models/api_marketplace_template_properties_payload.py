#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiMarketplaceTemplatePropertiesPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'created_on': 'datetime',
        'default_cpus': 'int',
        'default_memory_bytes': 'int',
        'description': 'str',
        'name': 'str',
        'os_version': 'str',
        'template_capacity_bytes': 'int',
        'uuid': 'str',
        'version': 'str',
        'vm_mode': 'str'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'default_cpus': 'defaultCpus',
        'default_memory_bytes': 'defaultMemoryBytes',
        'description': 'description',
        'name': 'name',
        'os_version': 'osVersion',
        'template_capacity_bytes': 'templateCapacityBytes',
        'uuid': 'uuid',
        'version': 'version',
        'vm_mode': 'vmMode'
    }

    def __init__(self, created_by=None, created_on=None, default_cpus=None, default_memory_bytes=None, description=None, name=None, os_version=None, template_capacity_bytes=None, uuid=None, version=None, vm_mode=None):  # noqa: E501
        """ApiMarketplaceTemplatePropertiesPayload - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._created_on = None
        self._default_cpus = None
        self._default_memory_bytes = None
        self._description = None
        self._name = None
        self._os_version = None
        self._template_capacity_bytes = None
        self._uuid = None
        self._version = None
        self._vm_mode = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if default_cpus is not None:
            self.default_cpus = default_cpus
        if default_memory_bytes is not None:
            self.default_memory_bytes = default_memory_bytes
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if os_version is not None:
            self.os_version = os_version
        if template_capacity_bytes is not None:
            self.template_capacity_bytes = template_capacity_bytes
        if uuid is not None:
            self.uuid = uuid
        if version is not None:
            self.version = version
        if vm_mode is not None:
            self.vm_mode = vm_mode

    @property
    def created_by(self):
        """Gets the created_by of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501


        :return: The created_by of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ApiMarketplaceTemplatePropertiesPayload.


        :param created_by: The created_by of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501


        :return: The created_on of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this ApiMarketplaceTemplatePropertiesPayload.


        :param created_on: The created_on of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def default_cpus(self):
        """Gets the default_cpus of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501


        :return: The default_cpus of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._default_cpus

    @default_cpus.setter
    def default_cpus(self, default_cpus):
        """Sets the default_cpus of this ApiMarketplaceTemplatePropertiesPayload.


        :param default_cpus: The default_cpus of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._default_cpus = default_cpus

    @property
    def default_memory_bytes(self):
        """Gets the default_memory_bytes of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501


        :return: The default_memory_bytes of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._default_memory_bytes

    @default_memory_bytes.setter
    def default_memory_bytes(self, default_memory_bytes):
        """Sets the default_memory_bytes of this ApiMarketplaceTemplatePropertiesPayload.


        :param default_memory_bytes: The default_memory_bytes of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._default_memory_bytes = default_memory_bytes

    @property
    def description(self):
        """Gets the description of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501


        :return: The description of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiMarketplaceTemplatePropertiesPayload.


        :param description: The description of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501


        :return: The name of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiMarketplaceTemplatePropertiesPayload.


        :param name: The name of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def os_version(self):
        """Gets the os_version of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501


        :return: The os_version of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this ApiMarketplaceTemplatePropertiesPayload.


        :param os_version: The os_version of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def template_capacity_bytes(self):
        """Gets the template_capacity_bytes of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501


        :return: The template_capacity_bytes of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._template_capacity_bytes

    @template_capacity_bytes.setter
    def template_capacity_bytes(self, template_capacity_bytes):
        """Sets the template_capacity_bytes of this ApiMarketplaceTemplatePropertiesPayload.


        :param template_capacity_bytes: The template_capacity_bytes of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._template_capacity_bytes = template_capacity_bytes

    @property
    def uuid(self):
        """Gets the uuid of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501


        :return: The uuid of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApiMarketplaceTemplatePropertiesPayload.


        :param uuid: The uuid of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def version(self):
        """Gets the version of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501


        :return: The version of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ApiMarketplaceTemplatePropertiesPayload.


        :param version: The version of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def vm_mode(self):
        """Gets the vm_mode of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501


        :return: The vm_mode of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._vm_mode

    @vm_mode.setter
    def vm_mode(self, vm_mode):
        """Sets the vm_mode of this ApiMarketplaceTemplatePropertiesPayload.


        :param vm_mode: The vm_mode of this ApiMarketplaceTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._vm_mode = vm_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiMarketplaceTemplatePropertiesPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiMarketplaceTemplatePropertiesPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
