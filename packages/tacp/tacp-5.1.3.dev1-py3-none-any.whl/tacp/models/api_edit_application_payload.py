#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiEditApplicationPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_tags': 'list[ApiUuidPayload]',
        'automatic_recovery': 'bool',
        'boot_order': 'list[ApiBootOrderPayload]',
        'category_uuid': 'str',
        'datacenter_uuid': 'str',
        'description': 'str',
        'hardware_assisted_virtualization': 'bool',
        'memory': 'int',
        'migration_zone_uuid': 'str',
        'name': 'str',
        'remove_tags': 'list[ApiUuidPayload]',
        'vcpus': 'int',
        'vm_mode': 'str'
    }

    attribute_map = {
        'add_tags': 'addTags',
        'automatic_recovery': 'automaticRecovery',
        'boot_order': 'bootOrder',
        'category_uuid': 'categoryUuid',
        'datacenter_uuid': 'datacenterUuid',
        'description': 'description',
        'hardware_assisted_virtualization': 'hardwareAssistedVirtualization',
        'memory': 'memory',
        'migration_zone_uuid': 'migrationZoneUuid',
        'name': 'name',
        'remove_tags': 'removeTags',
        'vcpus': 'vcpus',
        'vm_mode': 'vmMode'
    }

    def __init__(self, add_tags=None, automatic_recovery=None, boot_order=None, category_uuid=None, datacenter_uuid=None, description=None, hardware_assisted_virtualization=None, memory=None, migration_zone_uuid=None, name=None, remove_tags=None, vcpus=None, vm_mode=None):  # noqa: E501
        """ApiEditApplicationPayload - a model defined in Swagger"""  # noqa: E501
        self._add_tags = None
        self._automatic_recovery = None
        self._boot_order = None
        self._category_uuid = None
        self._datacenter_uuid = None
        self._description = None
        self._hardware_assisted_virtualization = None
        self._memory = None
        self._migration_zone_uuid = None
        self._name = None
        self._remove_tags = None
        self._vcpus = None
        self._vm_mode = None
        self.discriminator = None
        if add_tags is not None:
            self.add_tags = add_tags
        if automatic_recovery is not None:
            self.automatic_recovery = automatic_recovery
        if boot_order is not None:
            self.boot_order = boot_order
        if category_uuid is not None:
            self.category_uuid = category_uuid
        if datacenter_uuid is not None:
            self.datacenter_uuid = datacenter_uuid
        if description is not None:
            self.description = description
        if hardware_assisted_virtualization is not None:
            self.hardware_assisted_virtualization = hardware_assisted_virtualization
        if memory is not None:
            self.memory = memory
        if migration_zone_uuid is not None:
            self.migration_zone_uuid = migration_zone_uuid
        if name is not None:
            self.name = name
        if remove_tags is not None:
            self.remove_tags = remove_tags
        if vcpus is not None:
            self.vcpus = vcpus
        if vm_mode is not None:
            self.vm_mode = vm_mode

    @property
    def add_tags(self):
        """Gets the add_tags of this ApiEditApplicationPayload.  # noqa: E501


        :return: The add_tags of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: list[ApiUuidPayload]
        """
        return self._add_tags

    @add_tags.setter
    def add_tags(self, add_tags):
        """Sets the add_tags of this ApiEditApplicationPayload.


        :param add_tags: The add_tags of this ApiEditApplicationPayload.  # noqa: E501
        :type: list[ApiUuidPayload]
        """

        self._add_tags = add_tags

    @property
    def automatic_recovery(self):
        """Gets the automatic_recovery of this ApiEditApplicationPayload.  # noqa: E501


        :return: The automatic_recovery of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_recovery

    @automatic_recovery.setter
    def automatic_recovery(self, automatic_recovery):
        """Sets the automatic_recovery of this ApiEditApplicationPayload.


        :param automatic_recovery: The automatic_recovery of this ApiEditApplicationPayload.  # noqa: E501
        :type: bool
        """

        self._automatic_recovery = automatic_recovery

    @property
    def boot_order(self):
        """Gets the boot_order of this ApiEditApplicationPayload.  # noqa: E501


        :return: The boot_order of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: list[ApiBootOrderPayload]
        """
        return self._boot_order

    @boot_order.setter
    def boot_order(self, boot_order):
        """Sets the boot_order of this ApiEditApplicationPayload.


        :param boot_order: The boot_order of this ApiEditApplicationPayload.  # noqa: E501
        :type: list[ApiBootOrderPayload]
        """

        self._boot_order = boot_order

    @property
    def category_uuid(self):
        """Gets the category_uuid of this ApiEditApplicationPayload.  # noqa: E501


        :return: The category_uuid of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._category_uuid

    @category_uuid.setter
    def category_uuid(self, category_uuid):
        """Sets the category_uuid of this ApiEditApplicationPayload.


        :param category_uuid: The category_uuid of this ApiEditApplicationPayload.  # noqa: E501
        :type: str
        """

        self._category_uuid = category_uuid

    @property
    def datacenter_uuid(self):
        """Gets the datacenter_uuid of this ApiEditApplicationPayload.  # noqa: E501


        :return: The datacenter_uuid of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._datacenter_uuid

    @datacenter_uuid.setter
    def datacenter_uuid(self, datacenter_uuid):
        """Sets the datacenter_uuid of this ApiEditApplicationPayload.


        :param datacenter_uuid: The datacenter_uuid of this ApiEditApplicationPayload.  # noqa: E501
        :type: str
        """

        self._datacenter_uuid = datacenter_uuid

    @property
    def description(self):
        """Gets the description of this ApiEditApplicationPayload.  # noqa: E501


        :return: The description of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiEditApplicationPayload.


        :param description: The description of this ApiEditApplicationPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def hardware_assisted_virtualization(self):
        """Gets the hardware_assisted_virtualization of this ApiEditApplicationPayload.  # noqa: E501


        :return: The hardware_assisted_virtualization of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: bool
        """
        return self._hardware_assisted_virtualization

    @hardware_assisted_virtualization.setter
    def hardware_assisted_virtualization(self, hardware_assisted_virtualization):
        """Sets the hardware_assisted_virtualization of this ApiEditApplicationPayload.


        :param hardware_assisted_virtualization: The hardware_assisted_virtualization of this ApiEditApplicationPayload.  # noqa: E501
        :type: bool
        """

        self._hardware_assisted_virtualization = hardware_assisted_virtualization

    @property
    def memory(self):
        """Gets the memory of this ApiEditApplicationPayload.  # noqa: E501


        :return: The memory of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ApiEditApplicationPayload.


        :param memory: The memory of this ApiEditApplicationPayload.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def migration_zone_uuid(self):
        """Gets the migration_zone_uuid of this ApiEditApplicationPayload.  # noqa: E501


        :return: The migration_zone_uuid of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._migration_zone_uuid

    @migration_zone_uuid.setter
    def migration_zone_uuid(self, migration_zone_uuid):
        """Sets the migration_zone_uuid of this ApiEditApplicationPayload.


        :param migration_zone_uuid: The migration_zone_uuid of this ApiEditApplicationPayload.  # noqa: E501
        :type: str
        """

        self._migration_zone_uuid = migration_zone_uuid

    @property
    def name(self):
        """Gets the name of this ApiEditApplicationPayload.  # noqa: E501


        :return: The name of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiEditApplicationPayload.


        :param name: The name of this ApiEditApplicationPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def remove_tags(self):
        """Gets the remove_tags of this ApiEditApplicationPayload.  # noqa: E501


        :return: The remove_tags of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: list[ApiUuidPayload]
        """
        return self._remove_tags

    @remove_tags.setter
    def remove_tags(self, remove_tags):
        """Sets the remove_tags of this ApiEditApplicationPayload.


        :param remove_tags: The remove_tags of this ApiEditApplicationPayload.  # noqa: E501
        :type: list[ApiUuidPayload]
        """

        self._remove_tags = remove_tags

    @property
    def vcpus(self):
        """Gets the vcpus of this ApiEditApplicationPayload.  # noqa: E501


        :return: The vcpus of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this ApiEditApplicationPayload.


        :param vcpus: The vcpus of this ApiEditApplicationPayload.  # noqa: E501
        :type: int
        """

        self._vcpus = vcpus

    @property
    def vm_mode(self):
        """Gets the vm_mode of this ApiEditApplicationPayload.  # noqa: E501


        :return: The vm_mode of this ApiEditApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._vm_mode

    @vm_mode.setter
    def vm_mode(self, vm_mode):
        """Sets the vm_mode of this ApiEditApplicationPayload.


        :param vm_mode: The vm_mode of this ApiEditApplicationPayload.  # noqa: E501
        :type: str
        """

        self._vm_mode = vm_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiEditApplicationPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiEditApplicationPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
