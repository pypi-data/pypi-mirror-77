#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiNotificationPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'description': 'str',
        'metadata': 'dict(str, str)',
        'notification': 'str',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'category': 'category',
        'description': 'description',
        'metadata': 'metadata',
        'notification': 'notification',
        'timestamp': 'timestamp'
    }

    def __init__(self, category=None, description=None, metadata=None, notification=None, timestamp=None):  # noqa: E501
        """ApiNotificationPayload - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._description = None
        self._metadata = None
        self._notification = None
        self._timestamp = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if metadata is not None:
            self.metadata = metadata
        if notification is not None:
            self.notification = notification
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def category(self):
        """Gets the category of this ApiNotificationPayload.  # noqa: E501


        :return: The category of this ApiNotificationPayload.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ApiNotificationPayload.


        :param category: The category of this ApiNotificationPayload.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this ApiNotificationPayload.  # noqa: E501


        :return: The description of this ApiNotificationPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiNotificationPayload.


        :param description: The description of this ApiNotificationPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this ApiNotificationPayload.  # noqa: E501


        :return: The metadata of this ApiNotificationPayload.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ApiNotificationPayload.


        :param metadata: The metadata of this ApiNotificationPayload.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def notification(self):
        """Gets the notification of this ApiNotificationPayload.  # noqa: E501


        :return: The notification of this ApiNotificationPayload.  # noqa: E501
        :rtype: str
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this ApiNotificationPayload.


        :param notification: The notification of this ApiNotificationPayload.  # noqa: E501
        :type: str
        """

        self._notification = notification

    @property
    def timestamp(self):
        """Gets the timestamp of this ApiNotificationPayload.  # noqa: E501


        :return: The timestamp of this ApiNotificationPayload.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ApiNotificationPayload.


        :param timestamp: The timestamp of this ApiNotificationPayload.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiNotificationPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiNotificationPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
