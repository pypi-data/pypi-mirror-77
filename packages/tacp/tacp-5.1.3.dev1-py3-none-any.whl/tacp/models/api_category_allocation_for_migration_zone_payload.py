#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiCategoryAllocationForMigrationZonePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_uuid': 'str',
        'cpu_allocated': 'int',
        'cpu_total': 'int',
        'memory_allocated': 'int',
        'memory_total': 'int'
    }

    attribute_map = {
        'category_uuid': 'categoryUuid',
        'cpu_allocated': 'cpuAllocated',
        'cpu_total': 'cpuTotal',
        'memory_allocated': 'memoryAllocated',
        'memory_total': 'memoryTotal'
    }

    def __init__(self, category_uuid=None, cpu_allocated=None, cpu_total=None, memory_allocated=None, memory_total=None):  # noqa: E501
        """ApiCategoryAllocationForMigrationZonePayload - a model defined in Swagger"""  # noqa: E501
        self._category_uuid = None
        self._cpu_allocated = None
        self._cpu_total = None
        self._memory_allocated = None
        self._memory_total = None
        self.discriminator = None
        if category_uuid is not None:
            self.category_uuid = category_uuid
        if cpu_allocated is not None:
            self.cpu_allocated = cpu_allocated
        if cpu_total is not None:
            self.cpu_total = cpu_total
        if memory_allocated is not None:
            self.memory_allocated = memory_allocated
        if memory_total is not None:
            self.memory_total = memory_total

    @property
    def category_uuid(self):
        """Gets the category_uuid of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501


        :return: The category_uuid of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501
        :rtype: str
        """
        return self._category_uuid

    @category_uuid.setter
    def category_uuid(self, category_uuid):
        """Sets the category_uuid of this ApiCategoryAllocationForMigrationZonePayload.


        :param category_uuid: The category_uuid of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501
        :type: str
        """

        self._category_uuid = category_uuid

    @property
    def cpu_allocated(self):
        """Gets the cpu_allocated of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501


        :return: The cpu_allocated of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501
        :rtype: int
        """
        return self._cpu_allocated

    @cpu_allocated.setter
    def cpu_allocated(self, cpu_allocated):
        """Sets the cpu_allocated of this ApiCategoryAllocationForMigrationZonePayload.


        :param cpu_allocated: The cpu_allocated of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501
        :type: int
        """

        self._cpu_allocated = cpu_allocated

    @property
    def cpu_total(self):
        """Gets the cpu_total of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501


        :return: The cpu_total of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501
        :rtype: int
        """
        return self._cpu_total

    @cpu_total.setter
    def cpu_total(self, cpu_total):
        """Sets the cpu_total of this ApiCategoryAllocationForMigrationZonePayload.


        :param cpu_total: The cpu_total of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501
        :type: int
        """

        self._cpu_total = cpu_total

    @property
    def memory_allocated(self):
        """Gets the memory_allocated of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501


        :return: The memory_allocated of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501
        :rtype: int
        """
        return self._memory_allocated

    @memory_allocated.setter
    def memory_allocated(self, memory_allocated):
        """Sets the memory_allocated of this ApiCategoryAllocationForMigrationZonePayload.


        :param memory_allocated: The memory_allocated of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501
        :type: int
        """

        self._memory_allocated = memory_allocated

    @property
    def memory_total(self):
        """Gets the memory_total of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501


        :return: The memory_total of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501
        :rtype: int
        """
        return self._memory_total

    @memory_total.setter
    def memory_total(self, memory_total):
        """Sets the memory_total of this ApiCategoryAllocationForMigrationZonePayload.


        :param memory_total: The memory_total of this ApiCategoryAllocationForMigrationZonePayload.  # noqa: E501
        :type: int
        """

        self._memory_total = memory_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiCategoryAllocationForMigrationZonePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiCategoryAllocationForMigrationZonePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
