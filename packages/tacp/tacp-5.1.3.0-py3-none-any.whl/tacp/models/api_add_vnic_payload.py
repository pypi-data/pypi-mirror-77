#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiAddVnicPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'automatic_mac_address': 'bool',
        'boot_order': 'int',
        'firewall_override_uuid': 'str',
        'mac_address': 'str',
        'name': 'str',
        'network_uuid': 'str'
    }

    attribute_map = {
        'automatic_mac_address': 'automaticMacAddress',
        'boot_order': 'bootOrder',
        'firewall_override_uuid': 'firewallOverrideUuid',
        'mac_address': 'macAddress',
        'name': 'name',
        'network_uuid': 'networkUuid'
    }

    def __init__(self, automatic_mac_address=None, boot_order=None, firewall_override_uuid=None, mac_address=None, name=None, network_uuid=None):  # noqa: E501
        """ApiAddVnicPayload - a model defined in Swagger"""  # noqa: E501
        self._automatic_mac_address = None
        self._boot_order = None
        self._firewall_override_uuid = None
        self._mac_address = None
        self._name = None
        self._network_uuid = None
        self.discriminator = None
        if automatic_mac_address is not None:
            self.automatic_mac_address = automatic_mac_address
        if boot_order is not None:
            self.boot_order = boot_order
        if firewall_override_uuid is not None:
            self.firewall_override_uuid = firewall_override_uuid
        if mac_address is not None:
            self.mac_address = mac_address
        if name is not None:
            self.name = name
        if network_uuid is not None:
            self.network_uuid = network_uuid

    @property
    def automatic_mac_address(self):
        """Gets the automatic_mac_address of this ApiAddVnicPayload.  # noqa: E501


        :return: The automatic_mac_address of this ApiAddVnicPayload.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_mac_address

    @automatic_mac_address.setter
    def automatic_mac_address(self, automatic_mac_address):
        """Sets the automatic_mac_address of this ApiAddVnicPayload.


        :param automatic_mac_address: The automatic_mac_address of this ApiAddVnicPayload.  # noqa: E501
        :type: bool
        """

        self._automatic_mac_address = automatic_mac_address

    @property
    def boot_order(self):
        """Gets the boot_order of this ApiAddVnicPayload.  # noqa: E501


        :return: The boot_order of this ApiAddVnicPayload.  # noqa: E501
        :rtype: int
        """
        return self._boot_order

    @boot_order.setter
    def boot_order(self, boot_order):
        """Sets the boot_order of this ApiAddVnicPayload.


        :param boot_order: The boot_order of this ApiAddVnicPayload.  # noqa: E501
        :type: int
        """

        self._boot_order = boot_order

    @property
    def firewall_override_uuid(self):
        """Gets the firewall_override_uuid of this ApiAddVnicPayload.  # noqa: E501


        :return: The firewall_override_uuid of this ApiAddVnicPayload.  # noqa: E501
        :rtype: str
        """
        return self._firewall_override_uuid

    @firewall_override_uuid.setter
    def firewall_override_uuid(self, firewall_override_uuid):
        """Sets the firewall_override_uuid of this ApiAddVnicPayload.


        :param firewall_override_uuid: The firewall_override_uuid of this ApiAddVnicPayload.  # noqa: E501
        :type: str
        """

        self._firewall_override_uuid = firewall_override_uuid

    @property
    def mac_address(self):
        """Gets the mac_address of this ApiAddVnicPayload.  # noqa: E501


        :return: The mac_address of this ApiAddVnicPayload.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this ApiAddVnicPayload.


        :param mac_address: The mac_address of this ApiAddVnicPayload.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def name(self):
        """Gets the name of this ApiAddVnicPayload.  # noqa: E501


        :return: The name of this ApiAddVnicPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiAddVnicPayload.


        :param name: The name of this ApiAddVnicPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_uuid(self):
        """Gets the network_uuid of this ApiAddVnicPayload.  # noqa: E501


        :return: The network_uuid of this ApiAddVnicPayload.  # noqa: E501
        :rtype: str
        """
        return self._network_uuid

    @network_uuid.setter
    def network_uuid(self, network_uuid):
        """Sets the network_uuid of this ApiAddVnicPayload.


        :param network_uuid: The network_uuid of this ApiAddVnicPayload.  # noqa: E501
        :type: str
        """

        self._network_uuid = network_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiAddVnicPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiAddVnicPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
