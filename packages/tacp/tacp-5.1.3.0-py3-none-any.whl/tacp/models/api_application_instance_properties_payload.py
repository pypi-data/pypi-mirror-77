#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiApplicationInstancePropertiesPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_group_uuid': 'str',
        'auto_snapshot_policy': 'ApiAutomatedSnapshotPolicyPayload',
        'boot_order': 'list[ApiBootOrderPayload]',
        'category_uuid': 'str',
        'datacenter_uuid': 'str',
        'description': 'str',
        'disaster_recovery_policy': 'ApiDisasterRecoveryPolicyPayload',
        'disks': 'list[ApiDiskSizeAndLimitPayload]',
        'flash_pool_uuid': 'str',
        'hardware_assisted_virtualization_enabled': 'bool',
        'host_uuid': 'str',
        'memory': 'int',
        'migration_zone_uuid': 'str',
        'name': 'str',
        'network_service_app_vnet_uuids': 'list[str]',
        'status': 'str',
        'tags': 'list[ApiUuidPayload]',
        'template_uuid': 'str',
        'uuid': 'str',
        'vcpus': 'int',
        'vm_mode': 'str',
        'vnics': 'list[ApiVnicPayload]'
    }

    attribute_map = {
        'application_group_uuid': 'applicationGroupUuid',
        'auto_snapshot_policy': 'autoSnapshotPolicy',
        'boot_order': 'bootOrder',
        'category_uuid': 'categoryUuid',
        'datacenter_uuid': 'datacenterUuid',
        'description': 'description',
        'disaster_recovery_policy': 'disasterRecoveryPolicy',
        'disks': 'disks',
        'flash_pool_uuid': 'flashPoolUuid',
        'hardware_assisted_virtualization_enabled': 'hardwareAssistedVirtualizationEnabled',
        'host_uuid': 'hostUuid',
        'memory': 'memory',
        'migration_zone_uuid': 'migrationZoneUuid',
        'name': 'name',
        'network_service_app_vnet_uuids': 'networkServiceAppVnetUuids',
        'status': 'status',
        'tags': 'tags',
        'template_uuid': 'templateUuid',
        'uuid': 'uuid',
        'vcpus': 'vcpus',
        'vm_mode': 'vmMode',
        'vnics': 'vnics'
    }

    def __init__(self, application_group_uuid=None, auto_snapshot_policy=None, boot_order=None, category_uuid=None, datacenter_uuid=None, description=None, disaster_recovery_policy=None, disks=None, flash_pool_uuid=None, hardware_assisted_virtualization_enabled=None, host_uuid=None, memory=None, migration_zone_uuid=None, name=None, network_service_app_vnet_uuids=None, status=None, tags=None, template_uuid=None, uuid=None, vcpus=None, vm_mode=None, vnics=None):  # noqa: E501
        """ApiApplicationInstancePropertiesPayload - a model defined in Swagger"""  # noqa: E501
        self._application_group_uuid = None
        self._auto_snapshot_policy = None
        self._boot_order = None
        self._category_uuid = None
        self._datacenter_uuid = None
        self._description = None
        self._disaster_recovery_policy = None
        self._disks = None
        self._flash_pool_uuid = None
        self._hardware_assisted_virtualization_enabled = None
        self._host_uuid = None
        self._memory = None
        self._migration_zone_uuid = None
        self._name = None
        self._network_service_app_vnet_uuids = None
        self._status = None
        self._tags = None
        self._template_uuid = None
        self._uuid = None
        self._vcpus = None
        self._vm_mode = None
        self._vnics = None
        self.discriminator = None
        if application_group_uuid is not None:
            self.application_group_uuid = application_group_uuid
        if auto_snapshot_policy is not None:
            self.auto_snapshot_policy = auto_snapshot_policy
        if boot_order is not None:
            self.boot_order = boot_order
        if category_uuid is not None:
            self.category_uuid = category_uuid
        if datacenter_uuid is not None:
            self.datacenter_uuid = datacenter_uuid
        if description is not None:
            self.description = description
        if disaster_recovery_policy is not None:
            self.disaster_recovery_policy = disaster_recovery_policy
        if disks is not None:
            self.disks = disks
        if flash_pool_uuid is not None:
            self.flash_pool_uuid = flash_pool_uuid
        if hardware_assisted_virtualization_enabled is not None:
            self.hardware_assisted_virtualization_enabled = hardware_assisted_virtualization_enabled
        if host_uuid is not None:
            self.host_uuid = host_uuid
        if memory is not None:
            self.memory = memory
        if migration_zone_uuid is not None:
            self.migration_zone_uuid = migration_zone_uuid
        if name is not None:
            self.name = name
        if network_service_app_vnet_uuids is not None:
            self.network_service_app_vnet_uuids = network_service_app_vnet_uuids
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags
        if template_uuid is not None:
            self.template_uuid = template_uuid
        if uuid is not None:
            self.uuid = uuid
        if vcpus is not None:
            self.vcpus = vcpus
        if vm_mode is not None:
            self.vm_mode = vm_mode
        if vnics is not None:
            self.vnics = vnics

    @property
    def application_group_uuid(self):
        """Gets the application_group_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The application_group_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._application_group_uuid

    @application_group_uuid.setter
    def application_group_uuid(self, application_group_uuid):
        """Sets the application_group_uuid of this ApiApplicationInstancePropertiesPayload.


        :param application_group_uuid: The application_group_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._application_group_uuid = application_group_uuid

    @property
    def auto_snapshot_policy(self):
        """Gets the auto_snapshot_policy of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The auto_snapshot_policy of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: ApiAutomatedSnapshotPolicyPayload
        """
        return self._auto_snapshot_policy

    @auto_snapshot_policy.setter
    def auto_snapshot_policy(self, auto_snapshot_policy):
        """Sets the auto_snapshot_policy of this ApiApplicationInstancePropertiesPayload.


        :param auto_snapshot_policy: The auto_snapshot_policy of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: ApiAutomatedSnapshotPolicyPayload
        """

        self._auto_snapshot_policy = auto_snapshot_policy

    @property
    def boot_order(self):
        """Gets the boot_order of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The boot_order of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: list[ApiBootOrderPayload]
        """
        return self._boot_order

    @boot_order.setter
    def boot_order(self, boot_order):
        """Sets the boot_order of this ApiApplicationInstancePropertiesPayload.


        :param boot_order: The boot_order of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: list[ApiBootOrderPayload]
        """

        self._boot_order = boot_order

    @property
    def category_uuid(self):
        """Gets the category_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The category_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._category_uuid

    @category_uuid.setter
    def category_uuid(self, category_uuid):
        """Sets the category_uuid of this ApiApplicationInstancePropertiesPayload.


        :param category_uuid: The category_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._category_uuid = category_uuid

    @property
    def datacenter_uuid(self):
        """Gets the datacenter_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The datacenter_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._datacenter_uuid

    @datacenter_uuid.setter
    def datacenter_uuid(self, datacenter_uuid):
        """Sets the datacenter_uuid of this ApiApplicationInstancePropertiesPayload.


        :param datacenter_uuid: The datacenter_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._datacenter_uuid = datacenter_uuid

    @property
    def description(self):
        """Gets the description of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The description of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiApplicationInstancePropertiesPayload.


        :param description: The description of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disaster_recovery_policy(self):
        """Gets the disaster_recovery_policy of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The disaster_recovery_policy of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: ApiDisasterRecoveryPolicyPayload
        """
        return self._disaster_recovery_policy

    @disaster_recovery_policy.setter
    def disaster_recovery_policy(self, disaster_recovery_policy):
        """Sets the disaster_recovery_policy of this ApiApplicationInstancePropertiesPayload.


        :param disaster_recovery_policy: The disaster_recovery_policy of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: ApiDisasterRecoveryPolicyPayload
        """

        self._disaster_recovery_policy = disaster_recovery_policy

    @property
    def disks(self):
        """Gets the disks of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The disks of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: list[ApiDiskSizeAndLimitPayload]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this ApiApplicationInstancePropertiesPayload.


        :param disks: The disks of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: list[ApiDiskSizeAndLimitPayload]
        """

        self._disks = disks

    @property
    def flash_pool_uuid(self):
        """Gets the flash_pool_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The flash_pool_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._flash_pool_uuid

    @flash_pool_uuid.setter
    def flash_pool_uuid(self, flash_pool_uuid):
        """Sets the flash_pool_uuid of this ApiApplicationInstancePropertiesPayload.


        :param flash_pool_uuid: The flash_pool_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._flash_pool_uuid = flash_pool_uuid

    @property
    def hardware_assisted_virtualization_enabled(self):
        """Gets the hardware_assisted_virtualization_enabled of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The hardware_assisted_virtualization_enabled of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: bool
        """
        return self._hardware_assisted_virtualization_enabled

    @hardware_assisted_virtualization_enabled.setter
    def hardware_assisted_virtualization_enabled(self, hardware_assisted_virtualization_enabled):
        """Sets the hardware_assisted_virtualization_enabled of this ApiApplicationInstancePropertiesPayload.


        :param hardware_assisted_virtualization_enabled: The hardware_assisted_virtualization_enabled of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: bool
        """

        self._hardware_assisted_virtualization_enabled = hardware_assisted_virtualization_enabled

    @property
    def host_uuid(self):
        """Gets the host_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The host_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._host_uuid

    @host_uuid.setter
    def host_uuid(self, host_uuid):
        """Sets the host_uuid of this ApiApplicationInstancePropertiesPayload.


        :param host_uuid: The host_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._host_uuid = host_uuid

    @property
    def memory(self):
        """Gets the memory of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The memory of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ApiApplicationInstancePropertiesPayload.


        :param memory: The memory of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def migration_zone_uuid(self):
        """Gets the migration_zone_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The migration_zone_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._migration_zone_uuid

    @migration_zone_uuid.setter
    def migration_zone_uuid(self, migration_zone_uuid):
        """Sets the migration_zone_uuid of this ApiApplicationInstancePropertiesPayload.


        :param migration_zone_uuid: The migration_zone_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._migration_zone_uuid = migration_zone_uuid

    @property
    def name(self):
        """Gets the name of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The name of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiApplicationInstancePropertiesPayload.


        :param name: The name of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_service_app_vnet_uuids(self):
        """Gets the network_service_app_vnet_uuids of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The network_service_app_vnet_uuids of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._network_service_app_vnet_uuids

    @network_service_app_vnet_uuids.setter
    def network_service_app_vnet_uuids(self, network_service_app_vnet_uuids):
        """Sets the network_service_app_vnet_uuids of this ApiApplicationInstancePropertiesPayload.


        :param network_service_app_vnet_uuids: The network_service_app_vnet_uuids of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: list[str]
        """

        self._network_service_app_vnet_uuids = network_service_app_vnet_uuids

    @property
    def status(self):
        """Gets the status of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The status of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiApplicationInstancePropertiesPayload.


        :param status: The status of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The tags of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: list[ApiUuidPayload]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApiApplicationInstancePropertiesPayload.


        :param tags: The tags of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: list[ApiUuidPayload]
        """

        self._tags = tags

    @property
    def template_uuid(self):
        """Gets the template_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The template_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._template_uuid

    @template_uuid.setter
    def template_uuid(self, template_uuid):
        """Sets the template_uuid of this ApiApplicationInstancePropertiesPayload.


        :param template_uuid: The template_uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._template_uuid = template_uuid

    @property
    def uuid(self):
        """Gets the uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApiApplicationInstancePropertiesPayload.


        :param uuid: The uuid of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vcpus(self):
        """Gets the vcpus of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The vcpus of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this ApiApplicationInstancePropertiesPayload.


        :param vcpus: The vcpus of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._vcpus = vcpus

    @property
    def vm_mode(self):
        """Gets the vm_mode of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The vm_mode of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._vm_mode

    @vm_mode.setter
    def vm_mode(self, vm_mode):
        """Sets the vm_mode of this ApiApplicationInstancePropertiesPayload.


        :param vm_mode: The vm_mode of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._vm_mode = vm_mode

    @property
    def vnics(self):
        """Gets the vnics of this ApiApplicationInstancePropertiesPayload.  # noqa: E501


        :return: The vnics of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :rtype: list[ApiVnicPayload]
        """
        return self._vnics

    @vnics.setter
    def vnics(self, vnics):
        """Sets the vnics of this ApiApplicationInstancePropertiesPayload.


        :param vnics: The vnics of this ApiApplicationInstancePropertiesPayload.  # noqa: E501
        :type: list[ApiVnicPayload]
        """

        self._vnics = vnics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiApplicationInstancePropertiesPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiApplicationInstancePropertiesPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
