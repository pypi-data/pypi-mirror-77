#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiImportVmToApplicationTemplatePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu': 'int',
        'datacenter_uuid': 'str',
        'default_cpus': 'int',
        'default_memory_bytes': 'int',
        'description': 'str',
        'disk_files': 'list[ApiDiskPayload]',
        'id': 'int',
        'memory': 'int',
        'name': 'str',
        'operating_system': 'ApiApplicationTemplateOperatingSystemPayload',
        'os_type_id': 'int',
        'os_type_name': 'str',
        'os_version_name': 'str',
        'run_sys_prep': 'bool',
        'shared_storage': 'ApiSharedStoragePayload',
        'slam_action_request_uuid': 'str',
        'template_disk_files': 'list[ApiDiskPayload]',
        'virtio_drivers_installed': 'bool'
    }

    attribute_map = {
        'cpu': 'cpu',
        'datacenter_uuid': 'datacenterUuid',
        'default_cpus': 'defaultCpus',
        'default_memory_bytes': 'defaultMemoryBytes',
        'description': 'description',
        'disk_files': 'diskFiles',
        'id': 'id',
        'memory': 'memory',
        'name': 'name',
        'operating_system': 'operatingSystem',
        'os_type_id': 'osTypeId',
        'os_type_name': 'osTypeName',
        'os_version_name': 'osVersionName',
        'run_sys_prep': 'runSysPrep',
        'shared_storage': 'sharedStorage',
        'slam_action_request_uuid': 'slamActionRequestUuid',
        'template_disk_files': 'templateDiskFiles',
        'virtio_drivers_installed': 'virtioDriversInstalled'
    }

    def __init__(self, cpu=None, datacenter_uuid=None, default_cpus=None, default_memory_bytes=None, description=None, disk_files=None, id=None, memory=None, name=None, operating_system=None, os_type_id=None, os_type_name=None, os_version_name=None, run_sys_prep=None, shared_storage=None, slam_action_request_uuid=None, template_disk_files=None, virtio_drivers_installed=None):  # noqa: E501
        """ApiImportVmToApplicationTemplatePayload - a model defined in Swagger"""  # noqa: E501
        self._cpu = None
        self._datacenter_uuid = None
        self._default_cpus = None
        self._default_memory_bytes = None
        self._description = None
        self._disk_files = None
        self._id = None
        self._memory = None
        self._name = None
        self._operating_system = None
        self._os_type_id = None
        self._os_type_name = None
        self._os_version_name = None
        self._run_sys_prep = None
        self._shared_storage = None
        self._slam_action_request_uuid = None
        self._template_disk_files = None
        self._virtio_drivers_installed = None
        self.discriminator = None
        if cpu is not None:
            self.cpu = cpu
        if datacenter_uuid is not None:
            self.datacenter_uuid = datacenter_uuid
        if default_cpus is not None:
            self.default_cpus = default_cpus
        if default_memory_bytes is not None:
            self.default_memory_bytes = default_memory_bytes
        if description is not None:
            self.description = description
        if disk_files is not None:
            self.disk_files = disk_files
        if id is not None:
            self.id = id
        if memory is not None:
            self.memory = memory
        if name is not None:
            self.name = name
        if operating_system is not None:
            self.operating_system = operating_system
        if os_type_id is not None:
            self.os_type_id = os_type_id
        if os_type_name is not None:
            self.os_type_name = os_type_name
        if os_version_name is not None:
            self.os_version_name = os_version_name
        if run_sys_prep is not None:
            self.run_sys_prep = run_sys_prep
        if shared_storage is not None:
            self.shared_storage = shared_storage
        if slam_action_request_uuid is not None:
            self.slam_action_request_uuid = slam_action_request_uuid
        if template_disk_files is not None:
            self.template_disk_files = template_disk_files
        if virtio_drivers_installed is not None:
            self.virtio_drivers_installed = virtio_drivers_installed

    @property
    def cpu(self):
        """Gets the cpu of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The cpu of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this ApiImportVmToApplicationTemplatePayload.


        :param cpu: The cpu of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: int
        """

        self._cpu = cpu

    @property
    def datacenter_uuid(self):
        """Gets the datacenter_uuid of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The datacenter_uuid of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: str
        """
        return self._datacenter_uuid

    @datacenter_uuid.setter
    def datacenter_uuid(self, datacenter_uuid):
        """Sets the datacenter_uuid of this ApiImportVmToApplicationTemplatePayload.


        :param datacenter_uuid: The datacenter_uuid of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: str
        """

        self._datacenter_uuid = datacenter_uuid

    @property
    def default_cpus(self):
        """Gets the default_cpus of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The default_cpus of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: int
        """
        return self._default_cpus

    @default_cpus.setter
    def default_cpus(self, default_cpus):
        """Sets the default_cpus of this ApiImportVmToApplicationTemplatePayload.


        :param default_cpus: The default_cpus of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: int
        """

        self._default_cpus = default_cpus

    @property
    def default_memory_bytes(self):
        """Gets the default_memory_bytes of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The default_memory_bytes of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: int
        """
        return self._default_memory_bytes

    @default_memory_bytes.setter
    def default_memory_bytes(self, default_memory_bytes):
        """Sets the default_memory_bytes of this ApiImportVmToApplicationTemplatePayload.


        :param default_memory_bytes: The default_memory_bytes of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: int
        """

        self._default_memory_bytes = default_memory_bytes

    @property
    def description(self):
        """Gets the description of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The description of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiImportVmToApplicationTemplatePayload.


        :param description: The description of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disk_files(self):
        """Gets the disk_files of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The disk_files of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: list[ApiDiskPayload]
        """
        return self._disk_files

    @disk_files.setter
    def disk_files(self, disk_files):
        """Sets the disk_files of this ApiImportVmToApplicationTemplatePayload.


        :param disk_files: The disk_files of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: list[ApiDiskPayload]
        """

        self._disk_files = disk_files

    @property
    def id(self):
        """Gets the id of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The id of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiImportVmToApplicationTemplatePayload.


        :param id: The id of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def memory(self):
        """Gets the memory of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The memory of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ApiImportVmToApplicationTemplatePayload.


        :param memory: The memory of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The name of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiImportVmToApplicationTemplatePayload.


        :param name: The name of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operating_system(self):
        """Gets the operating_system of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The operating_system of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: ApiApplicationTemplateOperatingSystemPayload
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this ApiImportVmToApplicationTemplatePayload.


        :param operating_system: The operating_system of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: ApiApplicationTemplateOperatingSystemPayload
        """

        self._operating_system = operating_system

    @property
    def os_type_id(self):
        """Gets the os_type_id of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The os_type_id of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: int
        """
        return self._os_type_id

    @os_type_id.setter
    def os_type_id(self, os_type_id):
        """Sets the os_type_id of this ApiImportVmToApplicationTemplatePayload.


        :param os_type_id: The os_type_id of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: int
        """

        self._os_type_id = os_type_id

    @property
    def os_type_name(self):
        """Gets the os_type_name of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The os_type_name of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: str
        """
        return self._os_type_name

    @os_type_name.setter
    def os_type_name(self, os_type_name):
        """Sets the os_type_name of this ApiImportVmToApplicationTemplatePayload.


        :param os_type_name: The os_type_name of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: str
        """

        self._os_type_name = os_type_name

    @property
    def os_version_name(self):
        """Gets the os_version_name of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The os_version_name of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: str
        """
        return self._os_version_name

    @os_version_name.setter
    def os_version_name(self, os_version_name):
        """Sets the os_version_name of this ApiImportVmToApplicationTemplatePayload.


        :param os_version_name: The os_version_name of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: str
        """

        self._os_version_name = os_version_name

    @property
    def run_sys_prep(self):
        """Gets the run_sys_prep of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The run_sys_prep of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._run_sys_prep

    @run_sys_prep.setter
    def run_sys_prep(self, run_sys_prep):
        """Sets the run_sys_prep of this ApiImportVmToApplicationTemplatePayload.


        :param run_sys_prep: The run_sys_prep of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: bool
        """

        self._run_sys_prep = run_sys_prep

    @property
    def shared_storage(self):
        """Gets the shared_storage of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The shared_storage of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: ApiSharedStoragePayload
        """
        return self._shared_storage

    @shared_storage.setter
    def shared_storage(self, shared_storage):
        """Sets the shared_storage of this ApiImportVmToApplicationTemplatePayload.


        :param shared_storage: The shared_storage of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: ApiSharedStoragePayload
        """

        self._shared_storage = shared_storage

    @property
    def slam_action_request_uuid(self):
        """Gets the slam_action_request_uuid of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The slam_action_request_uuid of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: str
        """
        return self._slam_action_request_uuid

    @slam_action_request_uuid.setter
    def slam_action_request_uuid(self, slam_action_request_uuid):
        """Sets the slam_action_request_uuid of this ApiImportVmToApplicationTemplatePayload.


        :param slam_action_request_uuid: The slam_action_request_uuid of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: str
        """

        self._slam_action_request_uuid = slam_action_request_uuid

    @property
    def template_disk_files(self):
        """Gets the template_disk_files of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The template_disk_files of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: list[ApiDiskPayload]
        """
        return self._template_disk_files

    @template_disk_files.setter
    def template_disk_files(self, template_disk_files):
        """Sets the template_disk_files of this ApiImportVmToApplicationTemplatePayload.


        :param template_disk_files: The template_disk_files of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: list[ApiDiskPayload]
        """

        self._template_disk_files = template_disk_files

    @property
    def virtio_drivers_installed(self):
        """Gets the virtio_drivers_installed of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501


        :return: The virtio_drivers_installed of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._virtio_drivers_installed

    @virtio_drivers_installed.setter
    def virtio_drivers_installed(self, virtio_drivers_installed):
        """Sets the virtio_drivers_installed of this ApiImportVmToApplicationTemplatePayload.


        :param virtio_drivers_installed: The virtio_drivers_installed of this ApiImportVmToApplicationTemplatePayload.  # noqa: E501
        :type: bool
        """

        self._virtio_drivers_installed = virtio_drivers_installed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiImportVmToApplicationTemplatePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiImportVmToApplicationTemplatePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
