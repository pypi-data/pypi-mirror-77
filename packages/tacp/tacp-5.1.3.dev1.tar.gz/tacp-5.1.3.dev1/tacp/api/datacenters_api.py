#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tacp.api_client import ApiClient


class DatacentersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_datacenter_using_post(self, body, **kwargs):  # noqa: E501
        """Create datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datacenter_using_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateDatacenterPayload body: payload (required)
        :return: ApiDatacenterPropertiesPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_datacenter_using_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_datacenter_using_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_datacenter_using_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datacenter_using_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateDatacenterPayload body: payload (required)
        :return: ApiDatacenterPropertiesPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_datacenter_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_datacenter_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/datacenters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiDatacenterPropertiesPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datacenter_firewall_overrides_using_get(self, uuid, **kwargs):  # noqa: E501
        """View firewall overrides for a datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datacenter_firewall_overrides_using_get(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: uuid (required)
        :param list[str] fields: Selector specifying a subset of fields to include in the response. Supports dotted notation to traverse into child objects. (Example: ?fields=foo.bar.uuid,foo.name)
        :param str filters: Selector specifying filters in FIQL notation to apply to the response items. Supports dotted notation to traverse into child objects. (Example: ?filters=foo.bar.id=in=(1,2,3) or foo.bar.name==\"name\") Supported comparison operators: Equal to: == Not equal to: != Less than: =lt= or < Less than or equal to: =le= or <= Greater than operator: =gt= or > Greater than or equal to: =ge= or >= In: =in= Not in: =out=
        :return: list[ApiFirewallProfilePropertiesPayload]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datacenter_firewall_overrides_using_get_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datacenter_firewall_overrides_using_get_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_datacenter_firewall_overrides_using_get_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """View firewall overrides for a datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datacenter_firewall_overrides_using_get_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: uuid (required)
        :param list[str] fields: Selector specifying a subset of fields to include in the response. Supports dotted notation to traverse into child objects. (Example: ?fields=foo.bar.uuid,foo.name)
        :param str filters: Selector specifying filters in FIQL notation to apply to the response items. Supports dotted notation to traverse into child objects. (Example: ?filters=foo.bar.id=in=(1,2,3) or foo.bar.name==\"name\") Supported comparison operators: Equal to: == Not equal to: != Less than: =lt= or < Less than or equal to: =le= or <= Greater than operator: =gt= or > Greater than or equal to: =ge= or >= In: =in= Not in: =out=
        :return: list[ApiFirewallProfilePropertiesPayload]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'fields', 'filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datacenter_firewall_overrides_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_datacenter_firewall_overrides_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/datacenters/{uuid}/firewall-overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiFirewallProfilePropertiesPayload]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datacenter_templates_using_get(self, uuid, **kwargs):  # noqa: E501
        """View templates for a datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datacenter_templates_using_get(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: uuid (required)
        :param list[str] fields: Selector specifying a subset of fields to include in the response. Supports dotted notation to traverse into child objects. (Example: ?fields=foo.bar.uuid,foo.name)
        :param str filters: Selector specifying filters in FIQL notation to apply to the response items. Supports dotted notation to traverse into child objects. (Example: ?filters=foo.bar.id=in=(1,2,3) or foo.bar.name==\"name\") Supported comparison operators: Equal to: == Not equal to: != Less than: =lt= or < Less than or equal to: =le= or <= Greater than operator: =gt= or > Greater than or equal to: =ge= or >= In: =in= Not in: =out=
        :param int limit: limit the number of templates returned
        :param int offset: returns templates starting at the specified index in the list
        :return: list[ApiApplicationTemplatePropertiesPayload]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datacenter_templates_using_get_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datacenter_templates_using_get_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_datacenter_templates_using_get_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """View templates for a datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datacenter_templates_using_get_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: uuid (required)
        :param list[str] fields: Selector specifying a subset of fields to include in the response. Supports dotted notation to traverse into child objects. (Example: ?fields=foo.bar.uuid,foo.name)
        :param str filters: Selector specifying filters in FIQL notation to apply to the response items. Supports dotted notation to traverse into child objects. (Example: ?filters=foo.bar.id=in=(1,2,3) or foo.bar.name==\"name\") Supported comparison operators: Equal to: == Not equal to: != Less than: =lt= or < Less than or equal to: =le= or <= Greater than operator: =gt= or > Greater than or equal to: =ge= or >= In: =in= Not in: =out=
        :param int limit: limit the number of templates returned
        :param int offset: returns templates starting at the specified index in the list
        :return: list[ApiApplicationTemplatePropertiesPayload]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'fields', 'filters', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datacenter_templates_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_datacenter_templates_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/datacenters/{uuid}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiApplicationTemplatePropertiesPayload]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datacenter_using_get(self, uuid, **kwargs):  # noqa: E501
        """View the properties of a datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datacenter_using_get(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: uuid (required)
        :param list[str] fields: Selector specifying a subset of fields to include in the response. Supports dotted notation to traverse into child objects. (Example: ?fields=foo.bar.uuid,foo.name)
        :return: ApiDatacenterPropertiesPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datacenter_using_get_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datacenter_using_get_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_datacenter_using_get_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """View the properties of a datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datacenter_using_get_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: uuid (required)
        :param list[str] fields: Selector specifying a subset of fields to include in the response. Supports dotted notation to traverse into child objects. (Example: ?fields=foo.bar.uuid,foo.name)
        :return: ApiDatacenterPropertiesPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datacenter_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_datacenter_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/datacenters/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiDatacenterPropertiesPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datacenters_using_get(self, **kwargs):  # noqa: E501
        """View datacenters for an organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datacenters_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Selector specifying a subset of fields to include in the response. Supports dotted notation to traverse into child objects. (Example: ?fields=foo.bar.uuid,foo.name)
        :param str filters: Selector specifying filters in FIQL notation to apply to the response items. Supports dotted notation to traverse into child objects. (Example: ?filters=foo.bar.id=in=(1,2,3) or foo.bar.name==\"name\") Supported comparison operators: Equal to: == Not equal to: != Less than: =lt= or < Less than or equal to: =le= or <= Greater than operator: =gt= or > Greater than or equal to: =ge= or >= In: =in= Not in: =out=
        :param int limit: limit the number of datacenters returned
        :param int offset: returns datacenters starting at the specified index in the list
        :return: list[ApiDatacenterPropertiesPayload]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datacenters_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_datacenters_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_datacenters_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """View datacenters for an organization  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datacenters_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Selector specifying a subset of fields to include in the response. Supports dotted notation to traverse into child objects. (Example: ?fields=foo.bar.uuid,foo.name)
        :param str filters: Selector specifying filters in FIQL notation to apply to the response items. Supports dotted notation to traverse into child objects. (Example: ?filters=foo.bar.id=in=(1,2,3) or foo.bar.name==\"name\") Supported comparison operators: Equal to: == Not equal to: != Less than: =lt= or < Less than or equal to: =le= or <= Greater than operator: =gt= or > Greater than or equal to: =ge= or >= In: =in= Not in: =out=
        :param int limit: limit the number of datacenters returned
        :param int offset: returns datacenters starting at the specified index in the list
        :return: list[ApiDatacenterPropertiesPayload]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'filters', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datacenters_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/datacenters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiDatacenterPropertiesPayload]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_networks_from_datacenter_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Unassign networks from Datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_networks_from_datacenter_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiUpdateNetworksForDatacenterPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: list[ApiSlamActionRequestWithMessagePayload]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_networks_from_datacenter_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_networks_from_datacenter_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def unassign_networks_from_datacenter_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Unassign networks from Datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_networks_from_datacenter_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiUpdateNetworksForDatacenterPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: list[ApiSlamActionRequestWithMessagePayload]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_networks_from_datacenter_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `unassign_networks_from_datacenter_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `unassign_networks_from_datacenter_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/datacenters/{uuid}/unassign-networks', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiSlamActionRequestWithMessagePayload]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_networks_to_datacenter_using_put(self, body, uuid, **kwargs):  # noqa: E501
        """Assign networks to Datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_networks_to_datacenter_using_put(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiUpdateNetworksForDatacenterPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_networks_to_datacenter_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_networks_to_datacenter_using_put_with_http_info(body, uuid, **kwargs)  # noqa: E501
            return data

    def update_networks_to_datacenter_using_put_with_http_info(self, body, uuid, **kwargs):  # noqa: E501
        """Assign networks to Datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_networks_to_datacenter_using_put_with_http_info(body, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiUpdateNetworksForDatacenterPayload body: payload (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_networks_to_datacenter_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_networks_to_datacenter_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `update_networks_to_datacenter_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/datacenters/{uuid}/assign-networks', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user_role_for_datacenter_using_put(self, body, user_uuid, uuid, **kwargs):  # noqa: E501
        """Add/remove user to/from a datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_role_for_datacenter_using_put(body, user_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiActionPayload body: payload (required)
        :param str user_uuid: user_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_role_for_datacenter_using_put_with_http_info(body, user_uuid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_role_for_datacenter_using_put_with_http_info(body, user_uuid, uuid, **kwargs)  # noqa: E501
            return data

    def update_user_role_for_datacenter_using_put_with_http_info(self, body, user_uuid, uuid, **kwargs):  # noqa: E501
        """Add/remove user to/from a datacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_role_for_datacenter_using_put_with_http_info(body, user_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiActionPayload body: payload (required)
        :param str user_uuid: user_uuid (required)
        :param str uuid: uuid (required)
        :return: ApiMessagePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_uuid', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_role_for_datacenter_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_user_role_for_datacenter_using_put`")  # noqa: E501
        # verify the required parameter 'user_uuid' is set
        if ('user_uuid' not in params or
                params['user_uuid'] is None):
            raise ValueError("Missing the required parameter `user_uuid` when calling `update_user_role_for_datacenter_using_put`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `update_user_role_for_datacenter_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_uuid' in params:
            path_params['user_uuid'] = params['user_uuid']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/latest/datacenters/{uuid}/users/{user_uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiMessagePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
