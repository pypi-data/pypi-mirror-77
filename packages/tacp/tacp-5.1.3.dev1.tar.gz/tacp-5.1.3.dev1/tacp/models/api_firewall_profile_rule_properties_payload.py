#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiFirewallProfileRulePropertiesPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'description': 'str',
        'destination_range_ips': 'list[str]',
        'destination_range_ports': 'list[int]',
        'order': 'int',
        'protocol': 'str',
        'source_range_ips': 'list[str]',
        'source_range_ports': 'list[int]',
        'type': 'str'
    }

    attribute_map = {
        'action': 'action',
        'description': 'description',
        'destination_range_ips': 'destinationRangeIps',
        'destination_range_ports': 'destinationRangePorts',
        'order': 'order',
        'protocol': 'protocol',
        'source_range_ips': 'sourceRangeIps',
        'source_range_ports': 'sourceRangePorts',
        'type': 'type'
    }

    def __init__(self, action=None, description=None, destination_range_ips=None, destination_range_ports=None, order=None, protocol=None, source_range_ips=None, source_range_ports=None, type=None):  # noqa: E501
        """ApiFirewallProfileRulePropertiesPayload - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._description = None
        self._destination_range_ips = None
        self._destination_range_ports = None
        self._order = None
        self._protocol = None
        self._source_range_ips = None
        self._source_range_ports = None
        self._type = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if description is not None:
            self.description = description
        if destination_range_ips is not None:
            self.destination_range_ips = destination_range_ips
        if destination_range_ports is not None:
            self.destination_range_ports = destination_range_ports
        if order is not None:
            self.order = order
        if protocol is not None:
            self.protocol = protocol
        if source_range_ips is not None:
            self.source_range_ips = source_range_ips
        if source_range_ports is not None:
            self.source_range_ports = source_range_ports
        if type is not None:
            self.type = type

    @property
    def action(self):
        """Gets the action of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501


        :return: The action of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ApiFirewallProfileRulePropertiesPayload.


        :param action: The action of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def description(self):
        """Gets the description of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501


        :return: The description of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiFirewallProfileRulePropertiesPayload.


        :param description: The description of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def destination_range_ips(self):
        """Gets the destination_range_ips of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501


        :return: The destination_range_ips of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination_range_ips

    @destination_range_ips.setter
    def destination_range_ips(self, destination_range_ips):
        """Sets the destination_range_ips of this ApiFirewallProfileRulePropertiesPayload.


        :param destination_range_ips: The destination_range_ips of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :type: list[str]
        """

        self._destination_range_ips = destination_range_ips

    @property
    def destination_range_ports(self):
        """Gets the destination_range_ports of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501


        :return: The destination_range_ports of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._destination_range_ports

    @destination_range_ports.setter
    def destination_range_ports(self, destination_range_ports):
        """Sets the destination_range_ports of this ApiFirewallProfileRulePropertiesPayload.


        :param destination_range_ports: The destination_range_ports of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :type: list[int]
        """

        self._destination_range_ports = destination_range_ports

    @property
    def order(self):
        """Gets the order of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501


        :return: The order of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ApiFirewallProfileRulePropertiesPayload.


        :param order: The order of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def protocol(self):
        """Gets the protocol of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501


        :return: The protocol of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ApiFirewallProfileRulePropertiesPayload.


        :param protocol: The protocol of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def source_range_ips(self):
        """Gets the source_range_ips of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501


        :return: The source_range_ips of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_range_ips

    @source_range_ips.setter
    def source_range_ips(self, source_range_ips):
        """Sets the source_range_ips of this ApiFirewallProfileRulePropertiesPayload.


        :param source_range_ips: The source_range_ips of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :type: list[str]
        """

        self._source_range_ips = source_range_ips

    @property
    def source_range_ports(self):
        """Gets the source_range_ports of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501


        :return: The source_range_ports of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._source_range_ports

    @source_range_ports.setter
    def source_range_ports(self, source_range_ports):
        """Sets the source_range_ports of this ApiFirewallProfileRulePropertiesPayload.


        :param source_range_ports: The source_range_ports of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :type: list[int]
        """

        self._source_range_ports = source_range_ports

    @property
    def type(self):
        """Gets the type of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501


        :return: The type of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiFirewallProfileRulePropertiesPayload.


        :param type: The type of this ApiFirewallProfileRulePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiFirewallProfileRulePropertiesPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiFirewallProfileRulePropertiesPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
