#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiSharedStoragePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_name': 'str',
        'auth_method': 'str',
        'auth_password': 'str',
        'auth_username': 'str',
        'domain': 'str',
        'host_id': 'int',
        'hostname': 'str',
        'id': 'int',
        'invisible_compute_controllers': 'list[ApiComputeHardwarePropertiesPayload]',
        'password': 'str',
        'port': 'int',
        'share_name': 'str',
        'storage_available': 'int',
        'storage_capacity': 'int',
        'storage_used': 'int',
        'tags': 'list[ApiUiTagPayload]',
        'target_name': 'str',
        'type': 'str',
        'username': 'str',
        'visible_compute_controllers': 'list[ApiComputeHardwarePropertiesPayload]'
    }

    attribute_map = {
        'asset_name': 'assetName',
        'auth_method': 'authMethod',
        'auth_password': 'authPassword',
        'auth_username': 'authUsername',
        'domain': 'domain',
        'host_id': 'hostId',
        'hostname': 'hostname',
        'id': 'id',
        'invisible_compute_controllers': 'invisibleComputeControllers',
        'password': 'password',
        'port': 'port',
        'share_name': 'shareName',
        'storage_available': 'storageAvailable',
        'storage_capacity': 'storageCapacity',
        'storage_used': 'storageUsed',
        'tags': 'tags',
        'target_name': 'targetName',
        'type': 'type',
        'username': 'username',
        'visible_compute_controllers': 'visibleComputeControllers'
    }

    def __init__(self, asset_name=None, auth_method=None, auth_password=None, auth_username=None, domain=None, host_id=None, hostname=None, id=None, invisible_compute_controllers=None, password=None, port=None, share_name=None, storage_available=None, storage_capacity=None, storage_used=None, tags=None, target_name=None, type=None, username=None, visible_compute_controllers=None):  # noqa: E501
        """ApiSharedStoragePayload - a model defined in Swagger"""  # noqa: E501
        self._asset_name = None
        self._auth_method = None
        self._auth_password = None
        self._auth_username = None
        self._domain = None
        self._host_id = None
        self._hostname = None
        self._id = None
        self._invisible_compute_controllers = None
        self._password = None
        self._port = None
        self._share_name = None
        self._storage_available = None
        self._storage_capacity = None
        self._storage_used = None
        self._tags = None
        self._target_name = None
        self._type = None
        self._username = None
        self._visible_compute_controllers = None
        self.discriminator = None
        if asset_name is not None:
            self.asset_name = asset_name
        if auth_method is not None:
            self.auth_method = auth_method
        if auth_password is not None:
            self.auth_password = auth_password
        if auth_username is not None:
            self.auth_username = auth_username
        if domain is not None:
            self.domain = domain
        if host_id is not None:
            self.host_id = host_id
        if hostname is not None:
            self.hostname = hostname
        if id is not None:
            self.id = id
        if invisible_compute_controllers is not None:
            self.invisible_compute_controllers = invisible_compute_controllers
        if password is not None:
            self.password = password
        if port is not None:
            self.port = port
        if share_name is not None:
            self.share_name = share_name
        if storage_available is not None:
            self.storage_available = storage_available
        if storage_capacity is not None:
            self.storage_capacity = storage_capacity
        if storage_used is not None:
            self.storage_used = storage_used
        if tags is not None:
            self.tags = tags
        if target_name is not None:
            self.target_name = target_name
        if type is not None:
            self.type = type
        if username is not None:
            self.username = username
        if visible_compute_controllers is not None:
            self.visible_compute_controllers = visible_compute_controllers

    @property
    def asset_name(self):
        """Gets the asset_name of this ApiSharedStoragePayload.  # noqa: E501


        :return: The asset_name of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this ApiSharedStoragePayload.


        :param asset_name: The asset_name of this ApiSharedStoragePayload.  # noqa: E501
        :type: str
        """

        self._asset_name = asset_name

    @property
    def auth_method(self):
        """Gets the auth_method of this ApiSharedStoragePayload.  # noqa: E501


        :return: The auth_method of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: str
        """
        return self._auth_method

    @auth_method.setter
    def auth_method(self, auth_method):
        """Sets the auth_method of this ApiSharedStoragePayload.


        :param auth_method: The auth_method of this ApiSharedStoragePayload.  # noqa: E501
        :type: str
        """

        self._auth_method = auth_method

    @property
    def auth_password(self):
        """Gets the auth_password of this ApiSharedStoragePayload.  # noqa: E501


        :return: The auth_password of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: str
        """
        return self._auth_password

    @auth_password.setter
    def auth_password(self, auth_password):
        """Sets the auth_password of this ApiSharedStoragePayload.


        :param auth_password: The auth_password of this ApiSharedStoragePayload.  # noqa: E501
        :type: str
        """

        self._auth_password = auth_password

    @property
    def auth_username(self):
        """Gets the auth_username of this ApiSharedStoragePayload.  # noqa: E501


        :return: The auth_username of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: str
        """
        return self._auth_username

    @auth_username.setter
    def auth_username(self, auth_username):
        """Sets the auth_username of this ApiSharedStoragePayload.


        :param auth_username: The auth_username of this ApiSharedStoragePayload.  # noqa: E501
        :type: str
        """

        self._auth_username = auth_username

    @property
    def domain(self):
        """Gets the domain of this ApiSharedStoragePayload.  # noqa: E501


        :return: The domain of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ApiSharedStoragePayload.


        :param domain: The domain of this ApiSharedStoragePayload.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def host_id(self):
        """Gets the host_id of this ApiSharedStoragePayload.  # noqa: E501


        :return: The host_id of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: int
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this ApiSharedStoragePayload.


        :param host_id: The host_id of this ApiSharedStoragePayload.  # noqa: E501
        :type: int
        """

        self._host_id = host_id

    @property
    def hostname(self):
        """Gets the hostname of this ApiSharedStoragePayload.  # noqa: E501


        :return: The hostname of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ApiSharedStoragePayload.


        :param hostname: The hostname of this ApiSharedStoragePayload.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this ApiSharedStoragePayload.  # noqa: E501


        :return: The id of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiSharedStoragePayload.


        :param id: The id of this ApiSharedStoragePayload.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def invisible_compute_controllers(self):
        """Gets the invisible_compute_controllers of this ApiSharedStoragePayload.  # noqa: E501


        :return: The invisible_compute_controllers of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: list[ApiComputeHardwarePropertiesPayload]
        """
        return self._invisible_compute_controllers

    @invisible_compute_controllers.setter
    def invisible_compute_controllers(self, invisible_compute_controllers):
        """Sets the invisible_compute_controllers of this ApiSharedStoragePayload.


        :param invisible_compute_controllers: The invisible_compute_controllers of this ApiSharedStoragePayload.  # noqa: E501
        :type: list[ApiComputeHardwarePropertiesPayload]
        """

        self._invisible_compute_controllers = invisible_compute_controllers

    @property
    def password(self):
        """Gets the password of this ApiSharedStoragePayload.  # noqa: E501


        :return: The password of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApiSharedStoragePayload.


        :param password: The password of this ApiSharedStoragePayload.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this ApiSharedStoragePayload.  # noqa: E501


        :return: The port of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ApiSharedStoragePayload.


        :param port: The port of this ApiSharedStoragePayload.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def share_name(self):
        """Gets the share_name of this ApiSharedStoragePayload.  # noqa: E501


        :return: The share_name of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: str
        """
        return self._share_name

    @share_name.setter
    def share_name(self, share_name):
        """Sets the share_name of this ApiSharedStoragePayload.


        :param share_name: The share_name of this ApiSharedStoragePayload.  # noqa: E501
        :type: str
        """

        self._share_name = share_name

    @property
    def storage_available(self):
        """Gets the storage_available of this ApiSharedStoragePayload.  # noqa: E501


        :return: The storage_available of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: int
        """
        return self._storage_available

    @storage_available.setter
    def storage_available(self, storage_available):
        """Sets the storage_available of this ApiSharedStoragePayload.


        :param storage_available: The storage_available of this ApiSharedStoragePayload.  # noqa: E501
        :type: int
        """

        self._storage_available = storage_available

    @property
    def storage_capacity(self):
        """Gets the storage_capacity of this ApiSharedStoragePayload.  # noqa: E501


        :return: The storage_capacity of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: int
        """
        return self._storage_capacity

    @storage_capacity.setter
    def storage_capacity(self, storage_capacity):
        """Sets the storage_capacity of this ApiSharedStoragePayload.


        :param storage_capacity: The storage_capacity of this ApiSharedStoragePayload.  # noqa: E501
        :type: int
        """

        self._storage_capacity = storage_capacity

    @property
    def storage_used(self):
        """Gets the storage_used of this ApiSharedStoragePayload.  # noqa: E501


        :return: The storage_used of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: int
        """
        return self._storage_used

    @storage_used.setter
    def storage_used(self, storage_used):
        """Sets the storage_used of this ApiSharedStoragePayload.


        :param storage_used: The storage_used of this ApiSharedStoragePayload.  # noqa: E501
        :type: int
        """

        self._storage_used = storage_used

    @property
    def tags(self):
        """Gets the tags of this ApiSharedStoragePayload.  # noqa: E501


        :return: The tags of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: list[ApiUiTagPayload]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApiSharedStoragePayload.


        :param tags: The tags of this ApiSharedStoragePayload.  # noqa: E501
        :type: list[ApiUiTagPayload]
        """

        self._tags = tags

    @property
    def target_name(self):
        """Gets the target_name of this ApiSharedStoragePayload.  # noqa: E501


        :return: The target_name of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this ApiSharedStoragePayload.


        :param target_name: The target_name of this ApiSharedStoragePayload.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def type(self):
        """Gets the type of this ApiSharedStoragePayload.  # noqa: E501


        :return: The type of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiSharedStoragePayload.


        :param type: The type of this ApiSharedStoragePayload.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def username(self):
        """Gets the username of this ApiSharedStoragePayload.  # noqa: E501


        :return: The username of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ApiSharedStoragePayload.


        :param username: The username of this ApiSharedStoragePayload.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def visible_compute_controllers(self):
        """Gets the visible_compute_controllers of this ApiSharedStoragePayload.  # noqa: E501


        :return: The visible_compute_controllers of this ApiSharedStoragePayload.  # noqa: E501
        :rtype: list[ApiComputeHardwarePropertiesPayload]
        """
        return self._visible_compute_controllers

    @visible_compute_controllers.setter
    def visible_compute_controllers(self, visible_compute_controllers):
        """Sets the visible_compute_controllers of this ApiSharedStoragePayload.


        :param visible_compute_controllers: The visible_compute_controllers of this ApiSharedStoragePayload.  # noqa: E501
        :type: list[ApiComputeHardwarePropertiesPayload]
        """

        self._visible_compute_controllers = visible_compute_controllers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiSharedStoragePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiSharedStoragePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
