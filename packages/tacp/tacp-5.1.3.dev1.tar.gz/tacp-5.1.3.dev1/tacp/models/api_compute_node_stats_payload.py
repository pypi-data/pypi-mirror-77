#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiComputeNodeStatsPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_utilization': 'int',
        'memory_utilization': 'int',
        'network_bandwidth_read_bytes_per_second': 'int',
        'network_bandwidth_write_bytes_per_second': 'int',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'cpu_utilization': 'cpuUtilization',
        'memory_utilization': 'memoryUtilization',
        'network_bandwidth_read_bytes_per_second': 'networkBandwidthReadBytesPerSecond',
        'network_bandwidth_write_bytes_per_second': 'networkBandwidthWriteBytesPerSecond',
        'timestamp': 'timestamp'
    }

    def __init__(self, cpu_utilization=None, memory_utilization=None, network_bandwidth_read_bytes_per_second=None, network_bandwidth_write_bytes_per_second=None, timestamp=None):  # noqa: E501
        """ApiComputeNodeStatsPayload - a model defined in Swagger"""  # noqa: E501
        self._cpu_utilization = None
        self._memory_utilization = None
        self._network_bandwidth_read_bytes_per_second = None
        self._network_bandwidth_write_bytes_per_second = None
        self._timestamp = None
        self.discriminator = None
        if cpu_utilization is not None:
            self.cpu_utilization = cpu_utilization
        if memory_utilization is not None:
            self.memory_utilization = memory_utilization
        if network_bandwidth_read_bytes_per_second is not None:
            self.network_bandwidth_read_bytes_per_second = network_bandwidth_read_bytes_per_second
        if network_bandwidth_write_bytes_per_second is not None:
            self.network_bandwidth_write_bytes_per_second = network_bandwidth_write_bytes_per_second
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def cpu_utilization(self):
        """Gets the cpu_utilization of this ApiComputeNodeStatsPayload.  # noqa: E501


        :return: The cpu_utilization of this ApiComputeNodeStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._cpu_utilization

    @cpu_utilization.setter
    def cpu_utilization(self, cpu_utilization):
        """Sets the cpu_utilization of this ApiComputeNodeStatsPayload.


        :param cpu_utilization: The cpu_utilization of this ApiComputeNodeStatsPayload.  # noqa: E501
        :type: int
        """

        self._cpu_utilization = cpu_utilization

    @property
    def memory_utilization(self):
        """Gets the memory_utilization of this ApiComputeNodeStatsPayload.  # noqa: E501


        :return: The memory_utilization of this ApiComputeNodeStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._memory_utilization

    @memory_utilization.setter
    def memory_utilization(self, memory_utilization):
        """Sets the memory_utilization of this ApiComputeNodeStatsPayload.


        :param memory_utilization: The memory_utilization of this ApiComputeNodeStatsPayload.  # noqa: E501
        :type: int
        """

        self._memory_utilization = memory_utilization

    @property
    def network_bandwidth_read_bytes_per_second(self):
        """Gets the network_bandwidth_read_bytes_per_second of this ApiComputeNodeStatsPayload.  # noqa: E501


        :return: The network_bandwidth_read_bytes_per_second of this ApiComputeNodeStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._network_bandwidth_read_bytes_per_second

    @network_bandwidth_read_bytes_per_second.setter
    def network_bandwidth_read_bytes_per_second(self, network_bandwidth_read_bytes_per_second):
        """Sets the network_bandwidth_read_bytes_per_second of this ApiComputeNodeStatsPayload.


        :param network_bandwidth_read_bytes_per_second: The network_bandwidth_read_bytes_per_second of this ApiComputeNodeStatsPayload.  # noqa: E501
        :type: int
        """

        self._network_bandwidth_read_bytes_per_second = network_bandwidth_read_bytes_per_second

    @property
    def network_bandwidth_write_bytes_per_second(self):
        """Gets the network_bandwidth_write_bytes_per_second of this ApiComputeNodeStatsPayload.  # noqa: E501


        :return: The network_bandwidth_write_bytes_per_second of this ApiComputeNodeStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._network_bandwidth_write_bytes_per_second

    @network_bandwidth_write_bytes_per_second.setter
    def network_bandwidth_write_bytes_per_second(self, network_bandwidth_write_bytes_per_second):
        """Sets the network_bandwidth_write_bytes_per_second of this ApiComputeNodeStatsPayload.


        :param network_bandwidth_write_bytes_per_second: The network_bandwidth_write_bytes_per_second of this ApiComputeNodeStatsPayload.  # noqa: E501
        :type: int
        """

        self._network_bandwidth_write_bytes_per_second = network_bandwidth_write_bytes_per_second

    @property
    def timestamp(self):
        """Gets the timestamp of this ApiComputeNodeStatsPayload.  # noqa: E501


        :return: The timestamp of this ApiComputeNodeStatsPayload.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ApiComputeNodeStatsPayload.


        :param timestamp: The timestamp of this ApiComputeNodeStatsPayload.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiComputeNodeStatsPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiComputeNodeStatsPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
