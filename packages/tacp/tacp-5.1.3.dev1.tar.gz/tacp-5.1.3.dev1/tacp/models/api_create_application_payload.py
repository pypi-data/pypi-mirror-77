#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiCreateApplicationPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_group_uuid': 'str',
        'autostart': 'bool',
        'boot_order': 'list[ApiBootOrderPayload]',
        'category_uuid': 'str',
        'datacenter_uuid': 'str',
        'description': 'str',
        'enable_automatic_recovery': 'bool',
        'flash_pool_uuid': 'str',
        'guest_agent_tools_available': 'bool',
        'hardware_assisted_virtualization_enabled': 'bool',
        'memory': 'int',
        'migration_zone_uuid': 'str',
        'name': 'str',
        'networks': 'list[ApiCreateOrEditApplicationNetworkOptionsPayload]',
        'snapshot_uuid': 'str',
        'tags': 'list[ApiUuidPayload]',
        'template_uuid': 'str',
        'vcpus': 'int',
        'vm_mode': 'str',
        'vnics': 'list[ApiAddVnicPayload]'
    }

    attribute_map = {
        'application_group_uuid': 'applicationGroupUuid',
        'autostart': 'autostart',
        'boot_order': 'bootOrder',
        'category_uuid': 'categoryUuid',
        'datacenter_uuid': 'datacenterUuid',
        'description': 'description',
        'enable_automatic_recovery': 'enableAutomaticRecovery',
        'flash_pool_uuid': 'flashPoolUuid',
        'guest_agent_tools_available': 'guestAgentToolsAvailable',
        'hardware_assisted_virtualization_enabled': 'hardwareAssistedVirtualizationEnabled',
        'memory': 'memory',
        'migration_zone_uuid': 'migrationZoneUuid',
        'name': 'name',
        'networks': 'networks',
        'snapshot_uuid': 'snapshotUuid',
        'tags': 'tags',
        'template_uuid': 'templateUuid',
        'vcpus': 'vcpus',
        'vm_mode': 'vmMode',
        'vnics': 'vnics'
    }

    def __init__(self, application_group_uuid=None, autostart=None, boot_order=None, category_uuid=None, datacenter_uuid=None, description=None, enable_automatic_recovery=None, flash_pool_uuid=None, guest_agent_tools_available=None, hardware_assisted_virtualization_enabled=None, memory=None, migration_zone_uuid=None, name=None, networks=None, snapshot_uuid=None, tags=None, template_uuid=None, vcpus=None, vm_mode=None, vnics=None):  # noqa: E501
        """ApiCreateApplicationPayload - a model defined in Swagger"""  # noqa: E501
        self._application_group_uuid = None
        self._autostart = None
        self._boot_order = None
        self._category_uuid = None
        self._datacenter_uuid = None
        self._description = None
        self._enable_automatic_recovery = None
        self._flash_pool_uuid = None
        self._guest_agent_tools_available = None
        self._hardware_assisted_virtualization_enabled = None
        self._memory = None
        self._migration_zone_uuid = None
        self._name = None
        self._networks = None
        self._snapshot_uuid = None
        self._tags = None
        self._template_uuid = None
        self._vcpus = None
        self._vm_mode = None
        self._vnics = None
        self.discriminator = None
        if application_group_uuid is not None:
            self.application_group_uuid = application_group_uuid
        if autostart is not None:
            self.autostart = autostart
        if boot_order is not None:
            self.boot_order = boot_order
        if category_uuid is not None:
            self.category_uuid = category_uuid
        if datacenter_uuid is not None:
            self.datacenter_uuid = datacenter_uuid
        if description is not None:
            self.description = description
        if enable_automatic_recovery is not None:
            self.enable_automatic_recovery = enable_automatic_recovery
        if flash_pool_uuid is not None:
            self.flash_pool_uuid = flash_pool_uuid
        if guest_agent_tools_available is not None:
            self.guest_agent_tools_available = guest_agent_tools_available
        if hardware_assisted_virtualization_enabled is not None:
            self.hardware_assisted_virtualization_enabled = hardware_assisted_virtualization_enabled
        if memory is not None:
            self.memory = memory
        if migration_zone_uuid is not None:
            self.migration_zone_uuid = migration_zone_uuid
        if name is not None:
            self.name = name
        if networks is not None:
            self.networks = networks
        if snapshot_uuid is not None:
            self.snapshot_uuid = snapshot_uuid
        if tags is not None:
            self.tags = tags
        if template_uuid is not None:
            self.template_uuid = template_uuid
        if vcpus is not None:
            self.vcpus = vcpus
        if vm_mode is not None:
            self.vm_mode = vm_mode
        if vnics is not None:
            self.vnics = vnics

    @property
    def application_group_uuid(self):
        """Gets the application_group_uuid of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The application_group_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._application_group_uuid

    @application_group_uuid.setter
    def application_group_uuid(self, application_group_uuid):
        """Sets the application_group_uuid of this ApiCreateApplicationPayload.


        :param application_group_uuid: The application_group_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :type: str
        """

        self._application_group_uuid = application_group_uuid

    @property
    def autostart(self):
        """Gets the autostart of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The autostart of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: bool
        """
        return self._autostart

    @autostart.setter
    def autostart(self, autostart):
        """Sets the autostart of this ApiCreateApplicationPayload.


        :param autostart: The autostart of this ApiCreateApplicationPayload.  # noqa: E501
        :type: bool
        """

        self._autostart = autostart

    @property
    def boot_order(self):
        """Gets the boot_order of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The boot_order of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: list[ApiBootOrderPayload]
        """
        return self._boot_order

    @boot_order.setter
    def boot_order(self, boot_order):
        """Sets the boot_order of this ApiCreateApplicationPayload.


        :param boot_order: The boot_order of this ApiCreateApplicationPayload.  # noqa: E501
        :type: list[ApiBootOrderPayload]
        """

        self._boot_order = boot_order

    @property
    def category_uuid(self):
        """Gets the category_uuid of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The category_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._category_uuid

    @category_uuid.setter
    def category_uuid(self, category_uuid):
        """Sets the category_uuid of this ApiCreateApplicationPayload.


        :param category_uuid: The category_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :type: str
        """

        self._category_uuid = category_uuid

    @property
    def datacenter_uuid(self):
        """Gets the datacenter_uuid of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The datacenter_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._datacenter_uuid

    @datacenter_uuid.setter
    def datacenter_uuid(self, datacenter_uuid):
        """Sets the datacenter_uuid of this ApiCreateApplicationPayload.


        :param datacenter_uuid: The datacenter_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :type: str
        """

        self._datacenter_uuid = datacenter_uuid

    @property
    def description(self):
        """Gets the description of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The description of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiCreateApplicationPayload.


        :param description: The description of this ApiCreateApplicationPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enable_automatic_recovery(self):
        """Gets the enable_automatic_recovery of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The enable_automatic_recovery of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: bool
        """
        return self._enable_automatic_recovery

    @enable_automatic_recovery.setter
    def enable_automatic_recovery(self, enable_automatic_recovery):
        """Sets the enable_automatic_recovery of this ApiCreateApplicationPayload.


        :param enable_automatic_recovery: The enable_automatic_recovery of this ApiCreateApplicationPayload.  # noqa: E501
        :type: bool
        """

        self._enable_automatic_recovery = enable_automatic_recovery

    @property
    def flash_pool_uuid(self):
        """Gets the flash_pool_uuid of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The flash_pool_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._flash_pool_uuid

    @flash_pool_uuid.setter
    def flash_pool_uuid(self, flash_pool_uuid):
        """Sets the flash_pool_uuid of this ApiCreateApplicationPayload.


        :param flash_pool_uuid: The flash_pool_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :type: str
        """

        self._flash_pool_uuid = flash_pool_uuid

    @property
    def guest_agent_tools_available(self):
        """Gets the guest_agent_tools_available of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The guest_agent_tools_available of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: bool
        """
        return self._guest_agent_tools_available

    @guest_agent_tools_available.setter
    def guest_agent_tools_available(self, guest_agent_tools_available):
        """Sets the guest_agent_tools_available of this ApiCreateApplicationPayload.


        :param guest_agent_tools_available: The guest_agent_tools_available of this ApiCreateApplicationPayload.  # noqa: E501
        :type: bool
        """

        self._guest_agent_tools_available = guest_agent_tools_available

    @property
    def hardware_assisted_virtualization_enabled(self):
        """Gets the hardware_assisted_virtualization_enabled of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The hardware_assisted_virtualization_enabled of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: bool
        """
        return self._hardware_assisted_virtualization_enabled

    @hardware_assisted_virtualization_enabled.setter
    def hardware_assisted_virtualization_enabled(self, hardware_assisted_virtualization_enabled):
        """Sets the hardware_assisted_virtualization_enabled of this ApiCreateApplicationPayload.


        :param hardware_assisted_virtualization_enabled: The hardware_assisted_virtualization_enabled of this ApiCreateApplicationPayload.  # noqa: E501
        :type: bool
        """

        self._hardware_assisted_virtualization_enabled = hardware_assisted_virtualization_enabled

    @property
    def memory(self):
        """Gets the memory of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The memory of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ApiCreateApplicationPayload.


        :param memory: The memory of this ApiCreateApplicationPayload.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def migration_zone_uuid(self):
        """Gets the migration_zone_uuid of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The migration_zone_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._migration_zone_uuid

    @migration_zone_uuid.setter
    def migration_zone_uuid(self, migration_zone_uuid):
        """Sets the migration_zone_uuid of this ApiCreateApplicationPayload.


        :param migration_zone_uuid: The migration_zone_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :type: str
        """

        self._migration_zone_uuid = migration_zone_uuid

    @property
    def name(self):
        """Gets the name of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The name of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiCreateApplicationPayload.


        :param name: The name of this ApiCreateApplicationPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def networks(self):
        """Gets the networks of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The networks of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: list[ApiCreateOrEditApplicationNetworkOptionsPayload]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this ApiCreateApplicationPayload.


        :param networks: The networks of this ApiCreateApplicationPayload.  # noqa: E501
        :type: list[ApiCreateOrEditApplicationNetworkOptionsPayload]
        """

        self._networks = networks

    @property
    def snapshot_uuid(self):
        """Gets the snapshot_uuid of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The snapshot_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_uuid

    @snapshot_uuid.setter
    def snapshot_uuid(self, snapshot_uuid):
        """Sets the snapshot_uuid of this ApiCreateApplicationPayload.


        :param snapshot_uuid: The snapshot_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :type: str
        """

        self._snapshot_uuid = snapshot_uuid

    @property
    def tags(self):
        """Gets the tags of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The tags of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: list[ApiUuidPayload]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApiCreateApplicationPayload.


        :param tags: The tags of this ApiCreateApplicationPayload.  # noqa: E501
        :type: list[ApiUuidPayload]
        """

        self._tags = tags

    @property
    def template_uuid(self):
        """Gets the template_uuid of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The template_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._template_uuid

    @template_uuid.setter
    def template_uuid(self, template_uuid):
        """Sets the template_uuid of this ApiCreateApplicationPayload.


        :param template_uuid: The template_uuid of this ApiCreateApplicationPayload.  # noqa: E501
        :type: str
        """

        self._template_uuid = template_uuid

    @property
    def vcpus(self):
        """Gets the vcpus of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The vcpus of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this ApiCreateApplicationPayload.


        :param vcpus: The vcpus of this ApiCreateApplicationPayload.  # noqa: E501
        :type: int
        """

        self._vcpus = vcpus

    @property
    def vm_mode(self):
        """Gets the vm_mode of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The vm_mode of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._vm_mode

    @vm_mode.setter
    def vm_mode(self, vm_mode):
        """Sets the vm_mode of this ApiCreateApplicationPayload.


        :param vm_mode: The vm_mode of this ApiCreateApplicationPayload.  # noqa: E501
        :type: str
        """

        self._vm_mode = vm_mode

    @property
    def vnics(self):
        """Gets the vnics of this ApiCreateApplicationPayload.  # noqa: E501


        :return: The vnics of this ApiCreateApplicationPayload.  # noqa: E501
        :rtype: list[ApiAddVnicPayload]
        """
        return self._vnics

    @vnics.setter
    def vnics(self, vnics):
        """Sets the vnics of this ApiCreateApplicationPayload.


        :param vnics: The vnics of this ApiCreateApplicationPayload.  # noqa: E501
        :type: list[ApiAddVnicPayload]
        """

        self._vnics = vnics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiCreateApplicationPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiCreateApplicationPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
