#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiSnapshotBootOrderPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_order': 'list[ApiBootOrderPayload]',
        'created_timestamp': 'datetime',
        'disaster_recovery': 'ApiSnapshotDisasterRecoveryInformationPayload',
        'generated': 'str',
        'name': 'str',
        'size': 'int',
        'type': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'boot_order': 'bootOrder',
        'created_timestamp': 'createdTimestamp',
        'disaster_recovery': 'disasterRecovery',
        'generated': 'generated',
        'name': 'name',
        'size': 'size',
        'type': 'type',
        'uuid': 'uuid'
    }

    def __init__(self, boot_order=None, created_timestamp=None, disaster_recovery=None, generated=None, name=None, size=None, type=None, uuid=None):  # noqa: E501
        """ApiSnapshotBootOrderPayload - a model defined in Swagger"""  # noqa: E501
        self._boot_order = None
        self._created_timestamp = None
        self._disaster_recovery = None
        self._generated = None
        self._name = None
        self._size = None
        self._type = None
        self._uuid = None
        self.discriminator = None
        if boot_order is not None:
            self.boot_order = boot_order
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if disaster_recovery is not None:
            self.disaster_recovery = disaster_recovery
        if generated is not None:
            self.generated = generated
        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid

    @property
    def boot_order(self):
        """Gets the boot_order of this ApiSnapshotBootOrderPayload.  # noqa: E501


        :return: The boot_order of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :rtype: list[ApiBootOrderPayload]
        """
        return self._boot_order

    @boot_order.setter
    def boot_order(self, boot_order):
        """Sets the boot_order of this ApiSnapshotBootOrderPayload.


        :param boot_order: The boot_order of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :type: list[ApiBootOrderPayload]
        """

        self._boot_order = boot_order

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this ApiSnapshotBootOrderPayload.  # noqa: E501


        :return: The created_timestamp of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this ApiSnapshotBootOrderPayload.


        :param created_timestamp: The created_timestamp of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :type: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def disaster_recovery(self):
        """Gets the disaster_recovery of this ApiSnapshotBootOrderPayload.  # noqa: E501


        :return: The disaster_recovery of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :rtype: ApiSnapshotDisasterRecoveryInformationPayload
        """
        return self._disaster_recovery

    @disaster_recovery.setter
    def disaster_recovery(self, disaster_recovery):
        """Sets the disaster_recovery of this ApiSnapshotBootOrderPayload.


        :param disaster_recovery: The disaster_recovery of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :type: ApiSnapshotDisasterRecoveryInformationPayload
        """

        self._disaster_recovery = disaster_recovery

    @property
    def generated(self):
        """Gets the generated of this ApiSnapshotBootOrderPayload.  # noqa: E501


        :return: The generated of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :rtype: str
        """
        return self._generated

    @generated.setter
    def generated(self, generated):
        """Sets the generated of this ApiSnapshotBootOrderPayload.


        :param generated: The generated of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :type: str
        """

        self._generated = generated

    @property
    def name(self):
        """Gets the name of this ApiSnapshotBootOrderPayload.  # noqa: E501


        :return: The name of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiSnapshotBootOrderPayload.


        :param name: The name of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this ApiSnapshotBootOrderPayload.  # noqa: E501


        :return: The size of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ApiSnapshotBootOrderPayload.


        :param size: The size of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def type(self):
        """Gets the type of this ApiSnapshotBootOrderPayload.  # noqa: E501


        :return: The type of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiSnapshotBootOrderPayload.


        :param type: The type of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this ApiSnapshotBootOrderPayload.  # noqa: E501


        :return: The uuid of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApiSnapshotBootOrderPayload.


        :param uuid: The uuid of this ApiSnapshotBootOrderPayload.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiSnapshotBootOrderPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiSnapshotBootOrderPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
