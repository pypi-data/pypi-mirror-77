#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiVnetDhcpServicePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain_name': 'str',
        'end_ip_range': 'str',
        'lease_time': 'int',
        'primary_dns_server_ip_address': 'str',
        'secondary_dns_server_ip_address': 'str',
        'start_ip_range': 'str',
        'static_bindings': 'list[ApiStaticBindingRulePayload]'
    }

    attribute_map = {
        'domain_name': 'domainName',
        'end_ip_range': 'endIpRange',
        'lease_time': 'leaseTime',
        'primary_dns_server_ip_address': 'primaryDnsServerIpAddress',
        'secondary_dns_server_ip_address': 'secondaryDnsServerIpAddress',
        'start_ip_range': 'startIpRange',
        'static_bindings': 'staticBindings'
    }

    def __init__(self, domain_name=None, end_ip_range=None, lease_time=None, primary_dns_server_ip_address=None, secondary_dns_server_ip_address=None, start_ip_range=None, static_bindings=None):  # noqa: E501
        """ApiVnetDhcpServicePayload - a model defined in Swagger"""  # noqa: E501
        self._domain_name = None
        self._end_ip_range = None
        self._lease_time = None
        self._primary_dns_server_ip_address = None
        self._secondary_dns_server_ip_address = None
        self._start_ip_range = None
        self._static_bindings = None
        self.discriminator = None
        if domain_name is not None:
            self.domain_name = domain_name
        if end_ip_range is not None:
            self.end_ip_range = end_ip_range
        if lease_time is not None:
            self.lease_time = lease_time
        if primary_dns_server_ip_address is not None:
            self.primary_dns_server_ip_address = primary_dns_server_ip_address
        if secondary_dns_server_ip_address is not None:
            self.secondary_dns_server_ip_address = secondary_dns_server_ip_address
        if start_ip_range is not None:
            self.start_ip_range = start_ip_range
        if static_bindings is not None:
            self.static_bindings = static_bindings

    @property
    def domain_name(self):
        """Gets the domain_name of this ApiVnetDhcpServicePayload.  # noqa: E501


        :return: The domain_name of this ApiVnetDhcpServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this ApiVnetDhcpServicePayload.


        :param domain_name: The domain_name of this ApiVnetDhcpServicePayload.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def end_ip_range(self):
        """Gets the end_ip_range of this ApiVnetDhcpServicePayload.  # noqa: E501


        :return: The end_ip_range of this ApiVnetDhcpServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._end_ip_range

    @end_ip_range.setter
    def end_ip_range(self, end_ip_range):
        """Sets the end_ip_range of this ApiVnetDhcpServicePayload.


        :param end_ip_range: The end_ip_range of this ApiVnetDhcpServicePayload.  # noqa: E501
        :type: str
        """

        self._end_ip_range = end_ip_range

    @property
    def lease_time(self):
        """Gets the lease_time of this ApiVnetDhcpServicePayload.  # noqa: E501


        :return: The lease_time of this ApiVnetDhcpServicePayload.  # noqa: E501
        :rtype: int
        """
        return self._lease_time

    @lease_time.setter
    def lease_time(self, lease_time):
        """Sets the lease_time of this ApiVnetDhcpServicePayload.


        :param lease_time: The lease_time of this ApiVnetDhcpServicePayload.  # noqa: E501
        :type: int
        """

        self._lease_time = lease_time

    @property
    def primary_dns_server_ip_address(self):
        """Gets the primary_dns_server_ip_address of this ApiVnetDhcpServicePayload.  # noqa: E501


        :return: The primary_dns_server_ip_address of this ApiVnetDhcpServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._primary_dns_server_ip_address

    @primary_dns_server_ip_address.setter
    def primary_dns_server_ip_address(self, primary_dns_server_ip_address):
        """Sets the primary_dns_server_ip_address of this ApiVnetDhcpServicePayload.


        :param primary_dns_server_ip_address: The primary_dns_server_ip_address of this ApiVnetDhcpServicePayload.  # noqa: E501
        :type: str
        """

        self._primary_dns_server_ip_address = primary_dns_server_ip_address

    @property
    def secondary_dns_server_ip_address(self):
        """Gets the secondary_dns_server_ip_address of this ApiVnetDhcpServicePayload.  # noqa: E501


        :return: The secondary_dns_server_ip_address of this ApiVnetDhcpServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._secondary_dns_server_ip_address

    @secondary_dns_server_ip_address.setter
    def secondary_dns_server_ip_address(self, secondary_dns_server_ip_address):
        """Sets the secondary_dns_server_ip_address of this ApiVnetDhcpServicePayload.


        :param secondary_dns_server_ip_address: The secondary_dns_server_ip_address of this ApiVnetDhcpServicePayload.  # noqa: E501
        :type: str
        """

        self._secondary_dns_server_ip_address = secondary_dns_server_ip_address

    @property
    def start_ip_range(self):
        """Gets the start_ip_range of this ApiVnetDhcpServicePayload.  # noqa: E501


        :return: The start_ip_range of this ApiVnetDhcpServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._start_ip_range

    @start_ip_range.setter
    def start_ip_range(self, start_ip_range):
        """Sets the start_ip_range of this ApiVnetDhcpServicePayload.


        :param start_ip_range: The start_ip_range of this ApiVnetDhcpServicePayload.  # noqa: E501
        :type: str
        """

        self._start_ip_range = start_ip_range

    @property
    def static_bindings(self):
        """Gets the static_bindings of this ApiVnetDhcpServicePayload.  # noqa: E501


        :return: The static_bindings of this ApiVnetDhcpServicePayload.  # noqa: E501
        :rtype: list[ApiStaticBindingRulePayload]
        """
        return self._static_bindings

    @static_bindings.setter
    def static_bindings(self, static_bindings):
        """Sets the static_bindings of this ApiVnetDhcpServicePayload.


        :param static_bindings: The static_bindings of this ApiVnetDhcpServicePayload.  # noqa: E501
        :type: list[ApiStaticBindingRulePayload]
        """

        self._static_bindings = static_bindings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiVnetDhcpServicePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiVnetDhcpServicePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
