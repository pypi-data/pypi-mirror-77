#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiDisasterRecoveryPolicyPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_flash_pool_uuid': 'str',
        'enabled': 'bool',
        'retention_count': 'ApiDisasterRecoveryRetentionCountPayload'
    }

    attribute_map = {
        'destination_flash_pool_uuid': 'destinationFlashPoolUuid',
        'enabled': 'enabled',
        'retention_count': 'retentionCount'
    }

    def __init__(self, destination_flash_pool_uuid=None, enabled=None, retention_count=None):  # noqa: E501
        """ApiDisasterRecoveryPolicyPayload - a model defined in Swagger"""  # noqa: E501
        self._destination_flash_pool_uuid = None
        self._enabled = None
        self._retention_count = None
        self.discriminator = None
        if destination_flash_pool_uuid is not None:
            self.destination_flash_pool_uuid = destination_flash_pool_uuid
        if enabled is not None:
            self.enabled = enabled
        if retention_count is not None:
            self.retention_count = retention_count

    @property
    def destination_flash_pool_uuid(self):
        """Gets the destination_flash_pool_uuid of this ApiDisasterRecoveryPolicyPayload.  # noqa: E501


        :return: The destination_flash_pool_uuid of this ApiDisasterRecoveryPolicyPayload.  # noqa: E501
        :rtype: str
        """
        return self._destination_flash_pool_uuid

    @destination_flash_pool_uuid.setter
    def destination_flash_pool_uuid(self, destination_flash_pool_uuid):
        """Sets the destination_flash_pool_uuid of this ApiDisasterRecoveryPolicyPayload.


        :param destination_flash_pool_uuid: The destination_flash_pool_uuid of this ApiDisasterRecoveryPolicyPayload.  # noqa: E501
        :type: str
        """

        self._destination_flash_pool_uuid = destination_flash_pool_uuid

    @property
    def enabled(self):
        """Gets the enabled of this ApiDisasterRecoveryPolicyPayload.  # noqa: E501


        :return: The enabled of this ApiDisasterRecoveryPolicyPayload.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApiDisasterRecoveryPolicyPayload.


        :param enabled: The enabled of this ApiDisasterRecoveryPolicyPayload.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def retention_count(self):
        """Gets the retention_count of this ApiDisasterRecoveryPolicyPayload.  # noqa: E501


        :return: The retention_count of this ApiDisasterRecoveryPolicyPayload.  # noqa: E501
        :rtype: ApiDisasterRecoveryRetentionCountPayload
        """
        return self._retention_count

    @retention_count.setter
    def retention_count(self, retention_count):
        """Sets the retention_count of this ApiDisasterRecoveryPolicyPayload.


        :param retention_count: The retention_count of this ApiDisasterRecoveryPolicyPayload.  # noqa: E501
        :type: ApiDisasterRecoveryRetentionCountPayload
        """

        self._retention_count = retention_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiDisasterRecoveryPolicyPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDisasterRecoveryPolicyPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
