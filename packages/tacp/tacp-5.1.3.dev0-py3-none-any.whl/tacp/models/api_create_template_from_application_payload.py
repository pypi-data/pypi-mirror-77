#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiCreateTemplateFromApplicationPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_uuid': 'str',
        'boot_order': 'list[ApiBootOrderPayload]',
        'custom_windows_sysprep_xml': 'str',
        'datacenter_uuid': 'str',
        'description': 'str',
        'memory': 'int',
        'name': 'str',
        'run_sys_prep': 'bool',
        'vcpus': 'int',
        'vm_mode': 'str'
    }

    attribute_map = {
        'application_uuid': 'applicationUuid',
        'boot_order': 'bootOrder',
        'custom_windows_sysprep_xml': 'customWindowsSysprepXml',
        'datacenter_uuid': 'datacenterUuid',
        'description': 'description',
        'memory': 'memory',
        'name': 'name',
        'run_sys_prep': 'runSysPrep',
        'vcpus': 'vcpus',
        'vm_mode': 'vmMode'
    }

    def __init__(self, application_uuid=None, boot_order=None, custom_windows_sysprep_xml=None, datacenter_uuid=None, description=None, memory=None, name=None, run_sys_prep=None, vcpus=None, vm_mode=None):  # noqa: E501
        """ApiCreateTemplateFromApplicationPayload - a model defined in Swagger"""  # noqa: E501
        self._application_uuid = None
        self._boot_order = None
        self._custom_windows_sysprep_xml = None
        self._datacenter_uuid = None
        self._description = None
        self._memory = None
        self._name = None
        self._run_sys_prep = None
        self._vcpus = None
        self._vm_mode = None
        self.discriminator = None
        if application_uuid is not None:
            self.application_uuid = application_uuid
        if boot_order is not None:
            self.boot_order = boot_order
        if custom_windows_sysprep_xml is not None:
            self.custom_windows_sysprep_xml = custom_windows_sysprep_xml
        if datacenter_uuid is not None:
            self.datacenter_uuid = datacenter_uuid
        if description is not None:
            self.description = description
        if memory is not None:
            self.memory = memory
        if name is not None:
            self.name = name
        if run_sys_prep is not None:
            self.run_sys_prep = run_sys_prep
        if vcpus is not None:
            self.vcpus = vcpus
        if vm_mode is not None:
            self.vm_mode = vm_mode

    @property
    def application_uuid(self):
        """Gets the application_uuid of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501


        :return: The application_uuid of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._application_uuid

    @application_uuid.setter
    def application_uuid(self, application_uuid):
        """Sets the application_uuid of this ApiCreateTemplateFromApplicationPayload.


        :param application_uuid: The application_uuid of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :type: str
        """

        self._application_uuid = application_uuid

    @property
    def boot_order(self):
        """Gets the boot_order of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501


        :return: The boot_order of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :rtype: list[ApiBootOrderPayload]
        """
        return self._boot_order

    @boot_order.setter
    def boot_order(self, boot_order):
        """Sets the boot_order of this ApiCreateTemplateFromApplicationPayload.


        :param boot_order: The boot_order of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :type: list[ApiBootOrderPayload]
        """

        self._boot_order = boot_order

    @property
    def custom_windows_sysprep_xml(self):
        """Gets the custom_windows_sysprep_xml of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501


        :return: The custom_windows_sysprep_xml of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._custom_windows_sysprep_xml

    @custom_windows_sysprep_xml.setter
    def custom_windows_sysprep_xml(self, custom_windows_sysprep_xml):
        """Sets the custom_windows_sysprep_xml of this ApiCreateTemplateFromApplicationPayload.


        :param custom_windows_sysprep_xml: The custom_windows_sysprep_xml of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :type: str
        """

        self._custom_windows_sysprep_xml = custom_windows_sysprep_xml

    @property
    def datacenter_uuid(self):
        """Gets the datacenter_uuid of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501


        :return: The datacenter_uuid of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._datacenter_uuid

    @datacenter_uuid.setter
    def datacenter_uuid(self, datacenter_uuid):
        """Sets the datacenter_uuid of this ApiCreateTemplateFromApplicationPayload.


        :param datacenter_uuid: The datacenter_uuid of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :type: str
        """

        self._datacenter_uuid = datacenter_uuid

    @property
    def description(self):
        """Gets the description of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501


        :return: The description of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiCreateTemplateFromApplicationPayload.


        :param description: The description of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def memory(self):
        """Gets the memory of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501


        :return: The memory of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ApiCreateTemplateFromApplicationPayload.


        :param memory: The memory of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501


        :return: The name of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiCreateTemplateFromApplicationPayload.


        :param name: The name of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def run_sys_prep(self):
        """Gets the run_sys_prep of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501


        :return: The run_sys_prep of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :rtype: bool
        """
        return self._run_sys_prep

    @run_sys_prep.setter
    def run_sys_prep(self, run_sys_prep):
        """Sets the run_sys_prep of this ApiCreateTemplateFromApplicationPayload.


        :param run_sys_prep: The run_sys_prep of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :type: bool
        """

        self._run_sys_prep = run_sys_prep

    @property
    def vcpus(self):
        """Gets the vcpus of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501


        :return: The vcpus of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this ApiCreateTemplateFromApplicationPayload.


        :param vcpus: The vcpus of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :type: int
        """

        self._vcpus = vcpus

    @property
    def vm_mode(self):
        """Gets the vm_mode of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501


        :return: The vm_mode of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :rtype: str
        """
        return self._vm_mode

    @vm_mode.setter
    def vm_mode(self, vm_mode):
        """Sets the vm_mode of this ApiCreateTemplateFromApplicationPayload.


        :param vm_mode: The vm_mode of this ApiCreateTemplateFromApplicationPayload.  # noqa: E501
        :type: str
        """

        self._vm_mode = vm_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiCreateTemplateFromApplicationPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiCreateTemplateFromApplicationPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
