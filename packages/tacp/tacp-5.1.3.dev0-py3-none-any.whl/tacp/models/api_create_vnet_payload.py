#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiCreateVnetPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'automatic_deployment': 'bool',
        'default_gateway': 'str',
        'deploy_now': 'bool',
        'dhcp_service': 'ApiVnetDhcpServicePayload',
        'firewall_override_uuid': 'str',
        'firewall_profile_uuid': 'str',
        'name': 'str',
        'network_address': 'str',
        'nfv_instance': 'ApiCreateApplicationPayload',
        'routing_service': 'ApiVnetRoutingServicePayload',
        'subnet_mask': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'automatic_deployment': 'automaticDeployment',
        'default_gateway': 'defaultGateway',
        'deploy_now': 'deployNow',
        'dhcp_service': 'dhcpService',
        'firewall_override_uuid': 'firewallOverrideUuid',
        'firewall_profile_uuid': 'firewallProfileUuid',
        'name': 'name',
        'network_address': 'networkAddress',
        'nfv_instance': 'nfvInstance',
        'routing_service': 'routingService',
        'subnet_mask': 'subnetMask',
        'uuid': 'uuid'
    }

    def __init__(self, automatic_deployment=None, default_gateway=None, deploy_now=None, dhcp_service=None, firewall_override_uuid=None, firewall_profile_uuid=None, name=None, network_address=None, nfv_instance=None, routing_service=None, subnet_mask=None, uuid=None):  # noqa: E501
        """ApiCreateVnetPayload - a model defined in Swagger"""  # noqa: E501
        self._automatic_deployment = None
        self._default_gateway = None
        self._deploy_now = None
        self._dhcp_service = None
        self._firewall_override_uuid = None
        self._firewall_profile_uuid = None
        self._name = None
        self._network_address = None
        self._nfv_instance = None
        self._routing_service = None
        self._subnet_mask = None
        self._uuid = None
        self.discriminator = None
        if automatic_deployment is not None:
            self.automatic_deployment = automatic_deployment
        if default_gateway is not None:
            self.default_gateway = default_gateway
        if deploy_now is not None:
            self.deploy_now = deploy_now
        if dhcp_service is not None:
            self.dhcp_service = dhcp_service
        if firewall_override_uuid is not None:
            self.firewall_override_uuid = firewall_override_uuid
        if firewall_profile_uuid is not None:
            self.firewall_profile_uuid = firewall_profile_uuid
        if name is not None:
            self.name = name
        if network_address is not None:
            self.network_address = network_address
        if nfv_instance is not None:
            self.nfv_instance = nfv_instance
        if routing_service is not None:
            self.routing_service = routing_service
        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if uuid is not None:
            self.uuid = uuid

    @property
    def automatic_deployment(self):
        """Gets the automatic_deployment of this ApiCreateVnetPayload.  # noqa: E501


        :return: The automatic_deployment of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_deployment

    @automatic_deployment.setter
    def automatic_deployment(self, automatic_deployment):
        """Sets the automatic_deployment of this ApiCreateVnetPayload.


        :param automatic_deployment: The automatic_deployment of this ApiCreateVnetPayload.  # noqa: E501
        :type: bool
        """

        self._automatic_deployment = automatic_deployment

    @property
    def default_gateway(self):
        """Gets the default_gateway of this ApiCreateVnetPayload.  # noqa: E501


        :return: The default_gateway of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: str
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this ApiCreateVnetPayload.


        :param default_gateway: The default_gateway of this ApiCreateVnetPayload.  # noqa: E501
        :type: str
        """

        self._default_gateway = default_gateway

    @property
    def deploy_now(self):
        """Gets the deploy_now of this ApiCreateVnetPayload.  # noqa: E501


        :return: The deploy_now of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: bool
        """
        return self._deploy_now

    @deploy_now.setter
    def deploy_now(self, deploy_now):
        """Sets the deploy_now of this ApiCreateVnetPayload.


        :param deploy_now: The deploy_now of this ApiCreateVnetPayload.  # noqa: E501
        :type: bool
        """

        self._deploy_now = deploy_now

    @property
    def dhcp_service(self):
        """Gets the dhcp_service of this ApiCreateVnetPayload.  # noqa: E501


        :return: The dhcp_service of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: ApiVnetDhcpServicePayload
        """
        return self._dhcp_service

    @dhcp_service.setter
    def dhcp_service(self, dhcp_service):
        """Sets the dhcp_service of this ApiCreateVnetPayload.


        :param dhcp_service: The dhcp_service of this ApiCreateVnetPayload.  # noqa: E501
        :type: ApiVnetDhcpServicePayload
        """

        self._dhcp_service = dhcp_service

    @property
    def firewall_override_uuid(self):
        """Gets the firewall_override_uuid of this ApiCreateVnetPayload.  # noqa: E501


        :return: The firewall_override_uuid of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: str
        """
        return self._firewall_override_uuid

    @firewall_override_uuid.setter
    def firewall_override_uuid(self, firewall_override_uuid):
        """Sets the firewall_override_uuid of this ApiCreateVnetPayload.


        :param firewall_override_uuid: The firewall_override_uuid of this ApiCreateVnetPayload.  # noqa: E501
        :type: str
        """

        self._firewall_override_uuid = firewall_override_uuid

    @property
    def firewall_profile_uuid(self):
        """Gets the firewall_profile_uuid of this ApiCreateVnetPayload.  # noqa: E501


        :return: The firewall_profile_uuid of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: str
        """
        return self._firewall_profile_uuid

    @firewall_profile_uuid.setter
    def firewall_profile_uuid(self, firewall_profile_uuid):
        """Sets the firewall_profile_uuid of this ApiCreateVnetPayload.


        :param firewall_profile_uuid: The firewall_profile_uuid of this ApiCreateVnetPayload.  # noqa: E501
        :type: str
        """

        self._firewall_profile_uuid = firewall_profile_uuid

    @property
    def name(self):
        """Gets the name of this ApiCreateVnetPayload.  # noqa: E501


        :return: The name of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiCreateVnetPayload.


        :param name: The name of this ApiCreateVnetPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_address(self):
        """Gets the network_address of this ApiCreateVnetPayload.  # noqa: E501


        :return: The network_address of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: str
        """
        return self._network_address

    @network_address.setter
    def network_address(self, network_address):
        """Sets the network_address of this ApiCreateVnetPayload.


        :param network_address: The network_address of this ApiCreateVnetPayload.  # noqa: E501
        :type: str
        """

        self._network_address = network_address

    @property
    def nfv_instance(self):
        """Gets the nfv_instance of this ApiCreateVnetPayload.  # noqa: E501


        :return: The nfv_instance of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: ApiCreateApplicationPayload
        """
        return self._nfv_instance

    @nfv_instance.setter
    def nfv_instance(self, nfv_instance):
        """Sets the nfv_instance of this ApiCreateVnetPayload.


        :param nfv_instance: The nfv_instance of this ApiCreateVnetPayload.  # noqa: E501
        :type: ApiCreateApplicationPayload
        """

        self._nfv_instance = nfv_instance

    @property
    def routing_service(self):
        """Gets the routing_service of this ApiCreateVnetPayload.  # noqa: E501


        :return: The routing_service of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: ApiVnetRoutingServicePayload
        """
        return self._routing_service

    @routing_service.setter
    def routing_service(self, routing_service):
        """Sets the routing_service of this ApiCreateVnetPayload.


        :param routing_service: The routing_service of this ApiCreateVnetPayload.  # noqa: E501
        :type: ApiVnetRoutingServicePayload
        """

        self._routing_service = routing_service

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this ApiCreateVnetPayload.  # noqa: E501


        :return: The subnet_mask of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this ApiCreateVnetPayload.


        :param subnet_mask: The subnet_mask of this ApiCreateVnetPayload.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def uuid(self):
        """Gets the uuid of this ApiCreateVnetPayload.  # noqa: E501


        :return: The uuid of this ApiCreateVnetPayload.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApiCreateVnetPayload.


        :param uuid: The uuid of this ApiCreateVnetPayload.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiCreateVnetPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiCreateVnetPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
