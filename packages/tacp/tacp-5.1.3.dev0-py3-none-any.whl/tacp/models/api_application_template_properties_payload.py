#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiApplicationTemplatePropertiesPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_order': 'list[ApiBootOrderPayload]',
        'cpu': 'int',
        'datacenter_uuid': 'str',
        'date_created': 'datetime',
        'description': 'str',
        'memory': 'int',
        'name': 'str',
        'operating_system': 'ApiApplicationTemplateOperatingSystemPayload',
        'size': 'int',
        'uuid': 'str',
        'version': 'str',
        'vm_mode': 'str'
    }

    attribute_map = {
        'boot_order': 'bootOrder',
        'cpu': 'cpu',
        'datacenter_uuid': 'datacenterUuid',
        'date_created': 'dateCreated',
        'description': 'description',
        'memory': 'memory',
        'name': 'name',
        'operating_system': 'operatingSystem',
        'size': 'size',
        'uuid': 'uuid',
        'version': 'version',
        'vm_mode': 'vmMode'
    }

    def __init__(self, boot_order=None, cpu=None, datacenter_uuid=None, date_created=None, description=None, memory=None, name=None, operating_system=None, size=None, uuid=None, version=None, vm_mode=None):  # noqa: E501
        """ApiApplicationTemplatePropertiesPayload - a model defined in Swagger"""  # noqa: E501
        self._boot_order = None
        self._cpu = None
        self._datacenter_uuid = None
        self._date_created = None
        self._description = None
        self._memory = None
        self._name = None
        self._operating_system = None
        self._size = None
        self._uuid = None
        self._version = None
        self._vm_mode = None
        self.discriminator = None
        if boot_order is not None:
            self.boot_order = boot_order
        if cpu is not None:
            self.cpu = cpu
        if datacenter_uuid is not None:
            self.datacenter_uuid = datacenter_uuid
        if date_created is not None:
            self.date_created = date_created
        if description is not None:
            self.description = description
        if memory is not None:
            self.memory = memory
        if name is not None:
            self.name = name
        if operating_system is not None:
            self.operating_system = operating_system
        if size is not None:
            self.size = size
        if uuid is not None:
            self.uuid = uuid
        if version is not None:
            self.version = version
        if vm_mode is not None:
            self.vm_mode = vm_mode

    @property
    def boot_order(self):
        """Gets the boot_order of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The boot_order of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: list[ApiBootOrderPayload]
        """
        return self._boot_order

    @boot_order.setter
    def boot_order(self, boot_order):
        """Sets the boot_order of this ApiApplicationTemplatePropertiesPayload.


        :param boot_order: The boot_order of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: list[ApiBootOrderPayload]
        """

        self._boot_order = boot_order

    @property
    def cpu(self):
        """Gets the cpu of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The cpu of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this ApiApplicationTemplatePropertiesPayload.


        :param cpu: The cpu of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._cpu = cpu

    @property
    def datacenter_uuid(self):
        """Gets the datacenter_uuid of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The datacenter_uuid of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._datacenter_uuid

    @datacenter_uuid.setter
    def datacenter_uuid(self, datacenter_uuid):
        """Sets the datacenter_uuid of this ApiApplicationTemplatePropertiesPayload.


        :param datacenter_uuid: The datacenter_uuid of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._datacenter_uuid = datacenter_uuid

    @property
    def date_created(self):
        """Gets the date_created of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The date_created of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ApiApplicationTemplatePropertiesPayload.


        :param date_created: The date_created of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def description(self):
        """Gets the description of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The description of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiApplicationTemplatePropertiesPayload.


        :param description: The description of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def memory(self):
        """Gets the memory of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The memory of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ApiApplicationTemplatePropertiesPayload.


        :param memory: The memory of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The name of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiApplicationTemplatePropertiesPayload.


        :param name: The name of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operating_system(self):
        """Gets the operating_system of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The operating_system of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: ApiApplicationTemplateOperatingSystemPayload
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this ApiApplicationTemplatePropertiesPayload.


        :param operating_system: The operating_system of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: ApiApplicationTemplateOperatingSystemPayload
        """

        self._operating_system = operating_system

    @property
    def size(self):
        """Gets the size of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The size of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ApiApplicationTemplatePropertiesPayload.


        :param size: The size of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def uuid(self):
        """Gets the uuid of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The uuid of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApiApplicationTemplatePropertiesPayload.


        :param uuid: The uuid of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def version(self):
        """Gets the version of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The version of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ApiApplicationTemplatePropertiesPayload.


        :param version: The version of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def vm_mode(self):
        """Gets the vm_mode of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501


        :return: The vm_mode of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._vm_mode

    @vm_mode.setter
    def vm_mode(self, vm_mode):
        """Sets the vm_mode of this ApiApplicationTemplatePropertiesPayload.


        :param vm_mode: The vm_mode of this ApiApplicationTemplatePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._vm_mode = vm_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiApplicationTemplatePropertiesPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiApplicationTemplatePropertiesPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
