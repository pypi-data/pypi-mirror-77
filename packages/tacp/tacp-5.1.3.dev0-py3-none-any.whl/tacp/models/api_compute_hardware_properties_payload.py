#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiComputeHardwarePropertiesPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_in_progress': 'bool',
        'admin_password_for_physical_access': 'str',
        'category_id': 'int',
        'category_name': 'str',
        'chassis_location_name': 'str',
        'connected_to_management': 'bool',
        'cos_version': 'str',
        'cpu_temperature_data': 'list[ApiCpuTemperaturePayload]',
        'cpus': 'int',
        'date_added': 'int',
        'description': 'str',
        'dhcp_wan_ip': 'str',
        'firmware_update_available': 'bool',
        'firmware_update_in_progress': 'bool',
        'firmware_versions': 'dict(str, str)',
        'host_tags': 'list[ApiUiTagPayload]',
        'id': 'int',
        'in_maintenance': 'bool',
        'last_host_in_migration_zone': 'bool',
        'memory_bytes': 'int',
        'migration_zone_id': 'int',
        'migration_zone_name': 'str',
        'name': 'str',
        'network_controller_connected_to_management': 'bool',
        'os_name': 'str',
        'os_update_available': 'bool',
        'registered': 'bool',
        'serial_number': 'str',
        'shutdown_state': 'int',
        'status': 'str',
        'status_info': 'ApiControllerStatusPayload',
        'type': 'int',
        'update_state': 'ApiSimpleIdPayload',
        'uuid': 'str',
        'vendor_name': 'str',
        'virtual_ip_address': 'str'
    }

    attribute_map = {
        'action_in_progress': 'actionInProgress',
        'admin_password_for_physical_access': 'adminPasswordForPhysicalAccess',
        'category_id': 'categoryId',
        'category_name': 'categoryName',
        'chassis_location_name': 'chassisLocationName',
        'connected_to_management': 'connectedToManagement',
        'cos_version': 'cosVersion',
        'cpu_temperature_data': 'cpuTemperatureData',
        'cpus': 'cpus',
        'date_added': 'dateAdded',
        'description': 'description',
        'dhcp_wan_ip': 'dhcpWanIp',
        'firmware_update_available': 'firmwareUpdateAvailable',
        'firmware_update_in_progress': 'firmwareUpdateInProgress',
        'firmware_versions': 'firmwareVersions',
        'host_tags': 'hostTags',
        'id': 'id',
        'in_maintenance': 'inMaintenance',
        'last_host_in_migration_zone': 'lastHostInMigrationZone',
        'memory_bytes': 'memoryBytes',
        'migration_zone_id': 'migrationZoneId',
        'migration_zone_name': 'migrationZoneName',
        'name': 'name',
        'network_controller_connected_to_management': 'networkControllerConnectedToManagement',
        'os_name': 'osName',
        'os_update_available': 'osUpdateAvailable',
        'registered': 'registered',
        'serial_number': 'serialNumber',
        'shutdown_state': 'shutdownState',
        'status': 'status',
        'status_info': 'statusInfo',
        'type': 'type',
        'update_state': 'updateState',
        'uuid': 'uuid',
        'vendor_name': 'vendorName',
        'virtual_ip_address': 'virtualIpAddress'
    }

    def __init__(self, action_in_progress=None, admin_password_for_physical_access=None, category_id=None, category_name=None, chassis_location_name=None, connected_to_management=None, cos_version=None, cpu_temperature_data=None, cpus=None, date_added=None, description=None, dhcp_wan_ip=None, firmware_update_available=None, firmware_update_in_progress=None, firmware_versions=None, host_tags=None, id=None, in_maintenance=None, last_host_in_migration_zone=None, memory_bytes=None, migration_zone_id=None, migration_zone_name=None, name=None, network_controller_connected_to_management=None, os_name=None, os_update_available=None, registered=None, serial_number=None, shutdown_state=None, status=None, status_info=None, type=None, update_state=None, uuid=None, vendor_name=None, virtual_ip_address=None):  # noqa: E501
        """ApiComputeHardwarePropertiesPayload - a model defined in Swagger"""  # noqa: E501
        self._action_in_progress = None
        self._admin_password_for_physical_access = None
        self._category_id = None
        self._category_name = None
        self._chassis_location_name = None
        self._connected_to_management = None
        self._cos_version = None
        self._cpu_temperature_data = None
        self._cpus = None
        self._date_added = None
        self._description = None
        self._dhcp_wan_ip = None
        self._firmware_update_available = None
        self._firmware_update_in_progress = None
        self._firmware_versions = None
        self._host_tags = None
        self._id = None
        self._in_maintenance = None
        self._last_host_in_migration_zone = None
        self._memory_bytes = None
        self._migration_zone_id = None
        self._migration_zone_name = None
        self._name = None
        self._network_controller_connected_to_management = None
        self._os_name = None
        self._os_update_available = None
        self._registered = None
        self._serial_number = None
        self._shutdown_state = None
        self._status = None
        self._status_info = None
        self._type = None
        self._update_state = None
        self._uuid = None
        self._vendor_name = None
        self._virtual_ip_address = None
        self.discriminator = None
        if action_in_progress is not None:
            self.action_in_progress = action_in_progress
        if admin_password_for_physical_access is not None:
            self.admin_password_for_physical_access = admin_password_for_physical_access
        if category_id is not None:
            self.category_id = category_id
        if category_name is not None:
            self.category_name = category_name
        if chassis_location_name is not None:
            self.chassis_location_name = chassis_location_name
        if connected_to_management is not None:
            self.connected_to_management = connected_to_management
        if cos_version is not None:
            self.cos_version = cos_version
        if cpu_temperature_data is not None:
            self.cpu_temperature_data = cpu_temperature_data
        if cpus is not None:
            self.cpus = cpus
        if date_added is not None:
            self.date_added = date_added
        if description is not None:
            self.description = description
        if dhcp_wan_ip is not None:
            self.dhcp_wan_ip = dhcp_wan_ip
        if firmware_update_available is not None:
            self.firmware_update_available = firmware_update_available
        if firmware_update_in_progress is not None:
            self.firmware_update_in_progress = firmware_update_in_progress
        if firmware_versions is not None:
            self.firmware_versions = firmware_versions
        if host_tags is not None:
            self.host_tags = host_tags
        if id is not None:
            self.id = id
        if in_maintenance is not None:
            self.in_maintenance = in_maintenance
        if last_host_in_migration_zone is not None:
            self.last_host_in_migration_zone = last_host_in_migration_zone
        if memory_bytes is not None:
            self.memory_bytes = memory_bytes
        if migration_zone_id is not None:
            self.migration_zone_id = migration_zone_id
        if migration_zone_name is not None:
            self.migration_zone_name = migration_zone_name
        if name is not None:
            self.name = name
        if network_controller_connected_to_management is not None:
            self.network_controller_connected_to_management = network_controller_connected_to_management
        if os_name is not None:
            self.os_name = os_name
        if os_update_available is not None:
            self.os_update_available = os_update_available
        if registered is not None:
            self.registered = registered
        if serial_number is not None:
            self.serial_number = serial_number
        if shutdown_state is not None:
            self.shutdown_state = shutdown_state
        if status is not None:
            self.status = status
        if status_info is not None:
            self.status_info = status_info
        if type is not None:
            self.type = type
        if update_state is not None:
            self.update_state = update_state
        if uuid is not None:
            self.uuid = uuid
        if vendor_name is not None:
            self.vendor_name = vendor_name
        if virtual_ip_address is not None:
            self.virtual_ip_address = virtual_ip_address

    @property
    def action_in_progress(self):
        """Gets the action_in_progress of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The action_in_progress of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: bool
        """
        return self._action_in_progress

    @action_in_progress.setter
    def action_in_progress(self, action_in_progress):
        """Sets the action_in_progress of this ApiComputeHardwarePropertiesPayload.


        :param action_in_progress: The action_in_progress of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: bool
        """

        self._action_in_progress = action_in_progress

    @property
    def admin_password_for_physical_access(self):
        """Gets the admin_password_for_physical_access of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The admin_password_for_physical_access of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._admin_password_for_physical_access

    @admin_password_for_physical_access.setter
    def admin_password_for_physical_access(self, admin_password_for_physical_access):
        """Sets the admin_password_for_physical_access of this ApiComputeHardwarePropertiesPayload.


        :param admin_password_for_physical_access: The admin_password_for_physical_access of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._admin_password_for_physical_access = admin_password_for_physical_access

    @property
    def category_id(self):
        """Gets the category_id of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The category_id of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ApiComputeHardwarePropertiesPayload.


        :param category_id: The category_id of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def category_name(self):
        """Gets the category_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The category_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this ApiComputeHardwarePropertiesPayload.


        :param category_name: The category_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    @property
    def chassis_location_name(self):
        """Gets the chassis_location_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The chassis_location_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._chassis_location_name

    @chassis_location_name.setter
    def chassis_location_name(self, chassis_location_name):
        """Sets the chassis_location_name of this ApiComputeHardwarePropertiesPayload.


        :param chassis_location_name: The chassis_location_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._chassis_location_name = chassis_location_name

    @property
    def connected_to_management(self):
        """Gets the connected_to_management of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The connected_to_management of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: bool
        """
        return self._connected_to_management

    @connected_to_management.setter
    def connected_to_management(self, connected_to_management):
        """Sets the connected_to_management of this ApiComputeHardwarePropertiesPayload.


        :param connected_to_management: The connected_to_management of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: bool
        """

        self._connected_to_management = connected_to_management

    @property
    def cos_version(self):
        """Gets the cos_version of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The cos_version of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._cos_version

    @cos_version.setter
    def cos_version(self, cos_version):
        """Sets the cos_version of this ApiComputeHardwarePropertiesPayload.


        :param cos_version: The cos_version of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._cos_version = cos_version

    @property
    def cpu_temperature_data(self):
        """Gets the cpu_temperature_data of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The cpu_temperature_data of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: list[ApiCpuTemperaturePayload]
        """
        return self._cpu_temperature_data

    @cpu_temperature_data.setter
    def cpu_temperature_data(self, cpu_temperature_data):
        """Sets the cpu_temperature_data of this ApiComputeHardwarePropertiesPayload.


        :param cpu_temperature_data: The cpu_temperature_data of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: list[ApiCpuTemperaturePayload]
        """

        self._cpu_temperature_data = cpu_temperature_data

    @property
    def cpus(self):
        """Gets the cpus of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The cpus of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this ApiComputeHardwarePropertiesPayload.


        :param cpus: The cpus of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._cpus = cpus

    @property
    def date_added(self):
        """Gets the date_added of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The date_added of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """Sets the date_added of this ApiComputeHardwarePropertiesPayload.


        :param date_added: The date_added of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._date_added = date_added

    @property
    def description(self):
        """Gets the description of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The description of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiComputeHardwarePropertiesPayload.


        :param description: The description of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dhcp_wan_ip(self):
        """Gets the dhcp_wan_ip of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The dhcp_wan_ip of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_wan_ip

    @dhcp_wan_ip.setter
    def dhcp_wan_ip(self, dhcp_wan_ip):
        """Sets the dhcp_wan_ip of this ApiComputeHardwarePropertiesPayload.


        :param dhcp_wan_ip: The dhcp_wan_ip of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._dhcp_wan_ip = dhcp_wan_ip

    @property
    def firmware_update_available(self):
        """Gets the firmware_update_available of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The firmware_update_available of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: bool
        """
        return self._firmware_update_available

    @firmware_update_available.setter
    def firmware_update_available(self, firmware_update_available):
        """Sets the firmware_update_available of this ApiComputeHardwarePropertiesPayload.


        :param firmware_update_available: The firmware_update_available of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: bool
        """

        self._firmware_update_available = firmware_update_available

    @property
    def firmware_update_in_progress(self):
        """Gets the firmware_update_in_progress of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The firmware_update_in_progress of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: bool
        """
        return self._firmware_update_in_progress

    @firmware_update_in_progress.setter
    def firmware_update_in_progress(self, firmware_update_in_progress):
        """Sets the firmware_update_in_progress of this ApiComputeHardwarePropertiesPayload.


        :param firmware_update_in_progress: The firmware_update_in_progress of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: bool
        """

        self._firmware_update_in_progress = firmware_update_in_progress

    @property
    def firmware_versions(self):
        """Gets the firmware_versions of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The firmware_versions of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._firmware_versions

    @firmware_versions.setter
    def firmware_versions(self, firmware_versions):
        """Sets the firmware_versions of this ApiComputeHardwarePropertiesPayload.


        :param firmware_versions: The firmware_versions of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: dict(str, str)
        """

        self._firmware_versions = firmware_versions

    @property
    def host_tags(self):
        """Gets the host_tags of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The host_tags of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: list[ApiUiTagPayload]
        """
        return self._host_tags

    @host_tags.setter
    def host_tags(self, host_tags):
        """Sets the host_tags of this ApiComputeHardwarePropertiesPayload.


        :param host_tags: The host_tags of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: list[ApiUiTagPayload]
        """

        self._host_tags = host_tags

    @property
    def id(self):
        """Gets the id of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The id of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiComputeHardwarePropertiesPayload.


        :param id: The id of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def in_maintenance(self):
        """Gets the in_maintenance of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The in_maintenance of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: bool
        """
        return self._in_maintenance

    @in_maintenance.setter
    def in_maintenance(self, in_maintenance):
        """Sets the in_maintenance of this ApiComputeHardwarePropertiesPayload.


        :param in_maintenance: The in_maintenance of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: bool
        """

        self._in_maintenance = in_maintenance

    @property
    def last_host_in_migration_zone(self):
        """Gets the last_host_in_migration_zone of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The last_host_in_migration_zone of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: bool
        """
        return self._last_host_in_migration_zone

    @last_host_in_migration_zone.setter
    def last_host_in_migration_zone(self, last_host_in_migration_zone):
        """Sets the last_host_in_migration_zone of this ApiComputeHardwarePropertiesPayload.


        :param last_host_in_migration_zone: The last_host_in_migration_zone of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: bool
        """

        self._last_host_in_migration_zone = last_host_in_migration_zone

    @property
    def memory_bytes(self):
        """Gets the memory_bytes of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The memory_bytes of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._memory_bytes

    @memory_bytes.setter
    def memory_bytes(self, memory_bytes):
        """Sets the memory_bytes of this ApiComputeHardwarePropertiesPayload.


        :param memory_bytes: The memory_bytes of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._memory_bytes = memory_bytes

    @property
    def migration_zone_id(self):
        """Gets the migration_zone_id of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The migration_zone_id of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._migration_zone_id

    @migration_zone_id.setter
    def migration_zone_id(self, migration_zone_id):
        """Sets the migration_zone_id of this ApiComputeHardwarePropertiesPayload.


        :param migration_zone_id: The migration_zone_id of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._migration_zone_id = migration_zone_id

    @property
    def migration_zone_name(self):
        """Gets the migration_zone_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The migration_zone_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._migration_zone_name

    @migration_zone_name.setter
    def migration_zone_name(self, migration_zone_name):
        """Sets the migration_zone_name of this ApiComputeHardwarePropertiesPayload.


        :param migration_zone_name: The migration_zone_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._migration_zone_name = migration_zone_name

    @property
    def name(self):
        """Gets the name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiComputeHardwarePropertiesPayload.


        :param name: The name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_controller_connected_to_management(self):
        """Gets the network_controller_connected_to_management of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The network_controller_connected_to_management of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: bool
        """
        return self._network_controller_connected_to_management

    @network_controller_connected_to_management.setter
    def network_controller_connected_to_management(self, network_controller_connected_to_management):
        """Sets the network_controller_connected_to_management of this ApiComputeHardwarePropertiesPayload.


        :param network_controller_connected_to_management: The network_controller_connected_to_management of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: bool
        """

        self._network_controller_connected_to_management = network_controller_connected_to_management

    @property
    def os_name(self):
        """Gets the os_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The os_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this ApiComputeHardwarePropertiesPayload.


        :param os_name: The os_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._os_name = os_name

    @property
    def os_update_available(self):
        """Gets the os_update_available of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The os_update_available of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: bool
        """
        return self._os_update_available

    @os_update_available.setter
    def os_update_available(self, os_update_available):
        """Sets the os_update_available of this ApiComputeHardwarePropertiesPayload.


        :param os_update_available: The os_update_available of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: bool
        """

        self._os_update_available = os_update_available

    @property
    def registered(self):
        """Gets the registered of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The registered of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: bool
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this ApiComputeHardwarePropertiesPayload.


        :param registered: The registered of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: bool
        """

        self._registered = registered

    @property
    def serial_number(self):
        """Gets the serial_number of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The serial_number of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ApiComputeHardwarePropertiesPayload.


        :param serial_number: The serial_number of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def shutdown_state(self):
        """Gets the shutdown_state of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The shutdown_state of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._shutdown_state

    @shutdown_state.setter
    def shutdown_state(self, shutdown_state):
        """Sets the shutdown_state of this ApiComputeHardwarePropertiesPayload.


        :param shutdown_state: The shutdown_state of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._shutdown_state = shutdown_state

    @property
    def status(self):
        """Gets the status of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The status of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiComputeHardwarePropertiesPayload.


        :param status: The status of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_info(self):
        """Gets the status_info of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The status_info of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: ApiControllerStatusPayload
        """
        return self._status_info

    @status_info.setter
    def status_info(self, status_info):
        """Sets the status_info of this ApiComputeHardwarePropertiesPayload.


        :param status_info: The status_info of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: ApiControllerStatusPayload
        """

        self._status_info = status_info

    @property
    def type(self):
        """Gets the type of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The type of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiComputeHardwarePropertiesPayload.


        :param type: The type of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def update_state(self):
        """Gets the update_state of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The update_state of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: ApiSimpleIdPayload
        """
        return self._update_state

    @update_state.setter
    def update_state(self, update_state):
        """Sets the update_state of this ApiComputeHardwarePropertiesPayload.


        :param update_state: The update_state of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: ApiSimpleIdPayload
        """

        self._update_state = update_state

    @property
    def uuid(self):
        """Gets the uuid of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The uuid of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApiComputeHardwarePropertiesPayload.


        :param uuid: The uuid of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vendor_name(self):
        """Gets the vendor_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The vendor_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """Sets the vendor_name of this ApiComputeHardwarePropertiesPayload.


        :param vendor_name: The vendor_name of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._vendor_name = vendor_name

    @property
    def virtual_ip_address(self):
        """Gets the virtual_ip_address of this ApiComputeHardwarePropertiesPayload.  # noqa: E501


        :return: The virtual_ip_address of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :rtype: str
        """
        return self._virtual_ip_address

    @virtual_ip_address.setter
    def virtual_ip_address(self, virtual_ip_address):
        """Sets the virtual_ip_address of this ApiComputeHardwarePropertiesPayload.


        :param virtual_ip_address: The virtual_ip_address of this ApiComputeHardwarePropertiesPayload.  # noqa: E501
        :type: str
        """

        self._virtual_ip_address = virtual_ip_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiComputeHardwarePropertiesPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiComputeHardwarePropertiesPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
