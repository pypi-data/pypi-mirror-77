#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiDisasterRecoveryRetentionCountPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all': 'int',
        'daily': 'int',
        'monthly': 'int',
        'weekly': 'int',
        'yearly': 'int'
    }

    attribute_map = {
        'all': 'all',
        'daily': 'daily',
        'monthly': 'monthly',
        'weekly': 'weekly',
        'yearly': 'yearly'
    }

    def __init__(self, all=None, daily=None, monthly=None, weekly=None, yearly=None):  # noqa: E501
        """ApiDisasterRecoveryRetentionCountPayload - a model defined in Swagger"""  # noqa: E501
        self._all = None
        self._daily = None
        self._monthly = None
        self._weekly = None
        self._yearly = None
        self.discriminator = None
        if all is not None:
            self.all = all
        if daily is not None:
            self.daily = daily
        if monthly is not None:
            self.monthly = monthly
        if weekly is not None:
            self.weekly = weekly
        if yearly is not None:
            self.yearly = yearly

    @property
    def all(self):
        """Gets the all of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501


        :return: The all of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501
        :rtype: int
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this ApiDisasterRecoveryRetentionCountPayload.


        :param all: The all of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501
        :type: int
        """

        self._all = all

    @property
    def daily(self):
        """Gets the daily of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501


        :return: The daily of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501
        :rtype: int
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this ApiDisasterRecoveryRetentionCountPayload.


        :param daily: The daily of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501
        :type: int
        """

        self._daily = daily

    @property
    def monthly(self):
        """Gets the monthly of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501


        :return: The monthly of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501
        :rtype: int
        """
        return self._monthly

    @monthly.setter
    def monthly(self, monthly):
        """Sets the monthly of this ApiDisasterRecoveryRetentionCountPayload.


        :param monthly: The monthly of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501
        :type: int
        """

        self._monthly = monthly

    @property
    def weekly(self):
        """Gets the weekly of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501


        :return: The weekly of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501
        :rtype: int
        """
        return self._weekly

    @weekly.setter
    def weekly(self, weekly):
        """Sets the weekly of this ApiDisasterRecoveryRetentionCountPayload.


        :param weekly: The weekly of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501
        :type: int
        """

        self._weekly = weekly

    @property
    def yearly(self):
        """Gets the yearly of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501


        :return: The yearly of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501
        :rtype: int
        """
        return self._yearly

    @yearly.setter
    def yearly(self, yearly):
        """Sets the yearly of this ApiDisasterRecoveryRetentionCountPayload.


        :param yearly: The yearly of this ApiDisasterRecoveryRetentionCountPayload.  # noqa: E501
        :type: int
        """

        self._yearly = yearly

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiDisasterRecoveryRetentionCountPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDisasterRecoveryRetentionCountPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
