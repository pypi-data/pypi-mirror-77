#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiDiskPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allocation_size_bytes': 'int',
        'bandwidth_limit': 'int',
        'boot_order': 'int',
        'datacenter': 'ApiSimpleIdPayload',
        'disk_order': 'int',
        'firewall_override_id': 'int',
        'id': 'int',
        'iops_limit': 'int',
        'mac_address': 'str',
        'name': 'str',
        'networking_mode': 'int',
        'os_type_name': 'str',
        'path': 'str',
        'storage_controller_id': 'int',
        'storage_pool': 'ApiSimpleIdPayload',
        'uuid': 'str',
        'vnet_id': 'int'
    }

    attribute_map = {
        'allocation_size_bytes': 'allocationSizeBytes',
        'bandwidth_limit': 'bandwidthLimit',
        'boot_order': 'bootOrder',
        'datacenter': 'datacenter',
        'disk_order': 'diskOrder',
        'firewall_override_id': 'firewallOverrideId',
        'id': 'id',
        'iops_limit': 'iopsLimit',
        'mac_address': 'macAddress',
        'name': 'name',
        'networking_mode': 'networkingMode',
        'os_type_name': 'osTypeName',
        'path': 'path',
        'storage_controller_id': 'storageControllerId',
        'storage_pool': 'storagePool',
        'uuid': 'uuid',
        'vnet_id': 'vnetId'
    }

    def __init__(self, allocation_size_bytes=None, bandwidth_limit=None, boot_order=None, datacenter=None, disk_order=None, firewall_override_id=None, id=None, iops_limit=None, mac_address=None, name=None, networking_mode=None, os_type_name=None, path=None, storage_controller_id=None, storage_pool=None, uuid=None, vnet_id=None):  # noqa: E501
        """ApiDiskPayload - a model defined in Swagger"""  # noqa: E501
        self._allocation_size_bytes = None
        self._bandwidth_limit = None
        self._boot_order = None
        self._datacenter = None
        self._disk_order = None
        self._firewall_override_id = None
        self._id = None
        self._iops_limit = None
        self._mac_address = None
        self._name = None
        self._networking_mode = None
        self._os_type_name = None
        self._path = None
        self._storage_controller_id = None
        self._storage_pool = None
        self._uuid = None
        self._vnet_id = None
        self.discriminator = None
        if allocation_size_bytes is not None:
            self.allocation_size_bytes = allocation_size_bytes
        if bandwidth_limit is not None:
            self.bandwidth_limit = bandwidth_limit
        if boot_order is not None:
            self.boot_order = boot_order
        if datacenter is not None:
            self.datacenter = datacenter
        if disk_order is not None:
            self.disk_order = disk_order
        if firewall_override_id is not None:
            self.firewall_override_id = firewall_override_id
        if id is not None:
            self.id = id
        if iops_limit is not None:
            self.iops_limit = iops_limit
        if mac_address is not None:
            self.mac_address = mac_address
        if name is not None:
            self.name = name
        if networking_mode is not None:
            self.networking_mode = networking_mode
        if os_type_name is not None:
            self.os_type_name = os_type_name
        if path is not None:
            self.path = path
        if storage_controller_id is not None:
            self.storage_controller_id = storage_controller_id
        if storage_pool is not None:
            self.storage_pool = storage_pool
        if uuid is not None:
            self.uuid = uuid
        if vnet_id is not None:
            self.vnet_id = vnet_id

    @property
    def allocation_size_bytes(self):
        """Gets the allocation_size_bytes of this ApiDiskPayload.  # noqa: E501


        :return: The allocation_size_bytes of this ApiDiskPayload.  # noqa: E501
        :rtype: int
        """
        return self._allocation_size_bytes

    @allocation_size_bytes.setter
    def allocation_size_bytes(self, allocation_size_bytes):
        """Sets the allocation_size_bytes of this ApiDiskPayload.


        :param allocation_size_bytes: The allocation_size_bytes of this ApiDiskPayload.  # noqa: E501
        :type: int
        """

        self._allocation_size_bytes = allocation_size_bytes

    @property
    def bandwidth_limit(self):
        """Gets the bandwidth_limit of this ApiDiskPayload.  # noqa: E501


        :return: The bandwidth_limit of this ApiDiskPayload.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth_limit

    @bandwidth_limit.setter
    def bandwidth_limit(self, bandwidth_limit):
        """Sets the bandwidth_limit of this ApiDiskPayload.


        :param bandwidth_limit: The bandwidth_limit of this ApiDiskPayload.  # noqa: E501
        :type: int
        """

        self._bandwidth_limit = bandwidth_limit

    @property
    def boot_order(self):
        """Gets the boot_order of this ApiDiskPayload.  # noqa: E501


        :return: The boot_order of this ApiDiskPayload.  # noqa: E501
        :rtype: int
        """
        return self._boot_order

    @boot_order.setter
    def boot_order(self, boot_order):
        """Sets the boot_order of this ApiDiskPayload.


        :param boot_order: The boot_order of this ApiDiskPayload.  # noqa: E501
        :type: int
        """

        self._boot_order = boot_order

    @property
    def datacenter(self):
        """Gets the datacenter of this ApiDiskPayload.  # noqa: E501


        :return: The datacenter of this ApiDiskPayload.  # noqa: E501
        :rtype: ApiSimpleIdPayload
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this ApiDiskPayload.


        :param datacenter: The datacenter of this ApiDiskPayload.  # noqa: E501
        :type: ApiSimpleIdPayload
        """

        self._datacenter = datacenter

    @property
    def disk_order(self):
        """Gets the disk_order of this ApiDiskPayload.  # noqa: E501


        :return: The disk_order of this ApiDiskPayload.  # noqa: E501
        :rtype: int
        """
        return self._disk_order

    @disk_order.setter
    def disk_order(self, disk_order):
        """Sets the disk_order of this ApiDiskPayload.


        :param disk_order: The disk_order of this ApiDiskPayload.  # noqa: E501
        :type: int
        """

        self._disk_order = disk_order

    @property
    def firewall_override_id(self):
        """Gets the firewall_override_id of this ApiDiskPayload.  # noqa: E501


        :return: The firewall_override_id of this ApiDiskPayload.  # noqa: E501
        :rtype: int
        """
        return self._firewall_override_id

    @firewall_override_id.setter
    def firewall_override_id(self, firewall_override_id):
        """Sets the firewall_override_id of this ApiDiskPayload.


        :param firewall_override_id: The firewall_override_id of this ApiDiskPayload.  # noqa: E501
        :type: int
        """

        self._firewall_override_id = firewall_override_id

    @property
    def id(self):
        """Gets the id of this ApiDiskPayload.  # noqa: E501


        :return: The id of this ApiDiskPayload.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiDiskPayload.


        :param id: The id of this ApiDiskPayload.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def iops_limit(self):
        """Gets the iops_limit of this ApiDiskPayload.  # noqa: E501


        :return: The iops_limit of this ApiDiskPayload.  # noqa: E501
        :rtype: int
        """
        return self._iops_limit

    @iops_limit.setter
    def iops_limit(self, iops_limit):
        """Sets the iops_limit of this ApiDiskPayload.


        :param iops_limit: The iops_limit of this ApiDiskPayload.  # noqa: E501
        :type: int
        """

        self._iops_limit = iops_limit

    @property
    def mac_address(self):
        """Gets the mac_address of this ApiDiskPayload.  # noqa: E501


        :return: The mac_address of this ApiDiskPayload.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this ApiDiskPayload.


        :param mac_address: The mac_address of this ApiDiskPayload.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def name(self):
        """Gets the name of this ApiDiskPayload.  # noqa: E501


        :return: The name of this ApiDiskPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiDiskPayload.


        :param name: The name of this ApiDiskPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def networking_mode(self):
        """Gets the networking_mode of this ApiDiskPayload.  # noqa: E501


        :return: The networking_mode of this ApiDiskPayload.  # noqa: E501
        :rtype: int
        """
        return self._networking_mode

    @networking_mode.setter
    def networking_mode(self, networking_mode):
        """Sets the networking_mode of this ApiDiskPayload.


        :param networking_mode: The networking_mode of this ApiDiskPayload.  # noqa: E501
        :type: int
        """

        self._networking_mode = networking_mode

    @property
    def os_type_name(self):
        """Gets the os_type_name of this ApiDiskPayload.  # noqa: E501


        :return: The os_type_name of this ApiDiskPayload.  # noqa: E501
        :rtype: str
        """
        return self._os_type_name

    @os_type_name.setter
    def os_type_name(self, os_type_name):
        """Sets the os_type_name of this ApiDiskPayload.


        :param os_type_name: The os_type_name of this ApiDiskPayload.  # noqa: E501
        :type: str
        """

        self._os_type_name = os_type_name

    @property
    def path(self):
        """Gets the path of this ApiDiskPayload.  # noqa: E501


        :return: The path of this ApiDiskPayload.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ApiDiskPayload.


        :param path: The path of this ApiDiskPayload.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def storage_controller_id(self):
        """Gets the storage_controller_id of this ApiDiskPayload.  # noqa: E501


        :return: The storage_controller_id of this ApiDiskPayload.  # noqa: E501
        :rtype: int
        """
        return self._storage_controller_id

    @storage_controller_id.setter
    def storage_controller_id(self, storage_controller_id):
        """Sets the storage_controller_id of this ApiDiskPayload.


        :param storage_controller_id: The storage_controller_id of this ApiDiskPayload.  # noqa: E501
        :type: int
        """

        self._storage_controller_id = storage_controller_id

    @property
    def storage_pool(self):
        """Gets the storage_pool of this ApiDiskPayload.  # noqa: E501


        :return: The storage_pool of this ApiDiskPayload.  # noqa: E501
        :rtype: ApiSimpleIdPayload
        """
        return self._storage_pool

    @storage_pool.setter
    def storage_pool(self, storage_pool):
        """Sets the storage_pool of this ApiDiskPayload.


        :param storage_pool: The storage_pool of this ApiDiskPayload.  # noqa: E501
        :type: ApiSimpleIdPayload
        """

        self._storage_pool = storage_pool

    @property
    def uuid(self):
        """Gets the uuid of this ApiDiskPayload.  # noqa: E501


        :return: The uuid of this ApiDiskPayload.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApiDiskPayload.


        :param uuid: The uuid of this ApiDiskPayload.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def vnet_id(self):
        """Gets the vnet_id of this ApiDiskPayload.  # noqa: E501


        :return: The vnet_id of this ApiDiskPayload.  # noqa: E501
        :rtype: int
        """
        return self._vnet_id

    @vnet_id.setter
    def vnet_id(self, vnet_id):
        """Sets the vnet_id of this ApiDiskPayload.


        :param vnet_id: The vnet_id of this ApiDiskPayload.  # noqa: E501
        :type: int
        """

        self._vnet_id = vnet_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiDiskPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDiskPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
