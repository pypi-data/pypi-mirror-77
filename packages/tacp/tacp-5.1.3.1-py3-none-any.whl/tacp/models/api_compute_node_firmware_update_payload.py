#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiComputeNodeFirmwareUpdatePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_uuid': 'str',
        'compute_operating_system': 'str',
        'compute_service_version': 'str',
        'cpus': 'int',
        'description': 'str',
        'firmware_update_available': 'bool',
        'location_uuid': 'str',
        'maintenance_mode_enabled': 'bool',
        'memory': 'int',
        'migration_zone_uuid': 'str',
        'name': 'str',
        'os_update_available': 'bool',
        'tags': 'list[ApiUuidPayload]',
        'uuid': 'str'
    }

    attribute_map = {
        'category_uuid': 'categoryUuid',
        'compute_operating_system': 'computeOperatingSystem',
        'compute_service_version': 'computeServiceVersion',
        'cpus': 'cpus',
        'description': 'description',
        'firmware_update_available': 'firmwareUpdateAvailable',
        'location_uuid': 'locationUuid',
        'maintenance_mode_enabled': 'maintenanceModeEnabled',
        'memory': 'memory',
        'migration_zone_uuid': 'migrationZoneUuid',
        'name': 'name',
        'os_update_available': 'osUpdateAvailable',
        'tags': 'tags',
        'uuid': 'uuid'
    }

    def __init__(self, category_uuid=None, compute_operating_system=None, compute_service_version=None, cpus=None, description=None, firmware_update_available=None, location_uuid=None, maintenance_mode_enabled=None, memory=None, migration_zone_uuid=None, name=None, os_update_available=None, tags=None, uuid=None):  # noqa: E501
        """ApiComputeNodeFirmwareUpdatePayload - a model defined in Swagger"""  # noqa: E501
        self._category_uuid = None
        self._compute_operating_system = None
        self._compute_service_version = None
        self._cpus = None
        self._description = None
        self._firmware_update_available = None
        self._location_uuid = None
        self._maintenance_mode_enabled = None
        self._memory = None
        self._migration_zone_uuid = None
        self._name = None
        self._os_update_available = None
        self._tags = None
        self._uuid = None
        self.discriminator = None
        if category_uuid is not None:
            self.category_uuid = category_uuid
        if compute_operating_system is not None:
            self.compute_operating_system = compute_operating_system
        if compute_service_version is not None:
            self.compute_service_version = compute_service_version
        if cpus is not None:
            self.cpus = cpus
        if description is not None:
            self.description = description
        if firmware_update_available is not None:
            self.firmware_update_available = firmware_update_available
        if location_uuid is not None:
            self.location_uuid = location_uuid
        if maintenance_mode_enabled is not None:
            self.maintenance_mode_enabled = maintenance_mode_enabled
        if memory is not None:
            self.memory = memory
        if migration_zone_uuid is not None:
            self.migration_zone_uuid = migration_zone_uuid
        if name is not None:
            self.name = name
        if os_update_available is not None:
            self.os_update_available = os_update_available
        if tags is not None:
            self.tags = tags
        if uuid is not None:
            self.uuid = uuid

    @property
    def category_uuid(self):
        """Gets the category_uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The category_uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._category_uuid

    @category_uuid.setter
    def category_uuid(self, category_uuid):
        """Sets the category_uuid of this ApiComputeNodeFirmwareUpdatePayload.


        :param category_uuid: The category_uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: str
        """

        self._category_uuid = category_uuid

    @property
    def compute_operating_system(self):
        """Gets the compute_operating_system of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The compute_operating_system of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._compute_operating_system

    @compute_operating_system.setter
    def compute_operating_system(self, compute_operating_system):
        """Sets the compute_operating_system of this ApiComputeNodeFirmwareUpdatePayload.


        :param compute_operating_system: The compute_operating_system of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: str
        """

        self._compute_operating_system = compute_operating_system

    @property
    def compute_service_version(self):
        """Gets the compute_service_version of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The compute_service_version of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._compute_service_version

    @compute_service_version.setter
    def compute_service_version(self, compute_service_version):
        """Sets the compute_service_version of this ApiComputeNodeFirmwareUpdatePayload.


        :param compute_service_version: The compute_service_version of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: str
        """

        self._compute_service_version = compute_service_version

    @property
    def cpus(self):
        """Gets the cpus of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The cpus of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: int
        """
        return self._cpus

    @cpus.setter
    def cpus(self, cpus):
        """Sets the cpus of this ApiComputeNodeFirmwareUpdatePayload.


        :param cpus: The cpus of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: int
        """

        self._cpus = cpus

    @property
    def description(self):
        """Gets the description of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The description of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiComputeNodeFirmwareUpdatePayload.


        :param description: The description of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def firmware_update_available(self):
        """Gets the firmware_update_available of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The firmware_update_available of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._firmware_update_available

    @firmware_update_available.setter
    def firmware_update_available(self, firmware_update_available):
        """Sets the firmware_update_available of this ApiComputeNodeFirmwareUpdatePayload.


        :param firmware_update_available: The firmware_update_available of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: bool
        """

        self._firmware_update_available = firmware_update_available

    @property
    def location_uuid(self):
        """Gets the location_uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The location_uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._location_uuid

    @location_uuid.setter
    def location_uuid(self, location_uuid):
        """Sets the location_uuid of this ApiComputeNodeFirmwareUpdatePayload.


        :param location_uuid: The location_uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: str
        """

        self._location_uuid = location_uuid

    @property
    def maintenance_mode_enabled(self):
        """Gets the maintenance_mode_enabled of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The maintenance_mode_enabled of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._maintenance_mode_enabled

    @maintenance_mode_enabled.setter
    def maintenance_mode_enabled(self, maintenance_mode_enabled):
        """Sets the maintenance_mode_enabled of this ApiComputeNodeFirmwareUpdatePayload.


        :param maintenance_mode_enabled: The maintenance_mode_enabled of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: bool
        """

        self._maintenance_mode_enabled = maintenance_mode_enabled

    @property
    def memory(self):
        """Gets the memory of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The memory of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ApiComputeNodeFirmwareUpdatePayload.


        :param memory: The memory of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def migration_zone_uuid(self):
        """Gets the migration_zone_uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The migration_zone_uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._migration_zone_uuid

    @migration_zone_uuid.setter
    def migration_zone_uuid(self, migration_zone_uuid):
        """Sets the migration_zone_uuid of this ApiComputeNodeFirmwareUpdatePayload.


        :param migration_zone_uuid: The migration_zone_uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: str
        """

        self._migration_zone_uuid = migration_zone_uuid

    @property
    def name(self):
        """Gets the name of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The name of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiComputeNodeFirmwareUpdatePayload.


        :param name: The name of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def os_update_available(self):
        """Gets the os_update_available of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The os_update_available of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._os_update_available

    @os_update_available.setter
    def os_update_available(self, os_update_available):
        """Sets the os_update_available of this ApiComputeNodeFirmwareUpdatePayload.


        :param os_update_available: The os_update_available of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: bool
        """

        self._os_update_available = os_update_available

    @property
    def tags(self):
        """Gets the tags of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The tags of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: list[ApiUuidPayload]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApiComputeNodeFirmwareUpdatePayload.


        :param tags: The tags of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: list[ApiUuidPayload]
        """

        self._tags = tags

    @property
    def uuid(self):
        """Gets the uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501


        :return: The uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApiComputeNodeFirmwareUpdatePayload.


        :param uuid: The uuid of this ApiComputeNodeFirmwareUpdatePayload.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiComputeNodeFirmwareUpdatePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiComputeNodeFirmwareUpdatePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
