#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiVnetRoutingServicePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_mode': 'str',
        'firewall_override_uuid': 'str',
        'gateway': 'str',
        'ip_address': 'str',
        'network_uuid': 'str',
        'subnet_mask': 'str',
        'type': 'str'
    }

    attribute_map = {
        'address_mode': 'addressMode',
        'firewall_override_uuid': 'firewallOverrideUuid',
        'gateway': 'gateway',
        'ip_address': 'ipAddress',
        'network_uuid': 'networkUuid',
        'subnet_mask': 'subnetMask',
        'type': 'type'
    }

    def __init__(self, address_mode=None, firewall_override_uuid=None, gateway=None, ip_address=None, network_uuid=None, subnet_mask=None, type=None):  # noqa: E501
        """ApiVnetRoutingServicePayload - a model defined in Swagger"""  # noqa: E501
        self._address_mode = None
        self._firewall_override_uuid = None
        self._gateway = None
        self._ip_address = None
        self._network_uuid = None
        self._subnet_mask = None
        self._type = None
        self.discriminator = None
        if address_mode is not None:
            self.address_mode = address_mode
        if firewall_override_uuid is not None:
            self.firewall_override_uuid = firewall_override_uuid
        if gateway is not None:
            self.gateway = gateway
        if ip_address is not None:
            self.ip_address = ip_address
        if network_uuid is not None:
            self.network_uuid = network_uuid
        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if type is not None:
            self.type = type

    @property
    def address_mode(self):
        """Gets the address_mode of this ApiVnetRoutingServicePayload.  # noqa: E501


        :return: The address_mode of this ApiVnetRoutingServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._address_mode

    @address_mode.setter
    def address_mode(self, address_mode):
        """Sets the address_mode of this ApiVnetRoutingServicePayload.


        :param address_mode: The address_mode of this ApiVnetRoutingServicePayload.  # noqa: E501
        :type: str
        """

        self._address_mode = address_mode

    @property
    def firewall_override_uuid(self):
        """Gets the firewall_override_uuid of this ApiVnetRoutingServicePayload.  # noqa: E501


        :return: The firewall_override_uuid of this ApiVnetRoutingServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._firewall_override_uuid

    @firewall_override_uuid.setter
    def firewall_override_uuid(self, firewall_override_uuid):
        """Sets the firewall_override_uuid of this ApiVnetRoutingServicePayload.


        :param firewall_override_uuid: The firewall_override_uuid of this ApiVnetRoutingServicePayload.  # noqa: E501
        :type: str
        """

        self._firewall_override_uuid = firewall_override_uuid

    @property
    def gateway(self):
        """Gets the gateway of this ApiVnetRoutingServicePayload.  # noqa: E501


        :return: The gateway of this ApiVnetRoutingServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this ApiVnetRoutingServicePayload.


        :param gateway: The gateway of this ApiVnetRoutingServicePayload.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def ip_address(self):
        """Gets the ip_address of this ApiVnetRoutingServicePayload.  # noqa: E501


        :return: The ip_address of this ApiVnetRoutingServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ApiVnetRoutingServicePayload.


        :param ip_address: The ip_address of this ApiVnetRoutingServicePayload.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def network_uuid(self):
        """Gets the network_uuid of this ApiVnetRoutingServicePayload.  # noqa: E501


        :return: The network_uuid of this ApiVnetRoutingServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._network_uuid

    @network_uuid.setter
    def network_uuid(self, network_uuid):
        """Sets the network_uuid of this ApiVnetRoutingServicePayload.


        :param network_uuid: The network_uuid of this ApiVnetRoutingServicePayload.  # noqa: E501
        :type: str
        """

        self._network_uuid = network_uuid

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this ApiVnetRoutingServicePayload.  # noqa: E501


        :return: The subnet_mask of this ApiVnetRoutingServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this ApiVnetRoutingServicePayload.


        :param subnet_mask: The subnet_mask of this ApiVnetRoutingServicePayload.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def type(self):
        """Gets the type of this ApiVnetRoutingServicePayload.  # noqa: E501


        :return: The type of this ApiVnetRoutingServicePayload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiVnetRoutingServicePayload.


        :param type: The type of this ApiVnetRoutingServicePayload.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiVnetRoutingServicePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiVnetRoutingServicePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
