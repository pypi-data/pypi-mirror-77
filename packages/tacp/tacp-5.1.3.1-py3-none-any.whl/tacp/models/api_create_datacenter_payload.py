#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiCreateDatacenterPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_support_widget_enabled': 'bool',
        'name': 'str',
        'resource_allocations': 'list[ApiCreateDatacenterResourcePayload]'
    }

    attribute_map = {
        'is_support_widget_enabled': 'isSupportWidgetEnabled',
        'name': 'name',
        'resource_allocations': 'resourceAllocations'
    }

    def __init__(self, is_support_widget_enabled=None, name=None, resource_allocations=None):  # noqa: E501
        """ApiCreateDatacenterPayload - a model defined in Swagger"""  # noqa: E501
        self._is_support_widget_enabled = None
        self._name = None
        self._resource_allocations = None
        self.discriminator = None
        if is_support_widget_enabled is not None:
            self.is_support_widget_enabled = is_support_widget_enabled
        if name is not None:
            self.name = name
        if resource_allocations is not None:
            self.resource_allocations = resource_allocations

    @property
    def is_support_widget_enabled(self):
        """Gets the is_support_widget_enabled of this ApiCreateDatacenterPayload.  # noqa: E501


        :return: The is_support_widget_enabled of this ApiCreateDatacenterPayload.  # noqa: E501
        :rtype: bool
        """
        return self._is_support_widget_enabled

    @is_support_widget_enabled.setter
    def is_support_widget_enabled(self, is_support_widget_enabled):
        """Sets the is_support_widget_enabled of this ApiCreateDatacenterPayload.


        :param is_support_widget_enabled: The is_support_widget_enabled of this ApiCreateDatacenterPayload.  # noqa: E501
        :type: bool
        """

        self._is_support_widget_enabled = is_support_widget_enabled

    @property
    def name(self):
        """Gets the name of this ApiCreateDatacenterPayload.  # noqa: E501


        :return: The name of this ApiCreateDatacenterPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiCreateDatacenterPayload.


        :param name: The name of this ApiCreateDatacenterPayload.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def resource_allocations(self):
        """Gets the resource_allocations of this ApiCreateDatacenterPayload.  # noqa: E501


        :return: The resource_allocations of this ApiCreateDatacenterPayload.  # noqa: E501
        :rtype: list[ApiCreateDatacenterResourcePayload]
        """
        return self._resource_allocations

    @resource_allocations.setter
    def resource_allocations(self, resource_allocations):
        """Sets the resource_allocations of this ApiCreateDatacenterPayload.


        :param resource_allocations: The resource_allocations of this ApiCreateDatacenterPayload.  # noqa: E501
        :type: list[ApiCreateDatacenterResourcePayload]
        """

        self._resource_allocations = resource_allocations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiCreateDatacenterPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiCreateDatacenterPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
