#   Copyright (c) 2020 Lenovo.  All rights reserved.

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


"""
    CP Web Services (CPWS)

    CP web services provides API access to the ThinkAgile CP on-premises cloud platform. It provides access to virtual datacenter and infrastructure resources and is used to create resizable resources, manage workloads and retrieve information about the underlying infrastructure. CPWS will continue to grow as new capabilities are added to the platform.  # noqa: E501

    OpenAPI spec version: Beta
    Contact: lenovo-email
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiDiskStatsPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'io_queue_depth': 'int',
        'iops_read': 'int',
        'iops_write': 'int',
        'storage_bandwidth_read_bytes_per_second': 'int',
        'storage_bandwidth_write_bytes_per_second': 'int',
        'storage_instance_bytes': 'int',
        'storage_latency_in_microseconds': 'int',
        'storage_utilization_bytes': 'int',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'io_queue_depth': 'ioQueueDepth',
        'iops_read': 'iopsRead',
        'iops_write': 'iopsWrite',
        'storage_bandwidth_read_bytes_per_second': 'storageBandwidthReadBytesPerSecond',
        'storage_bandwidth_write_bytes_per_second': 'storageBandwidthWriteBytesPerSecond',
        'storage_instance_bytes': 'storageInstanceBytes',
        'storage_latency_in_microseconds': 'storageLatencyInMicroseconds',
        'storage_utilization_bytes': 'storageUtilizationBytes',
        'timestamp': 'timestamp'
    }

    def __init__(self, io_queue_depth=None, iops_read=None, iops_write=None, storage_bandwidth_read_bytes_per_second=None, storage_bandwidth_write_bytes_per_second=None, storage_instance_bytes=None, storage_latency_in_microseconds=None, storage_utilization_bytes=None, timestamp=None):  # noqa: E501
        """ApiDiskStatsPayload - a model defined in Swagger"""  # noqa: E501
        self._io_queue_depth = None
        self._iops_read = None
        self._iops_write = None
        self._storage_bandwidth_read_bytes_per_second = None
        self._storage_bandwidth_write_bytes_per_second = None
        self._storage_instance_bytes = None
        self._storage_latency_in_microseconds = None
        self._storage_utilization_bytes = None
        self._timestamp = None
        self.discriminator = None
        if io_queue_depth is not None:
            self.io_queue_depth = io_queue_depth
        if iops_read is not None:
            self.iops_read = iops_read
        if iops_write is not None:
            self.iops_write = iops_write
        if storage_bandwidth_read_bytes_per_second is not None:
            self.storage_bandwidth_read_bytes_per_second = storage_bandwidth_read_bytes_per_second
        if storage_bandwidth_write_bytes_per_second is not None:
            self.storage_bandwidth_write_bytes_per_second = storage_bandwidth_write_bytes_per_second
        if storage_instance_bytes is not None:
            self.storage_instance_bytes = storage_instance_bytes
        if storage_latency_in_microseconds is not None:
            self.storage_latency_in_microseconds = storage_latency_in_microseconds
        if storage_utilization_bytes is not None:
            self.storage_utilization_bytes = storage_utilization_bytes
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def io_queue_depth(self):
        """Gets the io_queue_depth of this ApiDiskStatsPayload.  # noqa: E501


        :return: The io_queue_depth of this ApiDiskStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._io_queue_depth

    @io_queue_depth.setter
    def io_queue_depth(self, io_queue_depth):
        """Sets the io_queue_depth of this ApiDiskStatsPayload.


        :param io_queue_depth: The io_queue_depth of this ApiDiskStatsPayload.  # noqa: E501
        :type: int
        """

        self._io_queue_depth = io_queue_depth

    @property
    def iops_read(self):
        """Gets the iops_read of this ApiDiskStatsPayload.  # noqa: E501


        :return: The iops_read of this ApiDiskStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._iops_read

    @iops_read.setter
    def iops_read(self, iops_read):
        """Sets the iops_read of this ApiDiskStatsPayload.


        :param iops_read: The iops_read of this ApiDiskStatsPayload.  # noqa: E501
        :type: int
        """

        self._iops_read = iops_read

    @property
    def iops_write(self):
        """Gets the iops_write of this ApiDiskStatsPayload.  # noqa: E501


        :return: The iops_write of this ApiDiskStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._iops_write

    @iops_write.setter
    def iops_write(self, iops_write):
        """Sets the iops_write of this ApiDiskStatsPayload.


        :param iops_write: The iops_write of this ApiDiskStatsPayload.  # noqa: E501
        :type: int
        """

        self._iops_write = iops_write

    @property
    def storage_bandwidth_read_bytes_per_second(self):
        """Gets the storage_bandwidth_read_bytes_per_second of this ApiDiskStatsPayload.  # noqa: E501


        :return: The storage_bandwidth_read_bytes_per_second of this ApiDiskStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._storage_bandwidth_read_bytes_per_second

    @storage_bandwidth_read_bytes_per_second.setter
    def storage_bandwidth_read_bytes_per_second(self, storage_bandwidth_read_bytes_per_second):
        """Sets the storage_bandwidth_read_bytes_per_second of this ApiDiskStatsPayload.


        :param storage_bandwidth_read_bytes_per_second: The storage_bandwidth_read_bytes_per_second of this ApiDiskStatsPayload.  # noqa: E501
        :type: int
        """

        self._storage_bandwidth_read_bytes_per_second = storage_bandwidth_read_bytes_per_second

    @property
    def storage_bandwidth_write_bytes_per_second(self):
        """Gets the storage_bandwidth_write_bytes_per_second of this ApiDiskStatsPayload.  # noqa: E501


        :return: The storage_bandwidth_write_bytes_per_second of this ApiDiskStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._storage_bandwidth_write_bytes_per_second

    @storage_bandwidth_write_bytes_per_second.setter
    def storage_bandwidth_write_bytes_per_second(self, storage_bandwidth_write_bytes_per_second):
        """Sets the storage_bandwidth_write_bytes_per_second of this ApiDiskStatsPayload.


        :param storage_bandwidth_write_bytes_per_second: The storage_bandwidth_write_bytes_per_second of this ApiDiskStatsPayload.  # noqa: E501
        :type: int
        """

        self._storage_bandwidth_write_bytes_per_second = storage_bandwidth_write_bytes_per_second

    @property
    def storage_instance_bytes(self):
        """Gets the storage_instance_bytes of this ApiDiskStatsPayload.  # noqa: E501


        :return: The storage_instance_bytes of this ApiDiskStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._storage_instance_bytes

    @storage_instance_bytes.setter
    def storage_instance_bytes(self, storage_instance_bytes):
        """Sets the storage_instance_bytes of this ApiDiskStatsPayload.


        :param storage_instance_bytes: The storage_instance_bytes of this ApiDiskStatsPayload.  # noqa: E501
        :type: int
        """

        self._storage_instance_bytes = storage_instance_bytes

    @property
    def storage_latency_in_microseconds(self):
        """Gets the storage_latency_in_microseconds of this ApiDiskStatsPayload.  # noqa: E501


        :return: The storage_latency_in_microseconds of this ApiDiskStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._storage_latency_in_microseconds

    @storage_latency_in_microseconds.setter
    def storage_latency_in_microseconds(self, storage_latency_in_microseconds):
        """Sets the storage_latency_in_microseconds of this ApiDiskStatsPayload.


        :param storage_latency_in_microseconds: The storage_latency_in_microseconds of this ApiDiskStatsPayload.  # noqa: E501
        :type: int
        """

        self._storage_latency_in_microseconds = storage_latency_in_microseconds

    @property
    def storage_utilization_bytes(self):
        """Gets the storage_utilization_bytes of this ApiDiskStatsPayload.  # noqa: E501


        :return: The storage_utilization_bytes of this ApiDiskStatsPayload.  # noqa: E501
        :rtype: int
        """
        return self._storage_utilization_bytes

    @storage_utilization_bytes.setter
    def storage_utilization_bytes(self, storage_utilization_bytes):
        """Sets the storage_utilization_bytes of this ApiDiskStatsPayload.


        :param storage_utilization_bytes: The storage_utilization_bytes of this ApiDiskStatsPayload.  # noqa: E501
        :type: int
        """

        self._storage_utilization_bytes = storage_utilization_bytes

    @property
    def timestamp(self):
        """Gets the timestamp of this ApiDiskStatsPayload.  # noqa: E501


        :return: The timestamp of this ApiDiskStatsPayload.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ApiDiskStatsPayload.


        :param timestamp: The timestamp of this ApiDiskStatsPayload.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiDiskStatsPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDiskStatsPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
