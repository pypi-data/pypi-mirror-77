# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: databus/v0/databus.proto
# plugin: python-betterproto
import logging


import allure
from dataclasses import dataclass

import betterproto


@dataclass
class OfflineComicReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass
class CommonNotifyReq(betterproto.Message):
    """databus notify 通用请求"""

    msg: str = betterproto.string_field(1)


@dataclass
class TicketConsumeReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass
class ConsumeReviewReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass
class ConsumeUpdateReviewReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass
class ConsumeBuyOrderReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass
class BuyComicReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass
class HeadBoardReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass
class NotifyReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass
class CommentReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass
class DuanwuReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass
class EmptyResp(betterproto.Message):
    pass


@dataclass
class ComradeReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


@dataclass
class SummerGiftReq(betterproto.Message):
    msg: str = betterproto.string_field(1)


class DatabusStub(betterproto.ServiceStub):
    """消费 databus 投递消息"""

    @allure.step("""消费评论消息""")
    def consume_comment(self, request: CommentReq) -> EmptyResp:
        """消费评论消息"""
        logging.getLogger(__name__).info(
            "start call " + "[consume_comment]" + " api" + "=>" + """消费评论消息"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/ConsumeComment", request, response)
        logging.getLogger(__name__).info(
            "call " + "[consume_comment]" + " api success!"
        )
        return response

    @allure.step("""处理漫画动态数据变更，比如最近更新时间等""")
    def on_comic_dynamic(self, request: NotifyReq) -> EmptyResp:
        """处理漫画动态数据变更，比如最近更新时间等"""
        logging.getLogger(__name__).info(
            "start call "
            + "[on_comic_dynamic]"
            + " api"
            + "=>"
            + """处理漫画动态数据变更，比如最近更新时间等"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/OnComicDynamic", request, response)
        logging.getLogger(__name__).info(
            "call " + "[on_comic_dynamic]" + " api success!"
        )
        return response

    @allure.step("""用户消费消息（名字是端午，可无视）""")
    def duanwu(self, request: DuanwuReq) -> EmptyResp:
        """用户消费消息（名字是端午，可无视）"""
        logging.getLogger(__name__).info(
            "start call " + "[duanwu]" + " api" + "=>" + """用户消费消息（名字是端午，可无视）"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/Duanwu", request, response)
        logging.getLogger(__name__).info("call " + "[duanwu]" + " api success!")
        return response

    @allure.step("""站友日-赠券""")
    def comrade(self, request: ComradeReq) -> EmptyResp:
        """站友日-赠券"""
        logging.getLogger(__name__).info(
            "start call " + "[comrade]" + " api" + "=>" + """站友日-赠券"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/Comrade", request, response)
        logging.getLogger(__name__).info("call " + "[comrade]" + " api success!")
        return response

    @allure.step("""阅读消息""")
    def read_comic(self, request: NotifyReq) -> EmptyResp:
        """阅读消息"""
        logging.getLogger(__name__).info(
            "start call " + "[read_comic]" + " api" + "=>" + """阅读消息"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/ReadComic", request, response)
        logging.getLogger(__name__).info("call " + "[read_comic]" + " api success!")
        return response

    @allure.step("""追漫消息""")
    def fav_comic(self, request: NotifyReq) -> EmptyResp:
        """追漫消息"""
        logging.getLogger(__name__).info(
            "start call " + "[fav_comic]" + " api" + "=>" + """追漫消息"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/FavComic", request, response)
        logging.getLogger(__name__).info("call " + "[fav_comic]" + " api success!")
        return response

    @allure.step("""用户余额变更通知""")
    def on_wallet_change(self, request: NotifyReq) -> EmptyResp:
        """用户余额变更通知"""
        logging.getLogger(__name__).info(
            "start call " + "[on_wallet_change]" + " api" + "=>" + """用户余额变更通知"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/OnWalletChange", request, response)
        logging.getLogger(__name__).info(
            "call " + "[on_wallet_change]" + " api success!"
        )
        return response

    @allure.step("""排行榜榜单消费""")
    def consume_head_board(self, request: HeadBoardReq) -> EmptyResp:
        """排行榜榜单消费"""
        logging.getLogger(__name__).info(
            "start call " + "[consume_head_board]" + " api" + "=>" + """排行榜榜单消费"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/ConsumeHeadBoard", request, response)
        logging.getLogger(__name__).info(
            "call " + "[consume_head_board]" + " api success!"
        )
        return response

    @allure.step("""用户购买漫画回调""")
    def consume_buy_comic(self, request: BuyComicReq) -> EmptyResp:
        """用户购买漫画回调"""
        logging.getLogger(__name__).info(
            "start call " + "[consume_buy_comic]" + " api" + "=>" + """用户购买漫画回调"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/ConsumeBuyComic", request, response)
        logging.getLogger(__name__).info(
            "call " + "[consume_buy_comic]" + " api success!"
        )
        return response

    @allure.step("""漫币消耗记录通知，获取月票相关""")
    def consume_buy_order(self, request: ConsumeBuyOrderReq) -> EmptyResp:
        """漫币消耗记录通知，获取月票相关"""
        logging.getLogger(__name__).info(
            "start call "
            + "[consume_buy_order]"
            + " api"
            + "=>"
            + """漫币消耗记录通知，获取月票相关"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/ConsumeBuyOrder", request, response)
        logging.getLogger(__name__).info(
            "call " + "[consume_buy_order]" + " api success!"
        )
        return response

    @allure.step("""用户月票投递""")
    def ticket_consume(self, request: TicketConsumeReq) -> EmptyResp:
        """用户月票投递"""
        logging.getLogger(__name__).info(
            "start call " + "[ticket_consume]" + " api" + "=>" + """用户月票投递"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/TicketConsume", request, response)
        logging.getLogger(__name__).info("call " + "[ticket_consume]" + " api success!")
        return response

    @allure.step("""收集风控打点数据""")
    def collect_risk_sys_data(self, request: CommonNotifyReq) -> EmptyResp:
        """收集风控打点数据"""
        logging.getLogger(__name__).info(
            "start call " + "[collect_risk_sys_data]" + " api" + "=>" + """收集风控打点数据"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/CollectRiskSysData", request, response)
        logging.getLogger(__name__).info(
            "call " + "[collect_risk_sys_data]" + " api success!"
        )
        return response

    @allure.step("""章节点赞行为""")
    def on_like(self, request: NotifyReq) -> EmptyResp:
        """章节点赞行为"""
        logging.getLogger(__name__).info(
            "start call " + "[on_like]" + " api" + "=>" + """章节点赞行为"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/OnLike", request, response)
        logging.getLogger(__name__).info("call " + "[on_like]" + " api success!")
        return response

    @allure.step("""订单表订阅 用于处理充值相关""")
    def on_pay_order_change(self, request: NotifyReq) -> EmptyResp:
        """订单表订阅 用于处理充值相关"""
        logging.getLogger(__name__).info(
            "start call "
            + "[on_pay_order_change]"
            + " api"
            + "=>"
            + """订单表订阅 用于处理充值相关"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/OnPayOrderChange", request, response)
        logging.getLogger(__name__).info(
            "call " + "[on_pay_order_change]" + " api success!"
        )
        return response

    @allure.step("""处理点评审核""")
    def consume_review(self, request: ConsumeReviewReq) -> EmptyResp:
        """处理点评审核"""
        logging.getLogger(__name__).info(
            "start call " + "[consume_review]" + " api" + "=>" + """处理点评审核"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/ConsumeReview", request, response)
        logging.getLogger(__name__).info("call " + "[consume_review]" + " api success!")
        return response

    @allure.step("""点评变更信息订阅，修改缓存 跟用户相关的点评信息缓存，都通过此接口修改缓存""")
    def consume_update_review(self, request: ConsumeUpdateReviewReq) -> EmptyResp:
        """点评变更信息订阅，修改缓存 跟用户相关的点评信息缓存，都通过此接口修改缓存"""
        logging.getLogger(__name__).info(
            "start call "
            + "[consume_update_review]"
            + " api"
            + "=>"
            + """点评变更信息订阅，修改缓存 跟用户相关的点评信息缓存，都通过此接口修改缓存"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/ConsumeUpdateReview", request, response)
        logging.getLogger(__name__).info(
            "call " + "[consume_update_review]" + " api success!"
        )
        return response

    @allure.step("""用户注销行为""")
    def account_delete(self, request: NotifyReq) -> EmptyResp:
        """用户注销行为"""
        logging.getLogger(__name__).info(
            "start call " + "[account_delete]" + " api" + "=>" + """用户注销行为"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/AccountDelete", request, response)
        logging.getLogger(__name__).info("call " + "[account_delete]" + " api success!")
        return response

    @allure.step("""漫画下线/删除回调""")
    def offline_comic(self, request: OfflineComicReq) -> EmptyResp:
        """漫画下线/删除回调"""
        logging.getLogger(__name__).info(
            "start call " + "[offline_comic]" + " api" + "=>" + """漫画下线/删除回调"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/OfflineComic", request, response)
        logging.getLogger(__name__).info("call " + "[offline_comic]" + " api success!")
        return response

    @allure.step("""百科下线/删除回调""")
    def offline_wiki(self, request: OfflineComicReq) -> EmptyResp:
        """百科下线/删除回调"""
        logging.getLogger(__name__).info(
            "start call " + "[offline_wiki]" + " api" + "=>" + """百科下线/删除回调"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/OfflineWiki", request, response)
        logging.getLogger(__name__).info("call " + "[offline_wiki]" + " api success!")
        return response

    @allure.step("""畅读卡回调""")
    def card(self, request: DuanwuReq) -> EmptyResp:
        """畅读卡回调"""
        logging.getLogger(__name__).info(
            "start call " + "[card]" + " api" + "=>" + """畅读卡回调"""
        )
        response = EmptyResp()
        self._do_twirp_rpc("/databus.v0.Databus/Card", request, response)
        logging.getLogger(__name__).info("call " + "[card]" + " api success!")
        return response
