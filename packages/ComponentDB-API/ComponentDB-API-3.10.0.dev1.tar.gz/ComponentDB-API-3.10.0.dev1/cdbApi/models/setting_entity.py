# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class SettingEntity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_valid_import': 'bool',
        'valid_string_import': 'str',
        'item_element_lists': 'list[ListTbl]',
        'settings_modification_date': 'datetime',
        'id': 'int',
        'is_valid_import_string': 'str'
    }

    attribute_map = {
        'is_valid_import': 'isValidImport',
        'valid_string_import': 'validStringImport',
        'item_element_lists': 'itemElementLists',
        'settings_modification_date': 'settingsModificationDate',
        'id': 'id',
        'is_valid_import_string': 'isValidImportString'
    }

    def __init__(self, is_valid_import=None, valid_string_import=None, item_element_lists=None, settings_modification_date=None, id=None, is_valid_import_string=None, local_vars_configuration=None):  # noqa: E501
        """SettingEntity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_valid_import = None
        self._valid_string_import = None
        self._item_element_lists = None
        self._settings_modification_date = None
        self._id = None
        self._is_valid_import_string = None
        self.discriminator = None

        if is_valid_import is not None:
            self.is_valid_import = is_valid_import
        if valid_string_import is not None:
            self.valid_string_import = valid_string_import
        if item_element_lists is not None:
            self.item_element_lists = item_element_lists
        if settings_modification_date is not None:
            self.settings_modification_date = settings_modification_date
        if id is not None:
            self.id = id
        if is_valid_import_string is not None:
            self.is_valid_import_string = is_valid_import_string

    @property
    def is_valid_import(self):
        """Gets the is_valid_import of this SettingEntity.  # noqa: E501


        :return: The is_valid_import of this SettingEntity.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid_import

    @is_valid_import.setter
    def is_valid_import(self, is_valid_import):
        """Sets the is_valid_import of this SettingEntity.


        :param is_valid_import: The is_valid_import of this SettingEntity.  # noqa: E501
        :type: bool
        """

        self._is_valid_import = is_valid_import

    @property
    def valid_string_import(self):
        """Gets the valid_string_import of this SettingEntity.  # noqa: E501


        :return: The valid_string_import of this SettingEntity.  # noqa: E501
        :rtype: str
        """
        return self._valid_string_import

    @valid_string_import.setter
    def valid_string_import(self, valid_string_import):
        """Sets the valid_string_import of this SettingEntity.


        :param valid_string_import: The valid_string_import of this SettingEntity.  # noqa: E501
        :type: str
        """

        self._valid_string_import = valid_string_import

    @property
    def item_element_lists(self):
        """Gets the item_element_lists of this SettingEntity.  # noqa: E501


        :return: The item_element_lists of this SettingEntity.  # noqa: E501
        :rtype: list[ListTbl]
        """
        return self._item_element_lists

    @item_element_lists.setter
    def item_element_lists(self, item_element_lists):
        """Sets the item_element_lists of this SettingEntity.


        :param item_element_lists: The item_element_lists of this SettingEntity.  # noqa: E501
        :type: list[ListTbl]
        """

        self._item_element_lists = item_element_lists

    @property
    def settings_modification_date(self):
        """Gets the settings_modification_date of this SettingEntity.  # noqa: E501


        :return: The settings_modification_date of this SettingEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._settings_modification_date

    @settings_modification_date.setter
    def settings_modification_date(self, settings_modification_date):
        """Sets the settings_modification_date of this SettingEntity.


        :param settings_modification_date: The settings_modification_date of this SettingEntity.  # noqa: E501
        :type: datetime
        """

        self._settings_modification_date = settings_modification_date

    @property
    def id(self):
        """Gets the id of this SettingEntity.  # noqa: E501


        :return: The id of this SettingEntity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SettingEntity.


        :param id: The id of this SettingEntity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_valid_import_string(self):
        """Gets the is_valid_import_string of this SettingEntity.  # noqa: E501


        :return: The is_valid_import_string of this SettingEntity.  # noqa: E501
        :rtype: str
        """
        return self._is_valid_import_string

    @is_valid_import_string.setter
    def is_valid_import_string(self, is_valid_import_string):
        """Sets the is_valid_import_string of this SettingEntity.


        :param is_valid_import_string: The is_valid_import_string of this SettingEntity.  # noqa: E501
        :type: str
        """

        self._is_valid_import_string = is_valid_import_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SettingEntity):
            return True

        return self.to_dict() != other.to_dict()
