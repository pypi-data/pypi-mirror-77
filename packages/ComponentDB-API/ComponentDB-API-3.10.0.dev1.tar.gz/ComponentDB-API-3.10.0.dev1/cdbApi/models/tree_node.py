# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class TreeNode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'selected': 'bool',
        'child_count': 'int',
        'expanded': 'bool',
        'row_key': 'str',
        'selectable': 'bool',
        'partial_selected': 'bool',
        'data': 'object',
        'children': 'list[TreeNode]',
        'parent': 'TreeNode',
        'type': 'str',
        'leaf': 'bool'
    }

    attribute_map = {
        'selected': 'selected',
        'child_count': 'childCount',
        'expanded': 'expanded',
        'row_key': 'rowKey',
        'selectable': 'selectable',
        'partial_selected': 'partialSelected',
        'data': 'data',
        'children': 'children',
        'parent': 'parent',
        'type': 'type',
        'leaf': 'leaf'
    }

    def __init__(self, selected=None, child_count=None, expanded=None, row_key=None, selectable=None, partial_selected=None, data=None, children=None, parent=None, type=None, leaf=None, local_vars_configuration=None):  # noqa: E501
        """TreeNode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._selected = None
        self._child_count = None
        self._expanded = None
        self._row_key = None
        self._selectable = None
        self._partial_selected = None
        self._data = None
        self._children = None
        self._parent = None
        self._type = None
        self._leaf = None
        self.discriminator = None

        if selected is not None:
            self.selected = selected
        if child_count is not None:
            self.child_count = child_count
        if expanded is not None:
            self.expanded = expanded
        if row_key is not None:
            self.row_key = row_key
        if selectable is not None:
            self.selectable = selectable
        if partial_selected is not None:
            self.partial_selected = partial_selected
        if data is not None:
            self.data = data
        if children is not None:
            self.children = children
        if parent is not None:
            self.parent = parent
        if type is not None:
            self.type = type
        if leaf is not None:
            self.leaf = leaf

    @property
    def selected(self):
        """Gets the selected of this TreeNode.  # noqa: E501


        :return: The selected of this TreeNode.  # noqa: E501
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this TreeNode.


        :param selected: The selected of this TreeNode.  # noqa: E501
        :type: bool
        """

        self._selected = selected

    @property
    def child_count(self):
        """Gets the child_count of this TreeNode.  # noqa: E501


        :return: The child_count of this TreeNode.  # noqa: E501
        :rtype: int
        """
        return self._child_count

    @child_count.setter
    def child_count(self, child_count):
        """Sets the child_count of this TreeNode.


        :param child_count: The child_count of this TreeNode.  # noqa: E501
        :type: int
        """

        self._child_count = child_count

    @property
    def expanded(self):
        """Gets the expanded of this TreeNode.  # noqa: E501


        :return: The expanded of this TreeNode.  # noqa: E501
        :rtype: bool
        """
        return self._expanded

    @expanded.setter
    def expanded(self, expanded):
        """Sets the expanded of this TreeNode.


        :param expanded: The expanded of this TreeNode.  # noqa: E501
        :type: bool
        """

        self._expanded = expanded

    @property
    def row_key(self):
        """Gets the row_key of this TreeNode.  # noqa: E501


        :return: The row_key of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._row_key

    @row_key.setter
    def row_key(self, row_key):
        """Sets the row_key of this TreeNode.


        :param row_key: The row_key of this TreeNode.  # noqa: E501
        :type: str
        """

        self._row_key = row_key

    @property
    def selectable(self):
        """Gets the selectable of this TreeNode.  # noqa: E501


        :return: The selectable of this TreeNode.  # noqa: E501
        :rtype: bool
        """
        return self._selectable

    @selectable.setter
    def selectable(self, selectable):
        """Sets the selectable of this TreeNode.


        :param selectable: The selectable of this TreeNode.  # noqa: E501
        :type: bool
        """

        self._selectable = selectable

    @property
    def partial_selected(self):
        """Gets the partial_selected of this TreeNode.  # noqa: E501


        :return: The partial_selected of this TreeNode.  # noqa: E501
        :rtype: bool
        """
        return self._partial_selected

    @partial_selected.setter
    def partial_selected(self, partial_selected):
        """Sets the partial_selected of this TreeNode.


        :param partial_selected: The partial_selected of this TreeNode.  # noqa: E501
        :type: bool
        """

        self._partial_selected = partial_selected

    @property
    def data(self):
        """Gets the data of this TreeNode.  # noqa: E501


        :return: The data of this TreeNode.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TreeNode.


        :param data: The data of this TreeNode.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def children(self):
        """Gets the children of this TreeNode.  # noqa: E501


        :return: The children of this TreeNode.  # noqa: E501
        :rtype: list[TreeNode]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this TreeNode.


        :param children: The children of this TreeNode.  # noqa: E501
        :type: list[TreeNode]
        """

        self._children = children

    @property
    def parent(self):
        """Gets the parent of this TreeNode.  # noqa: E501


        :return: The parent of this TreeNode.  # noqa: E501
        :rtype: TreeNode
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this TreeNode.


        :param parent: The parent of this TreeNode.  # noqa: E501
        :type: TreeNode
        """

        self._parent = parent

    @property
    def type(self):
        """Gets the type of this TreeNode.  # noqa: E501


        :return: The type of this TreeNode.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TreeNode.


        :param type: The type of this TreeNode.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def leaf(self):
        """Gets the leaf of this TreeNode.  # noqa: E501


        :return: The leaf of this TreeNode.  # noqa: E501
        :rtype: bool
        """
        return self._leaf

    @leaf.setter
    def leaf(self, leaf):
        """Sets the leaf of this TreeNode.


        :param leaf: The leaf of this TreeNode.  # noqa: E501
        :type: bool
        """

        self._leaf = leaf

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TreeNode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TreeNode):
            return True

        return self.to_dict() != other.to_dict()
