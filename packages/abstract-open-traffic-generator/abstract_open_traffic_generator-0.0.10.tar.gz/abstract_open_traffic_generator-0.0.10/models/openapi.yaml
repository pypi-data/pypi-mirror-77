openapi: 3.0.3
info:
  title: Open Traffic Generator API
  description: The open traffic generator API
  version: 1.0.0
  contact:
    name: Open Traffic Generator Project Team
    email: andy.balogh@keysight.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
- url: /
paths:
  /state:
    description: State API
    post:
      tags:
      - Api
      operationId: set_state
      description: Sets the desired state of the traffic generator.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State.Desired'
      responses:
        '204':
          description: No content
    get:
      tags:
      - Api
      operationId: get_state
      description: Gets the current state of the traffic generator
      responses:
        '200':
          description: The current state of the traffic generator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State.Current'
components:
  schemas:
    State.Config:
      description: placeholder
      type: object
      required:
      - state
      properties:
        state:
          description: 'The requested state to be applied to the current configuration.

            CREATE will overwrite any configuration content on the traffic  generator
            with the payload content.

            UPDATE will update the current configuration content on the traffic  generator
            with the payload content. The configuration can be updated with partial
            content or as an  entire configuration. The traffic generator receiving
            the configuration must resolve any changes in the submitted configuration.

            To delete items from the configuration use UPDATE and submit the   entire
            configuration with the items that are to be deleted missing  from the
            payload content.'
          type: string
          enum:
          - CREATE
          - UPDATE
        ports:
          description: The ports that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Port.Port'
        devices:
          description: The devices that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Emulated.DeviceGroup'
        flows:
          description: The flows that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Flow.Flow'
        captures:
          description: The captures that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Capture.Capture'
    State.Flow:
      description: Request for the traffic generator to move flows to a specific state.
      type: object
      required:
      - state
      properties:
        state:
          description: The requested state of the flows.
          type: string
          enum:
          - START
          - STOP
          - PAUSE
        flows:
          description: The unique names of flow objects.
          type: array
          items:
            type: string
    State.Port:
      description: Request for the traffic generator to move ports to a specific state.
      type: object
      required:
      - state
      properties:
        state:
          description: The requested state of the port.
          type: string
          enum:
          - LINK_UP
          - LINK_DOWN
        ports:
          description: The unique names of port objects.
          type: array
          items:
            type: string
    State.Device:
      description: Request for the traffic generator to move emulated devices to a
        specific state.
      type: object
      required:
      - state
      properties:
        state:
          description: The requested state of the devices.
          type: string
          enum:
          - START
          - STOP
        devices:
          description: The unique names of emulated device objects.
          type: array
          items:
            type: string
    State.Capture:
      description: Request for the traffic generator to move capture to a specific
        state.
      type: object
      required:
      - state
      properties:
        state:
          type: string
          enum:
          - START
          - STOP
        captures:
          description: The unique names of capture objects.
          type: array
          items:
            type: string
    State.Desired:
      description: 'The desired state of the traffic generator '
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          enum:
          - config
          - port
          - device
          - flow
          - capture
        config:
          $ref: '#/components/schemas/State.Config'
        port:
          $ref: '#/components/schemas/State.Port'
        device:
          $ref: '#/components/schemas/State.Device'
        flow:
          $ref: '#/components/schemas/State.Flow'
        capture:
          $ref: '#/components/schemas/State.Capture'
    State.Current:
      description: The desired and actual state of the traffic generator
      type: object
      properties:
        states:
          type: string
          enum:
          - CONFIG
          - FLOW
          - CAPTURE
        flow:
          description: A list of configured flow names If the list is empty the type
            will apply to all configured flows
          type: array
          items:
            type: string
        capture:
          type: integer
          description: The number of seconds to wait for all the flows to be in the
            specified state
    Port.Port:
      description: "An abstract test port used to associate a unique name with the\
        \ location of a physical or virtual test location.\nSome different types of\
        \ test locations are:\n  - physical appliance with multiple ports\n  - physical\
        \ chassis with multiple cards and ports\n  - local interface\n  - virtual\
        \ machine\n  - docker container"
      type: object
      required:
      - name
      - location
      properties:
        name:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        location:
          $ref: '#/components/schemas/Port.Location'
    Port.Location:
      description: The location of a test resource.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          enum:
          - physical
          - interface
          - virtual
          - container
        physical:
          $ref: '#/components/schemas/Port.Physical'
        interface:
          $ref: '#/components/schemas/Port.Interface'
        virtual:
          $ref: '#/components/schemas/Port.Virtual'
        container:
          $ref: '#/components/schemas/Port.Container'
    Port.Physical:
      description: A physical test port
      type: object
      required:
      - address
      - port
      properties:
        address:
          type: string
        board:
          type: number
          default: 1
        port:
          type: number
          default: 1
        fanout:
          type: number
          default: null
    Port.Interface:
      description: An interface test port
      type: object
      required:
      - name
      properties:
        name:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Port.Virtual:
      description: A virtual test port
      type: object
      required:
      - address
      properties:
        address:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
    Port.Container:
      description: A container test port
      type: object
      required:
      - address
      - port
      properties:
        address:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        port:
          type: number
    Emulated.DeviceGroup:
      description: An abstract container for emulated device containers.
      type: object
      required:
      - name
      properties:
        name:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        ports:
          description: One or more port names that the emulated device containers
            will share.
          type: array
          items:
            type: string
        devices:
          description: One or more emulated device containers.
          type: array
          items:
            $ref: '#/components/schemas/Emulated.Device'
    Emulated.Device:
      description: An abstract container for emulated devices.
      type: object
      required:
      - name
      properties:
        name:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        devices_per_port:
          description: The number of emulated devices that will be created on each
            port.
          type: integer
          minimum: 1
          maximum: 100000000
        parent:
          description: 'The name of a device container or network container that is  the
            parent of this container.  Use this property to establish a hierarchical
            relationship between  device containers. A non-existent value indicates
            the device container is the  root of the hierarchy.  '
          type: string
        protocols:
          description: The emulated protocols in this device container.
          type: array
          items:
            $ref: '#/components/schemas/Emulated.Protocol'
    Emulated.Protocol:
      description: An abstract container for emulated protocols.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          enum:
          - ethernet
          - vlan
          - ipv4
          - bgpv4
        ethernet:
          $ref: '#/components/schemas/Emulated.Ethernet'
        vlan:
          $ref: '#/components/schemas/Emulated.Vlan'
        ipv4:
          $ref: '#/components/schemas/Emulated.Ipv4'
        bgpv4:
          $ref: '#/components/schemas/Emulated.Bgpv4'
    Emulated.Ethernet:
      description: Emulated ethernet protocol
      type: object
      required:
      - name
      properties:
        name:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        parent:
          description: 'The name of a device container or network container that is  the
            parent of this container.  Use this property to establish a hierarchical
            relationship between  device containers. A non-existent value indicates
            the device container is the  root of the hierarchy.  '
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        mac:
          $ref: '#/components/schemas/Emulated.Pattern'
        mtu:
          $ref: '#/components/schemas/Emulated.Pattern'
    Emulated.Pattern:
      description: A container for emulated device property patterns.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          enum:
          - fixed
          - list
          - increment
          - decrement
          - random
        fixed:
          type: string
        list:
          type: array
          items:
            type: string
        increment:
          $ref: '#/components/schemas/Emulated.Increment'
        decrement:
          $ref: '#/components/schemas/Emulated.Decrement'
        random:
          $ref: '#/components/schemas/Emulated.Random'
    Emulated.Increment:
      description: An incrementing pattern.
      type: object
      properties:
        start:
          type: string
        step:
          type: string
    Emulated.Decrement:
      description: A decrementing pattern.
      type: object
      properties:
        start:
          type: string
        step:
          type: string
    Emulated.Random:
      description: A repeatable random range pattern.
      type: object
      properties:
        min:
          type: string
        max:
          type: string
        step:
          type: number
        seed:
          type: string
    Emulated.Vlan:
      description: Emulated vlan protocol
      type: object
      required:
      - name
      properties:
        name:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        parent:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        tpid:
          description: Vlan tag protocol identifier.
          $ref: '#/components/schemas/Emulated.Pattern'
        priority:
          description: Vlan priority.
          $ref: '#/components/schemas/Emulated.Pattern'
        id:
          description: Vlan id.
          $ref: '#/components/schemas/Emulated.Pattern'
    Emulated.Ipv4:
      description: Emulated ipv4 protocol
      type: object
      required:
      - name
      properties:
        name:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        address:
          $ref: '#/components/schemas/Emulated.Pattern'
        gateway:
          $ref: '#/components/schemas/Emulated.Pattern'
        prefix:
          $ref: '#/components/schemas/Emulated.Pattern'
    Emulated.Bgpv4:
      description: Emulated bgpv4 protocol
      type: object
      required:
      - name
      properties:
        name:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        as_number_2_byte:
          $ref: '#/components/schemas/Emulated.Pattern'
        dut_as_number_2_byte:
          $ref: '#/components/schemas/Emulated.Pattern'
        as_number_4_byte:
          $ref: '#/components/schemas/Emulated.Pattern'
        as_number_set_mode:
          $ref: '#/components/schemas/Emulated.Pattern'
        type:
          description: The type of BGP topology.  External BGP (EBGP) is used for
            BGP links between two or more  Autonomous Systems. Internal BGP (IBGP)
            is used within a single Autonomous System.
          type: string
          enum:
          - IBGP
          - EBGP
        hold_time_interval:
          $ref: '#/components/schemas/Emulated.Pattern'
        keep_alive_interval:
          $ref: '#/components/schemas/Emulated.Pattern'
        graceful_restart:
          $ref: '#/components/schemas/Emulated.Pattern'
        authentication:
          $ref: '#/components/schemas/Emulated.Pattern'
        ttl:
          $ref: '#/components/schemas/Emulated.Pattern'
        dut_ipv4_address:
          $ref: '#/components/schemas/Emulated.Pattern'
    Flow.Flow:
      description: A high level data plane traffic flow. Acts as a container for endpoints,
        frame size, frame rate, duration and packet headers.
      type: object
      required:
      - name
      - endpoint
      properties:
        name:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        endpoint:
          $ref: '#/components/schemas/Flow.Endpoint'
        packet:
          description: The packet is a list of traffic protocol headers. The order
            of traffic protocol headers assigned to the list is the order they will
            appear on the wire.
          type: array
          items:
            $ref: '#/components/schemas/Flow.Header'
        size:
          $ref: '#/components/schemas/Flow.Size'
        rate:
          $ref: '#/components/schemas/Flow.Rate'
        duration:
          $ref: '#/components/schemas/Flow.Duration'
    Flow.Endpoint:
      description: A container for different types of endpoints. The endpoint choice
        dictates the type of flow.
      type: object
      required:
      - choice
      properties:
        choice:
          description: The type of endpoint that the flow will originate from.
          type: string
          enum:
          - port
          - device
        port:
          $ref: '#/components/schemas/Flow.PortEndpoint'
        device:
          $ref: '#/components/schemas/Flow.DeviceEndpoint'
    Flow.PortEndpoint:
      description: An endpoint that contains a transmit port and 0..n receive ports.
      type: object
      required:
      - tx_port
      properties:
        tx_port:
          description: The unique name of a port that is the transmit port.
          type: string
        rx_ports:
          description: The unique names of ports that are the intended receive ports.
          type: array
          items:
            type: string
        tx_patterns:
          description: A list of custom patterns that will be applied to the transmit
            port.
          type: array
          items:
            $ref: '#/components/schemas/Flow.PortPattern'
    Flow.DeviceEndpoint:
      description: An endpoint that contains 1..n emulated transmit devices and 1..n  emulated
        receive devices.
      type: object
      required:
      - tx_devices
      - rx_devices
      properties:
        tx_devices:
          description: The unique names of devices that will be transmitting.
          type: array
          items:
            type: string
        rx_devices:
          description: The unique names of devices that will be receiving.
          type: array
          items:
            type: string
        packet_encap:
          description: The encapsulation determines what packet headers will be  included
            by default.
          type: string
          enum:
          - none
          - ethernet
          - vlan
          - ipv4
          - ipv6
        src_dst_mesh:
          type: string
          enum:
          - none
          - one_to_one
          - many_to_many
          - full_mesh
        route_host_mesh:
          type: string
          enum:
          - one_to_one
          - full_mesh
        bi_directional:
          type: boolean
        allow_self_destined:
          type: boolean
    Flow.PortPattern:
      description: A pattern that is applied to a test port. The name of the pattern
        will be reflected in the port results.
      type: object
      required:
      - name
      properties:
        name:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        offset:
          type: integer
          description: The offset from the beginning of the packet
        pattern:
          type: string
          description: The value of the pattern
        mask:
          type: string
          description: The mask value to be applied against the pattern
    Flow.Header:
      description: Container for all traffic packet headers
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          enum:
          - custom
          - ethernet
          - vlan
          - ipv4
          - pfcpause
        custom:
          $ref: '#/components/schemas/Flow.Custom'
        ethernet:
          $ref: '#/components/schemas/Flow.Ethernet'
        vlan:
          $ref: '#/components/schemas/Flow.Vlan'
        ipv4:
          $ref: '#/components/schemas/Flow.Ipv4'
        pfcpause:
          $ref: '#/components/schemas/Flow.PfcPause'
        group_by:
          type: array
          items:
            $ref: '#/components/schemas/Flow.GroupBy'
    Flow.Custom:
      type: object
      description: Custom packet header
      required:
      - bytes
      properties:
        bytes:
          description: 'A custom packet header defined as a string of hex bytes. The
            string MUST contain valid hex characters. Spaces or colons can be part
            of the bytes but will be discarded This can be used to create a custom
            protocol from other inputs  such as scapy, wireshark, pcap etc.

            An example of ethernet/ipv4: ''00000000000200000000000108004500001400010000400066e70a0000010a000002'''
          type: string
          pattern: '^[A-Fa-f0-9: ]+$'
        patterns:
          description: Modify the bytes with bit based patterns
          type: array
          items:
            $ref: '#/components/schemas/Flow.BitPattern'
    Flow.BitPattern:
      description: Container for a bit pattern
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          enum:
          - bitlist
          - bitcounter
        bitlist:
          $ref: '#/components/schemas/Flow.BitList'
        bitcounter:
          $ref: '#/components/schemas/Flow.BitCounter'
    Flow.BitList:
      type: object
      description: A pattern which is a list of values.
      properties:
        offset:
          description: Bit offset in the packet at which the pattern will be applied
          type: integer
          minimum: 1
          default: 1
        length:
          description: The number of bits in the packet that the pattern will span
          type: integer
          minimum: 1
          default: 1
        count:
          type: integer
          description: The number of values to generate before repeating
          default: 1
        values:
          type: array
          items:
            description: The value that the packet offset to offset + length will
              be either incremented or decremented by. If the value is greater than
              the length it will be truncated.
            type: string
            pattern: '^[A-Fa-f0-9: ]+$'
    Flow.BitCounter:
      type: object
      description: An incrementing pattern
      properties:
        offset:
          description: Bit offset in the packet at which the pattern will be applied
          type: integer
          minimum: 0
          default: 0
        length:
          description: The number of bits in the packet that the pattern will span
          type: integer
          minimum: 1
          default: 32
        count:
          type: integer
          description: The number of values to generate before repeating A value of
            0 means the pattern will count continuously
          minimum: 1
          default: 1
        start:
          description: The starting value of the pattern. If the value is greater
            than the length it will be truncated.
          type: string
          pattern: '^[A-Fa-f0-9: ]+$'
          default: 0
        step:
          description: The amount the start value will be incremented by If the value
            is greater than the length it will be truncated.
          type: string
          pattern: '^[A-Fa-f0-9: ]+$'
          default: 0
    Flow.Ethernet:
      description: Ethernet packet header
      type: object
      properties:
        dst:
          $ref: '#/components/schemas/Flow.Pattern'
        src:
          $ref: '#/components/schemas/Flow.Pattern'
        ether_type:
          $ref: '#/components/schemas/Flow.Pattern'
    Flow.Pattern:
      description: A container for packet header field patterns. Possible patterns
        are fixed, list, increment, decrement, random.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          enum:
          - fixed
          - list
          - increment
          - decrement
          - random
        fixed:
          type: string
        list:
          type: array
          items:
            type: string
        increment:
          $ref: '#/components/schemas/Flow.Increment'
        decrement:
          $ref: '#/components/schemas/Flow.Decrement'
        random:
          $ref: '#/components/schemas/Flow.Random'
    Flow.Increment:
      description: An incrementing pattern.
      type: object
      properties:
        start:
          type: string
        step:
          type: string
        count:
          type: number
    Flow.Decrement:
      description: A decrementing pattern.
      type: object
      properties:
        start:
          type: string
        step:
          type: string
        count:
          type: number
    Flow.Random:
      description: A repeatable random range pattern.
      type: object
      properties:
        min:
          type: string
        max:
          type: string
        step:
          type: number
        seed:
          type: string
        count:
          type: number
    Flow.Vlan:
      description: Vlan packet header
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/Flow.Pattern'
        cfi:
          $ref: '#/components/schemas/Flow.Pattern'
        id:
          $ref: '#/components/schemas/Flow.Pattern'
        protocol:
          $ref: '#/components/schemas/Flow.Pattern'
    Flow.Ipv4:
      description: Ipv4 packet header
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/Flow.Ipv4.Priority'
        src:
          $ref: '#/components/schemas/Flow.Pattern'
        dst:
          $ref: '#/components/schemas/Flow.Pattern'
    Flow.Ipv4.Priority:
      description: Ipv4 ip priority that can be one of RAW or DSCP.
      type: object
      x-constants:
        PRIORITY_RAW: 0
      required:
      - choice
      properties:
        choice:
          type: string
          enum:
          - dscp
          - raw
        dscp:
          $ref: '#/components/schemas/Flow.Ipv4.Dscp'
        raw:
          $ref: '#/components/schemas/Flow.Pattern'
    Flow.Ipv4.Dscp:
      description: 'Differentiated services code point (DSCP) packet field.

        PHB (per-hop-behavior) value is 6 bits: >=0 PHB <=63. ECN (explicit-congestion-notification)
        value is 2 bits: >=0 ECN <=3'
      type: object
      x-constants:
        PHB_DEFAULT: 0
        PHB_CS1: 8
        PHB_CS2: 16
        PHB_CS3: 24
        PHB_CS4: 32
        PHB_CS5: 40
        PHB_CS6: 48
        PHB_CS7: 56
        PHB_EF46: 46
        PHB_AF11: 10
        PHB_AF12: 12
        PHB_AF13: 14
        PHB_AF21: 18
        PHB_AF22: 20
        PHB_AF23: 22
        PHB_AF31: 26
        PHB_AF32: 28
        PHB_AF33: 30
        PHB_AF41: 24
        PHB_AF42: 36
        PHB_AF43: 38
        ECN_NON_CAPABLE: 0
        ECN_CAPABLE_TRANSPORT_0: 1
        ECN_CAPABLE_TRANSPORT_1: 2
        ECN_CONGESTION_ENCOUNTERED: 3
      properties:
        phb:
          $ref: '#/components/schemas/Flow.Pattern'
        ecn:
          $ref: '#/components/schemas/Flow.Pattern'
    Flow.PfcPause:
      description: 'IEEE 802.1Qbb PFC Pause packet header. - dst: 01:80:C2:00:00:01
        48bits - src: 48bits  - ether_type: 0x8808 16bits - control_op_code: 0x0101
        16bits - class_enable_vector: 16bits - pause_class_0: 0x0000 16bits - pause_class_1:
        0x0000 16bits - pause_class_2: 0x0000 16bits - pause_class_3: 0x0000 16bits
        - pause_class_4: 0x0000 16bits - pause_class_5: 0x0000 16bits - pause_class_6:
        0x0000 16bits - pause_class_7: 0x0000 16bits'
      type: object
      properties:
        dst:
          $ref: '#/components/schemas/Flow.Pattern'
        src:
          $ref: '#/components/schemas/Flow.Pattern'
        ether_type:
          $ref: '#/components/schemas/Flow.Pattern'
        control_op_code:
          $ref: '#/components/schemas/Flow.Pattern'
        class_enable_vector:
          $ref: '#/components/schemas/Flow.Pattern'
        pause_class_0:
          $ref: '#/components/schemas/Flow.Pattern'
        pause_class_1:
          $ref: '#/components/schemas/Flow.Pattern'
        pause_class_2:
          $ref: '#/components/schemas/Flow.Pattern'
        pause_class_3:
          $ref: '#/components/schemas/Flow.Pattern'
        pause_class_4:
          $ref: '#/components/schemas/Flow.Pattern'
        pause_class_5:
          $ref: '#/components/schemas/Flow.Pattern'
        pause_class_6:
          $ref: '#/components/schemas/Flow.Pattern'
        pause_class_7:
          $ref: '#/components/schemas/Flow.Pattern'
    Flow.GroupBy:
      type: object
      description: 'Group results '
      required:
      - field
      - label
      properties:
        field:
          type: string
        label:
          type: string
    Flow.Size:
      description: The frame size which overrides the total length of the packet
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          enum:
          - fixed
          - increment
          - random
        fixed:
          type: integer
          default: 64
        increment:
          $ref: '#/components/schemas/Flow.SizeIncrement'
        random:
          $ref: '#/components/schemas/Flow.SizeRandom'
    Flow.SizeIncrement:
      type: object
      description: Frame size that increments from a starting size to  an ending size
        incrementing by a step size.
      required:
      - start
      - end
      - step
      properties:
        start:
          description: Starting frame size in bytes
          type: integer
          minimum: 1
          default: 64
        end:
          description: Ending frame size in bytes
          type: integer
          minimum: 64
          default: 1518
        step:
          description: Step frame size in bytes
          type: integer
          default: 1
    Flow.SizeRandom:
      type: object
      description: Random frame size from a min value to a max value.
      required:
      - min
      - max
      properties:
        min:
          type: integer
          default: 64
        max:
          type: integer
          default: 1518
    Flow.Rate:
      type: object
      description: The rate of packet transmission
      required:
      - unit
      - value
      properties:
        unit:
          description: The value is a unit of this.
          type: string
          enum:
          - pps
          - bps
          - kbps
          - mbps
          - gbps
          - line
        value:
          description: The actual rate.
          type: integer
        gap:
          description: The minimum gap in bytes between packets.
          type: integer
          minimum: 8
          maximum: 258
    Flow.Duration:
      description: 'A container for different transmit durations. '
      type: object
      properties:
        choice:
          type: string
          enum:
          - fixed
          - burst
        fixed:
          $ref: '#/components/schemas/Flow.Fixed'
        burst:
          $ref: '#/components/schemas/Flow.Burst'
    Flow.Fixed:
      description: A fixed number of packets will be transmitted after which the flow
        will stop. If the number of packets is set to 0 the flow will not stop.
      type: object
      properties:
        delay:
          description: Start transmit of the flow after a delay of this number of
            bytes.
          type: integer
          minimum: 2
          maximum: 2000000
        packets:
          description: Stop transmit of the flow after this number of packets. A value
            of 0 means that the flow will not stop transmitting.
          type: integer
          default: 0
    Flow.Burst:
      description: A continuous burst of packets that will not automatically stop.
      type: object
      properties:
        gap:
          description: The gap between each burst as a number of bytes.
          type: integer
          minimum: 1
          maximum: 2000000
        packets:
          description: The number of packets transmitted per burst.
          type: integer
          minimum: 1
    Capture.Capture:
      description: Capture model
      type: object
      required:
      - name
      properties:
        name:
          description: Unique name of an object that is the primary key for objects
            found in  arrays.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
        ports:
          description: A list of port names to configure capture settings on
          type: array
          items:
            type: string
        filters:
          type: string
