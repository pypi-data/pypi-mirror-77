# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_api.models.document import Document  # noqa: F401,E501


class Appendjsonparams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'language': 'str',
        'document': 'Document'
    }

    attribute_map = {
        'dataset': 'dataset',
        'language': 'language',
        'document': 'document'
    }

    def __init__(self, dataset=None, language=None, document=None):  # noqa: E501
        """Appendjsonparams - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._language = None
        self._document = None
        self.discriminator = None

        self.dataset = dataset
        if language is not None:
            self.language = language
        if document is not None:
            self.document = document

    @property
    def dataset(self):
        """Gets the dataset of this Appendjsonparams.  # noqa: E501

        Dataset name  # noqa: E501

        :return: The dataset of this Appendjsonparams.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this Appendjsonparams.

        Dataset name  # noqa: E501

        :param dataset: The dataset of this Appendjsonparams.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def language(self):
        """Gets the language of this Appendjsonparams.  # noqa: E501

        Specify a language to override language detection.  # noqa: E501

        :return: The language of this Appendjsonparams.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Appendjsonparams.

        Specify a language to override language detection.  # noqa: E501

        :param language: The language of this Appendjsonparams.  # noqa: E501
        :type: str
        """
        allowed_values = ["arabic", "chinese", "chinese_trad", "english", "farsi", "french", "german", "hindi", "italian", "japanese", "portuguese", "russian", "spanish"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def document(self):
        """Gets the document of this Appendjsonparams.  # noqa: E501


        :return: The document of this Appendjsonparams.  # noqa: E501
        :rtype: Document
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this Appendjsonparams.


        :param document: The document of this Appendjsonparams.  # noqa: E501
        :type: Document
        """

        self._document = document

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Appendjsonparams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Appendjsonparams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
