# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdminManageDatasetModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'user_sel': 'str',
        'dataset': 'str',
        'permission': 'int',
        'action': 'str'
    }

    attribute_map = {
        'owner': 'owner',
        'user_sel': 'user_sel',
        'dataset': 'dataset',
        'permission': 'permission',
        'action': 'action'
    }

    def __init__(self, owner=None, user_sel=None, dataset=None, permission=None, action=None):  # noqa: E501
        """AdminManageDatasetModel - a model defined in Swagger"""  # noqa: E501

        self._owner = None
        self._user_sel = None
        self._dataset = None
        self._permission = None
        self._action = None
        self.discriminator = None

        self.owner = owner
        self.user_sel = user_sel
        self.dataset = dataset
        self.permission = permission
        self.action = action

    @property
    def owner(self):
        """Gets the owner of this AdminManageDatasetModel.  # noqa: E501

        Owner email  # noqa: E501

        :return: The owner of this AdminManageDatasetModel.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AdminManageDatasetModel.

        Owner email  # noqa: E501

        :param owner: The owner of this AdminManageDatasetModel.  # noqa: E501
        :type: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def user_sel(self):
        """Gets the user_sel of this AdminManageDatasetModel.  # noqa: E501

        Selected user email  # noqa: E501

        :return: The user_sel of this AdminManageDatasetModel.  # noqa: E501
        :rtype: str
        """
        return self._user_sel

    @user_sel.setter
    def user_sel(self, user_sel):
        """Sets the user_sel of this AdminManageDatasetModel.

        Selected user email  # noqa: E501

        :param user_sel: The user_sel of this AdminManageDatasetModel.  # noqa: E501
        :type: str
        """
        if user_sel is None:
            raise ValueError("Invalid value for `user_sel`, must not be `None`")  # noqa: E501

        self._user_sel = user_sel

    @property
    def dataset(self):
        """Gets the dataset of this AdminManageDatasetModel.  # noqa: E501

        Dataset name  # noqa: E501

        :return: The dataset of this AdminManageDatasetModel.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this AdminManageDatasetModel.

        Dataset name  # noqa: E501

        :param dataset: The dataset of this AdminManageDatasetModel.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def permission(self):
        """Gets the permission of this AdminManageDatasetModel.  # noqa: E501

        Dataset permission: 1: read-only, 2: read-write  # noqa: E501

        :return: The permission of this AdminManageDatasetModel.  # noqa: E501
        :rtype: int
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this AdminManageDatasetModel.

        Dataset permission: 1: read-only, 2: read-write  # noqa: E501

        :param permission: The permission of this AdminManageDatasetModel.  # noqa: E501
        :type: int
        """
        if permission is None:
            raise ValueError("Invalid value for `permission`, must not be `None`")  # noqa: E501

        self._permission = permission

    @property
    def action(self):
        """Gets the action of this AdminManageDatasetModel.  # noqa: E501

        Dataset action: share, unshare, udpate  # noqa: E501

        :return: The action of this AdminManageDatasetModel.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AdminManageDatasetModel.

        Dataset action: share, unshare, udpate  # noqa: E501

        :param action: The action of this AdminManageDatasetModel.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminManageDatasetModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminManageDatasetModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
