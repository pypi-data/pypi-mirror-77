# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'str',
        'user_email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'api_key': 'str',
        'phone': 'str',
        'company': 'str',
        'title': 'str',
        'settings': 'str',
        'reg_time': 'str',
        'license_id': 'str',
        'license_type': 'str',
        'expiry': 'str',
        'role': 'str'
    }

    attribute_map = {
        'job_id': 'job_id',
        'user_email': 'user_email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'api_key': 'api_key',
        'phone': 'phone',
        'company': 'company',
        'title': 'title',
        'settings': 'settings',
        'reg_time': 'reg_time',
        'license_id': 'license_id',
        'license_type': 'license_type',
        'expiry': 'expiry',
        'role': 'role'
    }

    def __init__(self, job_id=None, user_email=None, first_name=None, last_name=None, api_key=None, phone=None, company=None, title=None, settings=None, reg_time=None, license_id=None, license_type=None, expiry=None, role=None):  # noqa: E501
        """UserModel - a model defined in Swagger"""  # noqa: E501

        self._job_id = None
        self._user_email = None
        self._first_name = None
        self._last_name = None
        self._api_key = None
        self._phone = None
        self._company = None
        self._title = None
        self._settings = None
        self._reg_time = None
        self._license_id = None
        self._license_type = None
        self._expiry = None
        self._role = None
        self.discriminator = None

        if job_id is not None:
            self.job_id = job_id
        if user_email is not None:
            self.user_email = user_email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if api_key is not None:
            self.api_key = api_key
        if phone is not None:
            self.phone = phone
        if company is not None:
            self.company = company
        if title is not None:
            self.title = title
        if settings is not None:
            self.settings = settings
        if reg_time is not None:
            self.reg_time = reg_time
        if license_id is not None:
            self.license_id = license_id
        if license_type is not None:
            self.license_type = license_type
        if expiry is not None:
            self.expiry = expiry
        if role is not None:
            self.role = role

    @property
    def job_id(self):
        """Gets the job_id of this UserModel.  # noqa: E501

        If the job is taking too long, job_id is returned, GET /jobs can then be used to poll for results.  # noqa: E501

        :return: The job_id of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this UserModel.

        If the job is taking too long, job_id is returned, GET /jobs can then be used to poll for results.  # noqa: E501

        :param job_id: The job_id of this UserModel.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def user_email(self):
        """Gets the user_email of this UserModel.  # noqa: E501

        Email  # noqa: E501

        :return: The user_email of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this UserModel.

        Email  # noqa: E501

        :param user_email: The user_email of this UserModel.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def first_name(self):
        """Gets the first_name of this UserModel.  # noqa: E501

        First name  # noqa: E501

        :return: The first_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserModel.

        First name  # noqa: E501

        :param first_name: The first_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserModel.  # noqa: E501

        Last name  # noqa: E501

        :return: The last_name of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserModel.

        Last name  # noqa: E501

        :param last_name: The last_name of this UserModel.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def api_key(self):
        """Gets the api_key of this UserModel.  # noqa: E501

        API key  # noqa: E501

        :return: The api_key of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this UserModel.

        API key  # noqa: E501

        :param api_key: The api_key of this UserModel.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def phone(self):
        """Gets the phone of this UserModel.  # noqa: E501

        Phone number  # noqa: E501

        :return: The phone of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserModel.

        Phone number  # noqa: E501

        :param phone: The phone of this UserModel.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def company(self):
        """Gets the company of this UserModel.  # noqa: E501

        Company  # noqa: E501

        :return: The company of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserModel.

        Company  # noqa: E501

        :param company: The company of this UserModel.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def title(self):
        """Gets the title of this UserModel.  # noqa: E501

        Title  # noqa: E501

        :return: The title of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserModel.

        Title  # noqa: E501

        :param title: The title of this UserModel.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def settings(self):
        """Gets the settings of this UserModel.  # noqa: E501

        User settings  # noqa: E501

        :return: The settings of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UserModel.

        User settings  # noqa: E501

        :param settings: The settings of this UserModel.  # noqa: E501
        :type: str
        """

        self._settings = settings

    @property
    def reg_time(self):
        """Gets the reg_time of this UserModel.  # noqa: E501

        Registration time  # noqa: E501

        :return: The reg_time of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._reg_time

    @reg_time.setter
    def reg_time(self, reg_time):
        """Sets the reg_time of this UserModel.

        Registration time  # noqa: E501

        :param reg_time: The reg_time of this UserModel.  # noqa: E501
        :type: str
        """

        self._reg_time = reg_time

    @property
    def license_id(self):
        """Gets the license_id of this UserModel.  # noqa: E501

        License ID  # noqa: E501

        :return: The license_id of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id):
        """Sets the license_id of this UserModel.

        License ID  # noqa: E501

        :param license_id: The license_id of this UserModel.  # noqa: E501
        :type: str
        """

        self._license_id = license_id

    @property
    def license_type(self):
        """Gets the license_type of this UserModel.  # noqa: E501

        License type  # noqa: E501

        :return: The license_type of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this UserModel.

        License type  # noqa: E501

        :param license_type: The license_type of this UserModel.  # noqa: E501
        :type: str
        """

        self._license_type = license_type

    @property
    def expiry(self):
        """Gets the expiry of this UserModel.  # noqa: E501

        License expiration date  # noqa: E501

        :return: The expiry of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this UserModel.

        License expiration date  # noqa: E501

        :param expiry: The expiry of this UserModel.  # noqa: E501
        :type: str
        """

        self._expiry = expiry

    @property
    def role(self):
        """Gets the role of this UserModel.  # noqa: E501

        User role: admin or user  # noqa: E501

        :return: The role of this UserModel.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserModel.

        User role: admin or user  # noqa: E501

        :param role: The role of this UserModel.  # noqa: E501
        :type: str
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
