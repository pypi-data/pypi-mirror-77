# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_api.models.document import Document  # noqa: F401,E501


class BulkInsertParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'language': 'str',
        'documents': 'list[Document]',
        'dateformat': 'str'
    }

    attribute_map = {
        'dataset': 'dataset',
        'language': 'language',
        'documents': 'documents',
        'dateformat': 'dateformat'
    }

    def __init__(self, dataset=None, language=None, documents=None, dateformat=None):  # noqa: E501
        """BulkInsertParams - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._language = None
        self._documents = None
        self._dateformat = None
        self.discriminator = None

        self.dataset = dataset
        if language is not None:
            self.language = language
        if documents is not None:
            self.documents = documents
        if dateformat is not None:
            self.dateformat = dateformat

    @property
    def dataset(self):
        """Gets the dataset of this BulkInsertParams.  # noqa: E501

        Dataset name  # noqa: E501

        :return: The dataset of this BulkInsertParams.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this BulkInsertParams.

        Dataset name  # noqa: E501

        :param dataset: The dataset of this BulkInsertParams.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def language(self):
        """Gets the language of this BulkInsertParams.  # noqa: E501

        Specify a language to override language detection.  # noqa: E501

        :return: The language of this BulkInsertParams.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this BulkInsertParams.

        Specify a language to override language detection.  # noqa: E501

        :param language: The language of this BulkInsertParams.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def documents(self):
        """Gets the documents of this BulkInsertParams.  # noqa: E501


        :return: The documents of this BulkInsertParams.  # noqa: E501
        :rtype: list[Document]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this BulkInsertParams.


        :param documents: The documents of this BulkInsertParams.  # noqa: E501
        :type: list[Document]
        """

        self._documents = documents

    @property
    def dateformat(self):
        """Gets the dateformat of this BulkInsertParams.  # noqa: E501

        Specify the date format in the document to help date parsing. For example, if the date is \"Tue Jun 12 00:30:00 +0000 2018\", set dateformat to \"%a %b %d %H:%M:%S %z %Y\". If dateformat is not set, Nucleus guesses the date format with different methods.  # noqa: E501

        :return: The dateformat of this BulkInsertParams.  # noqa: E501
        :rtype: str
        """
        return self._dateformat

    @dateformat.setter
    def dateformat(self, dateformat):
        """Sets the dateformat of this BulkInsertParams.

        Specify the date format in the document to help date parsing. For example, if the date is \"Tue Jun 12 00:30:00 +0000 2018\", set dateformat to \"%a %b %d %H:%M:%S %z %Y\". If dateformat is not set, Nucleus guesses the date format with different methods.  # noqa: E501

        :param dateformat: The dateformat of this BulkInsertParams.  # noqa: E501
        :type: str
        """

        self._dateformat = dateformat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkInsertParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkInsertParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
