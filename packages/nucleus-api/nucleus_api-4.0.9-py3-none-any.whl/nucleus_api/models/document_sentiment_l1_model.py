# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocumentSentimentL1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doc_title': 'str',
        'sentiment': 'str',
        'doc_id': 'str',
        'doc_count': 'int'
    }

    attribute_map = {
        'doc_title': 'doc_title',
        'sentiment': 'sentiment',
        'doc_id': 'doc_id',
        'doc_count': 'doc_count'
    }

    def __init__(self, doc_title=None, sentiment=None, doc_id=None, doc_count=None):  # noqa: E501
        """DocumentSentimentL1Model - a model defined in Swagger"""  # noqa: E501

        self._doc_title = None
        self._sentiment = None
        self._doc_id = None
        self._doc_count = None
        self.discriminator = None

        if doc_title is not None:
            self.doc_title = doc_title
        if sentiment is not None:
            self.sentiment = sentiment
        if doc_id is not None:
            self.doc_id = doc_id
        if doc_count is not None:
            self.doc_count = doc_count

    @property
    def doc_title(self):
        """Gets the doc_title of this DocumentSentimentL1Model.  # noqa: E501

        Document title  # noqa: E501

        :return: The doc_title of this DocumentSentimentL1Model.  # noqa: E501
        :rtype: str
        """
        return self._doc_title

    @doc_title.setter
    def doc_title(self, doc_title):
        """Sets the doc_title of this DocumentSentimentL1Model.

        Document title  # noqa: E501

        :param doc_title: The doc_title of this DocumentSentimentL1Model.  # noqa: E501
        :type: str
        """

        self._doc_title = doc_title

    @property
    def sentiment(self):
        """Gets the sentiment of this DocumentSentimentL1Model.  # noqa: E501

        Document sentiment  # noqa: E501

        :return: The sentiment of this DocumentSentimentL1Model.  # noqa: E501
        :rtype: str
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this DocumentSentimentL1Model.

        Document sentiment  # noqa: E501

        :param sentiment: The sentiment of this DocumentSentimentL1Model.  # noqa: E501
        :type: str
        """

        self._sentiment = sentiment

    @property
    def doc_id(self):
        """Gets the doc_id of this DocumentSentimentL1Model.  # noqa: E501

        Document ID  # noqa: E501

        :return: The doc_id of this DocumentSentimentL1Model.  # noqa: E501
        :rtype: str
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id):
        """Sets the doc_id of this DocumentSentimentL1Model.

        Document ID  # noqa: E501

        :param doc_id: The doc_id of this DocumentSentimentL1Model.  # noqa: E501
        :type: str
        """

        self._doc_id = doc_id

    @property
    def doc_count(self):
        """Gets the doc_count of this DocumentSentimentL1Model.  # noqa: E501

        Document count  # noqa: E501

        :return: The doc_count of this DocumentSentimentL1Model.  # noqa: E501
        :rtype: int
        """
        return self._doc_count

    @doc_count.setter
    def doc_count(self, doc_count):
        """Sets the doc_count of this DocumentSentimentL1Model.

        Document count  # noqa: E501

        :param doc_count: The doc_count of this DocumentSentimentL1Model.  # noqa: E501
        :type: int
        """

        self._doc_count = doc_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentSentimentL1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentSentimentL1Model):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
