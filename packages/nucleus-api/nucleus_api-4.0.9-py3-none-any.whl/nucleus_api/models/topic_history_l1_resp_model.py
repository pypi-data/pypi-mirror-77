# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TopicHistoryL1RespModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'keywords': 'str',
        'strengths': 'list[str]',
        'sentiments': 'list[str]',
        'consensuses': 'list[str]',
        'time_stamps': 'list[str]'
    }

    attribute_map = {
        'keywords': 'keywords',
        'strengths': 'strengths',
        'sentiments': 'sentiments',
        'consensuses': 'consensuses',
        'time_stamps': 'time_stamps'
    }

    def __init__(self, keywords=None, strengths=None, sentiments=None, consensuses=None, time_stamps=None):  # noqa: E501
        """TopicHistoryL1RespModel - a model defined in Swagger"""  # noqa: E501

        self._keywords = None
        self._strengths = None
        self._sentiments = None
        self._consensuses = None
        self._time_stamps = None
        self.discriminator = None

        if keywords is not None:
            self.keywords = keywords
        if strengths is not None:
            self.strengths = strengths
        if sentiments is not None:
            self.sentiments = sentiments
        if consensuses is not None:
            self.consensuses = consensuses
        if time_stamps is not None:
            self.time_stamps = time_stamps

    @property
    def keywords(self):
        """Gets the keywords of this TopicHistoryL1RespModel.  # noqa: E501

        Topic keywords  # noqa: E501

        :return: The keywords of this TopicHistoryL1RespModel.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this TopicHistoryL1RespModel.

        Topic keywords  # noqa: E501

        :param keywords: The keywords of this TopicHistoryL1RespModel.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def strengths(self):
        """Gets the strengths of this TopicHistoryL1RespModel.  # noqa: E501

        Topic strength  # noqa: E501

        :return: The strengths of this TopicHistoryL1RespModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._strengths

    @strengths.setter
    def strengths(self, strengths):
        """Sets the strengths of this TopicHistoryL1RespModel.

        Topic strength  # noqa: E501

        :param strengths: The strengths of this TopicHistoryL1RespModel.  # noqa: E501
        :type: list[str]
        """

        self._strengths = strengths

    @property
    def sentiments(self):
        """Gets the sentiments of this TopicHistoryL1RespModel.  # noqa: E501

        Topic sentiment  # noqa: E501

        :return: The sentiments of this TopicHistoryL1RespModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._sentiments

    @sentiments.setter
    def sentiments(self, sentiments):
        """Sets the sentiments of this TopicHistoryL1RespModel.

        Topic sentiment  # noqa: E501

        :param sentiments: The sentiments of this TopicHistoryL1RespModel.  # noqa: E501
        :type: list[str]
        """

        self._sentiments = sentiments

    @property
    def consensuses(self):
        """Gets the consensuses of this TopicHistoryL1RespModel.  # noqa: E501

        Topic consensus  # noqa: E501

        :return: The consensuses of this TopicHistoryL1RespModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._consensuses

    @consensuses.setter
    def consensuses(self, consensuses):
        """Sets the consensuses of this TopicHistoryL1RespModel.

        Topic consensus  # noqa: E501

        :param consensuses: The consensuses of this TopicHistoryL1RespModel.  # noqa: E501
        :type: list[str]
        """

        self._consensuses = consensuses

    @property
    def time_stamps(self):
        """Gets the time_stamps of this TopicHistoryL1RespModel.  # noqa: E501

        Historical dates of the analysis  # noqa: E501

        :return: The time_stamps of this TopicHistoryL1RespModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._time_stamps

    @time_stamps.setter
    def time_stamps(self, time_stamps):
        """Sets the time_stamps of this TopicHistoryL1RespModel.

        Historical dates of the analysis  # noqa: E501

        :param time_stamps: The time_stamps of this TopicHistoryL1RespModel.  # noqa: E501
        :type: list[str]
        """

        self._time_stamps = time_stamps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopicHistoryL1RespModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopicHistoryL1RespModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
