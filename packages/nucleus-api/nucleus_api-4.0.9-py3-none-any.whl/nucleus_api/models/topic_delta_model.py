# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TopicDeltaModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'query': 'str',
        'custom_stop_words': 'list[str]',
        'num_topics': 'int',
        'num_keywords': 'int',
        'metadata_selection': 'object',
        'period_0_start': 'str',
        'period_0_end': 'str',
        'period_1_start': 'str',
        'period_1_end': 'str',
        'excluded_docs': 'list[str]',
        'remove_redundancies': 'bool'
    }

    attribute_map = {
        'dataset': 'dataset',
        'query': 'query',
        'custom_stop_words': 'custom_stop_words',
        'num_topics': 'num_topics',
        'num_keywords': 'num_keywords',
        'metadata_selection': 'metadata_selection',
        'period_0_start': 'period_0_start',
        'period_0_end': 'period_0_end',
        'period_1_start': 'period_1_start',
        'period_1_end': 'period_1_end',
        'excluded_docs': 'excluded_docs',
        'remove_redundancies': 'remove_redundancies'
    }

    def __init__(self, dataset=None, query=None, custom_stop_words=None, num_topics=None, num_keywords=None, metadata_selection=None, period_0_start=None, period_0_end=None, period_1_start=None, period_1_end=None, excluded_docs=None, remove_redundancies=True):  # noqa: E501
        """TopicDeltaModel - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._query = None
        self._custom_stop_words = None
        self._num_topics = None
        self._num_keywords = None
        self._metadata_selection = None
        self._period_0_start = None
        self._period_0_end = None
        self._period_1_start = None
        self._period_1_end = None
        self._excluded_docs = None
        self._remove_redundancies = None
        self.discriminator = None

        self.dataset = dataset
        if query is not None:
            self.query = query
        if custom_stop_words is not None:
            self.custom_stop_words = custom_stop_words
        if num_topics is not None:
            self.num_topics = num_topics
        if num_keywords is not None:
            self.num_keywords = num_keywords
        if metadata_selection is not None:
            self.metadata_selection = metadata_selection
        self.period_0_start = period_0_start
        self.period_0_end = period_0_end
        self.period_1_start = period_1_start
        self.period_1_end = period_1_end
        if excluded_docs is not None:
            self.excluded_docs = excluded_docs
        if remove_redundancies is not None:
            self.remove_redundancies = remove_redundancies

    @property
    def dataset(self):
        """Gets the dataset of this TopicDeltaModel.  # noqa: E501

        Dataset name  # noqa: E501

        :return: The dataset of this TopicDeltaModel.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this TopicDeltaModel.

        Dataset name  # noqa: E501

        :param dataset: The dataset of this TopicDeltaModel.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def query(self):
        """Gets the query of this TopicDeltaModel.  # noqa: E501

        Dataset-language-specific fulltext query, using SQL MATCH boolean query format. Example: \"(word1 OR word2) AND (word3 OR word4)\"  # noqa: E501

        :return: The query of this TopicDeltaModel.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this TopicDeltaModel.

        Dataset-language-specific fulltext query, using SQL MATCH boolean query format. Example: \"(word1 OR word2) AND (word3 OR word4)\"  # noqa: E501

        :param query: The query of this TopicDeltaModel.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def custom_stop_words(self):
        """Gets the custom_stop_words of this TopicDeltaModel.  # noqa: E501

        List of dataset-language-specific stopwords that should be excluded from the analysis. Example: [\"word1\", \"word2\", ..., \"wordN\"]  # noqa: E501

        :return: The custom_stop_words of this TopicDeltaModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_stop_words

    @custom_stop_words.setter
    def custom_stop_words(self, custom_stop_words):
        """Sets the custom_stop_words of this TopicDeltaModel.

        List of dataset-language-specific stopwords that should be excluded from the analysis. Example: [\"word1\", \"word2\", ..., \"wordN\"]  # noqa: E501

        :param custom_stop_words: The custom_stop_words of this TopicDeltaModel.  # noqa: E501
        :type: list[str]
        """

        self._custom_stop_words = custom_stop_words

    @property
    def num_topics(self):
        """Gets the num_topics of this TopicDeltaModel.  # noqa: E501

        Number of topics to be extracted from the dataset and summarized.  # noqa: E501

        :return: The num_topics of this TopicDeltaModel.  # noqa: E501
        :rtype: int
        """
        return self._num_topics

    @num_topics.setter
    def num_topics(self, num_topics):
        """Sets the num_topics of this TopicDeltaModel.

        Number of topics to be extracted from the dataset and summarized.  # noqa: E501

        :param num_topics: The num_topics of this TopicDeltaModel.  # noqa: E501
        :type: int
        """

        self._num_topics = num_topics

    @property
    def num_keywords(self):
        """Gets the num_keywords of this TopicDeltaModel.  # noqa: E501

        Number of keywords per topic that is extracted from the dataset.  # noqa: E501

        :return: The num_keywords of this TopicDeltaModel.  # noqa: E501
        :rtype: int
        """
        return self._num_keywords

    @num_keywords.setter
    def num_keywords(self, num_keywords):
        """Sets the num_keywords of this TopicDeltaModel.

        Number of keywords per topic that is extracted from the dataset.  # noqa: E501

        :param num_keywords: The num_keywords of this TopicDeltaModel.  # noqa: E501
        :type: int
        """

        self._num_keywords = num_keywords

    @property
    def metadata_selection(self):
        """Gets the metadata_selection of this TopicDeltaModel.  # noqa: E501

        JSON object specifying metadata-based queries on the dataset, of type {\"metadata_field\": \"selected_values\"}  # noqa: E501

        :return: The metadata_selection of this TopicDeltaModel.  # noqa: E501
        :rtype: object
        """
        return self._metadata_selection

    @metadata_selection.setter
    def metadata_selection(self, metadata_selection):
        """Sets the metadata_selection of this TopicDeltaModel.

        JSON object specifying metadata-based queries on the dataset, of type {\"metadata_field\": \"selected_values\"}  # noqa: E501

        :param metadata_selection: The metadata_selection of this TopicDeltaModel.  # noqa: E501
        :type: object
        """

        self._metadata_selection = metadata_selection

    @property
    def period_0_start(self):
        """Gets the period_0_start of this TopicDeltaModel.  # noqa: E501

        Start date for the initial-period dataset. Format: \"YYYY-MM-DD HH:MM:SS\"   # noqa: E501

        :return: The period_0_start of this TopicDeltaModel.  # noqa: E501
        :rtype: str
        """
        return self._period_0_start

    @period_0_start.setter
    def period_0_start(self, period_0_start):
        """Sets the period_0_start of this TopicDeltaModel.

        Start date for the initial-period dataset. Format: \"YYYY-MM-DD HH:MM:SS\"   # noqa: E501

        :param period_0_start: The period_0_start of this TopicDeltaModel.  # noqa: E501
        :type: str
        """
        if period_0_start is None:
            raise ValueError("Invalid value for `period_0_start`, must not be `None`")  # noqa: E501

        self._period_0_start = period_0_start

    @property
    def period_0_end(self):
        """Gets the period_0_end of this TopicDeltaModel.  # noqa: E501

        End date for the initial-period dataset. Format: \"YYYY-MM-DD HH:MM:SS\"   # noqa: E501

        :return: The period_0_end of this TopicDeltaModel.  # noqa: E501
        :rtype: str
        """
        return self._period_0_end

    @period_0_end.setter
    def period_0_end(self, period_0_end):
        """Sets the period_0_end of this TopicDeltaModel.

        End date for the initial-period dataset. Format: \"YYYY-MM-DD HH:MM:SS\"   # noqa: E501

        :param period_0_end: The period_0_end of this TopicDeltaModel.  # noqa: E501
        :type: str
        """
        if period_0_end is None:
            raise ValueError("Invalid value for `period_0_end`, must not be `None`")  # noqa: E501

        self._period_0_end = period_0_end

    @property
    def period_1_start(self):
        """Gets the period_1_start of this TopicDeltaModel.  # noqa: E501

        Start date for the final-period dataset. Format: \"YYYY-MM-DD HH:MM:SS\"   # noqa: E501

        :return: The period_1_start of this TopicDeltaModel.  # noqa: E501
        :rtype: str
        """
        return self._period_1_start

    @period_1_start.setter
    def period_1_start(self, period_1_start):
        """Sets the period_1_start of this TopicDeltaModel.

        Start date for the final-period dataset. Format: \"YYYY-MM-DD HH:MM:SS\"   # noqa: E501

        :param period_1_start: The period_1_start of this TopicDeltaModel.  # noqa: E501
        :type: str
        """
        if period_1_start is None:
            raise ValueError("Invalid value for `period_1_start`, must not be `None`")  # noqa: E501

        self._period_1_start = period_1_start

    @property
    def period_1_end(self):
        """Gets the period_1_end of this TopicDeltaModel.  # noqa: E501

        End date for the final-period dataset. Format: \"YYYY-MM-DD HH:MM:SS\"   # noqa: E501

        :return: The period_1_end of this TopicDeltaModel.  # noqa: E501
        :rtype: str
        """
        return self._period_1_end

    @period_1_end.setter
    def period_1_end(self, period_1_end):
        """Sets the period_1_end of this TopicDeltaModel.

        End date for the final-period dataset. Format: \"YYYY-MM-DD HH:MM:SS\"   # noqa: E501

        :param period_1_end: The period_1_end of this TopicDeltaModel.  # noqa: E501
        :type: str
        """
        if period_1_end is None:
            raise ValueError("Invalid value for `period_1_end`, must not be `None`")  # noqa: E501

        self._period_1_end = period_1_end

    @property
    def excluded_docs(self):
        """Gets the excluded_docs of this TopicDeltaModel.  # noqa: E501

        List of document IDs that should be excluded from the analysis. Example: [\"doc_id1\", \"doc_id2\", ..., \"doc_idN\"]  # noqa: E501

        :return: The excluded_docs of this TopicDeltaModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_docs

    @excluded_docs.setter
    def excluded_docs(self, excluded_docs):
        """Sets the excluded_docs of this TopicDeltaModel.

        List of document IDs that should be excluded from the analysis. Example: [\"doc_id1\", \"doc_id2\", ..., \"doc_idN\"]  # noqa: E501

        :param excluded_docs: The excluded_docs of this TopicDeltaModel.  # noqa: E501
        :type: list[str]
        """

        self._excluded_docs = excluded_docs

    @property
    def remove_redundancies(self):
        """Gets the remove_redundancies of this TopicDeltaModel.  # noqa: E501

        If True, this option removes quasi-duplicates from the analysis. A quasi-duplicate would have the same NLP representation, but not necessarily the exact same text.  # noqa: E501

        :return: The remove_redundancies of this TopicDeltaModel.  # noqa: E501
        :rtype: bool
        """
        return self._remove_redundancies

    @remove_redundancies.setter
    def remove_redundancies(self, remove_redundancies):
        """Sets the remove_redundancies of this TopicDeltaModel.

        If True, this option removes quasi-duplicates from the analysis. A quasi-duplicate would have the same NLP representation, but not necessarily the exact same text.  # noqa: E501

        :param remove_redundancies: The remove_redundancies of this TopicDeltaModel.  # noqa: E501
        :type: bool
        """

        self._remove_redundancies = remove_redundancies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopicDeltaModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopicDeltaModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
