# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FilterModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'custom_stop_words': 'list[str]',
        'metadata_selection': 'object',
        'time_period': 'str'
    }

    attribute_map = {
        'query': 'query',
        'custom_stop_words': 'custom_stop_words',
        'metadata_selection': 'metadata_selection',
        'time_period': 'time_period'
    }

    def __init__(self, query=None, custom_stop_words=None, metadata_selection=None, time_period=None):  # noqa: E501
        """FilterModel - a model defined in Swagger"""  # noqa: E501

        self._query = None
        self._custom_stop_words = None
        self._metadata_selection = None
        self._time_period = None
        self.discriminator = None

        if query is not None:
            self.query = query
        if custom_stop_words is not None:
            self.custom_stop_words = custom_stop_words
        if metadata_selection is not None:
            self.metadata_selection = metadata_selection
        if time_period is not None:
            self.time_period = time_period

    @property
    def query(self):
        """Gets the query of this FilterModel.  # noqa: E501

        Dataset-language-specific fulltext query, using SQL MATCH boolean query format. Example: \"(word1 OR word2) AND (word3 OR word4)\"  # noqa: E501

        :return: The query of this FilterModel.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this FilterModel.

        Dataset-language-specific fulltext query, using SQL MATCH boolean query format. Example: \"(word1 OR word2) AND (word3 OR word4)\"  # noqa: E501

        :param query: The query of this FilterModel.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def custom_stop_words(self):
        """Gets the custom_stop_words of this FilterModel.  # noqa: E501

        List of dataset-language-specific stopwords that should be excluded from the analysis. Example: [\"word1\", \"word2\", ..., \"wordN\"]  # noqa: E501

        :return: The custom_stop_words of this FilterModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_stop_words

    @custom_stop_words.setter
    def custom_stop_words(self, custom_stop_words):
        """Sets the custom_stop_words of this FilterModel.

        List of dataset-language-specific stopwords that should be excluded from the analysis. Example: [\"word1\", \"word2\", ..., \"wordN\"]  # noqa: E501

        :param custom_stop_words: The custom_stop_words of this FilterModel.  # noqa: E501
        :type: list[str]
        """

        self._custom_stop_words = custom_stop_words

    @property
    def metadata_selection(self):
        """Gets the metadata_selection of this FilterModel.  # noqa: E501

        JSON specifying metadata-based queries on the dataset. If titles or doc_ids are also provided, then this selection is ignored. Format: {\"key\": \"values\"}. Metadata values are case-sensitive.  # noqa: E501

        :return: The metadata_selection of this FilterModel.  # noqa: E501
        :rtype: object
        """
        return self._metadata_selection

    @metadata_selection.setter
    def metadata_selection(self, metadata_selection):
        """Sets the metadata_selection of this FilterModel.

        JSON specifying metadata-based queries on the dataset. If titles or doc_ids are also provided, then this selection is ignored. Format: {\"key\": \"values\"}. Metadata values are case-sensitive.  # noqa: E501

        :param metadata_selection: The metadata_selection of this FilterModel.  # noqa: E501
        :type: object
        """

        self._metadata_selection = metadata_selection

    @property
    def time_period(self):
        """Gets the time_period of this FilterModel.  # noqa: E501

        Time range selection method 1: time period from now  # noqa: E501

        :return: The time_period of this FilterModel.  # noqa: E501
        :rtype: str
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this FilterModel.

        Time range selection method 1: time period from now  # noqa: E501

        :param time_period: The time_period of this FilterModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["1D", "2D", "1W", "2W", "1M", "3M", "6M", "12M", "3Y", "5Y"]  # noqa: E501
        if time_period not in allowed_values:
            raise ValueError(
                "Invalid value for `time_period` ({0}), must be one of {1}"  # noqa: E501
                .format(time_period, allowed_values)
            )

        self._time_period = time_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
