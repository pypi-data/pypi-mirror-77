# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_api.models.doc_classify_l2_dr_resp_model import DocClassifyL2DRRespModel  # noqa: F401,E501
from nucleus_api.models.doc_classify_l2_pm_resp_model import DocClassifyL2PMRespModel  # noqa: F401,E501


class DocClassifyL1RespModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'detailed_results': 'DocClassifyL2DRRespModel',
        'perf_metrics': 'DocClassifyL2PMRespModel'
    }

    attribute_map = {
        'detailed_results': 'detailed_results',
        'perf_metrics': 'perf_metrics'
    }

    def __init__(self, detailed_results=None, perf_metrics=None):  # noqa: E501
        """DocClassifyL1RespModel - a model defined in Swagger"""  # noqa: E501

        self._detailed_results = None
        self._perf_metrics = None
        self.discriminator = None

        if detailed_results is not None:
            self.detailed_results = detailed_results
        if perf_metrics is not None:
            self.perf_metrics = perf_metrics

    @property
    def detailed_results(self):
        """Gets the detailed_results of this DocClassifyL1RespModel.  # noqa: E501


        :return: The detailed_results of this DocClassifyL1RespModel.  # noqa: E501
        :rtype: DocClassifyL2DRRespModel
        """
        return self._detailed_results

    @detailed_results.setter
    def detailed_results(self, detailed_results):
        """Sets the detailed_results of this DocClassifyL1RespModel.


        :param detailed_results: The detailed_results of this DocClassifyL1RespModel.  # noqa: E501
        :type: DocClassifyL2DRRespModel
        """

        self._detailed_results = detailed_results

    @property
    def perf_metrics(self):
        """Gets the perf_metrics of this DocClassifyL1RespModel.  # noqa: E501


        :return: The perf_metrics of this DocClassifyL1RespModel.  # noqa: E501
        :rtype: DocClassifyL2PMRespModel
        """
        return self._perf_metrics

    @perf_metrics.setter
    def perf_metrics(self, perf_metrics):
        """Sets the perf_metrics of this DocClassifyL1RespModel.


        :param perf_metrics: The perf_metrics of this DocClassifyL1RespModel.  # noqa: E501
        :type: DocClassifyL2PMRespModel
        """

        self._perf_metrics = perf_metrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocClassifyL1RespModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocClassifyL1RespModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
