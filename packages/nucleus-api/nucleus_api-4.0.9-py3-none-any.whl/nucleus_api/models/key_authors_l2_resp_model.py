# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class KeyAuthorsL2RespModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'negative': 'object',
        'average': 'object',
        'positive': 'object'
    }

    attribute_map = {
        'negative': 'negative',
        'average': 'average',
        'positive': 'positive'
    }

    def __init__(self, negative=None, average=None, positive=None):  # noqa: E501
        """KeyAuthorsL2RespModel - a model defined in Swagger"""  # noqa: E501

        self._negative = None
        self._average = None
        self._positive = None
        self.discriminator = None

        if negative is not None:
            self.negative = negative
        if average is not None:
            self.average = average
        if positive is not None:
            self.positive = positive

    @property
    def negative(self):
        """Gets the negative of this KeyAuthorsL2RespModel.  # noqa: E501

        Author(s) with the most negative opinions {\"top_author\":[top_documents],\"top_author2\":[top_documents]}  # noqa: E501

        :return: The negative of this KeyAuthorsL2RespModel.  # noqa: E501
        :rtype: object
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """Sets the negative of this KeyAuthorsL2RespModel.

        Author(s) with the most negative opinions {\"top_author\":[top_documents],\"top_author2\":[top_documents]}  # noqa: E501

        :param negative: The negative of this KeyAuthorsL2RespModel.  # noqa: E501
        :type: object
        """

        self._negative = negative

    @property
    def average(self):
        """Gets the average of this KeyAuthorsL2RespModel.  # noqa: E501

        Author(s) with average opinions {\"top_author\":[top_documents],\"top_author2\":[top_documents]}  # noqa: E501

        :return: The average of this KeyAuthorsL2RespModel.  # noqa: E501
        :rtype: object
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this KeyAuthorsL2RespModel.

        Author(s) with average opinions {\"top_author\":[top_documents],\"top_author2\":[top_documents]}  # noqa: E501

        :param average: The average of this KeyAuthorsL2RespModel.  # noqa: E501
        :type: object
        """

        self._average = average

    @property
    def positive(self):
        """Gets the positive of this KeyAuthorsL2RespModel.  # noqa: E501

        Author(s) with the most positive opinions {\"top_author\":[top_documents],\"top_author2\":[top_documents]}  # noqa: E501

        :return: The positive of this KeyAuthorsL2RespModel.  # noqa: E501
        :rtype: object
        """
        return self._positive

    @positive.setter
    def positive(self, positive):
        """Sets the positive of this KeyAuthorsL2RespModel.

        Author(s) with the most positive opinions {\"top_author\":[top_documents],\"top_author2\":[top_documents]}  # noqa: E501

        :param positive: The positive of this KeyAuthorsL2RespModel.  # noqa: E501
        :type: object
        """

        self._positive = positive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeyAuthorsL2RespModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyAuthorsL2RespModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
