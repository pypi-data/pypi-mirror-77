# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocumentSentimentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'doc_title': 'str',
        'query': 'str',
        'num_topics': 'int',
        'num_keywords': 'int',
        'custom_stop_words': 'list[str]',
        'custom_dict_file': 'object',
        'cache_sentiment': 'bool',
        'overwrite': 'bool'
    }

    attribute_map = {
        'dataset': 'dataset',
        'doc_title': 'doc_title',
        'query': 'query',
        'num_topics': 'num_topics',
        'num_keywords': 'num_keywords',
        'custom_stop_words': 'custom_stop_words',
        'custom_dict_file': 'custom_dict_file',
        'cache_sentiment': 'cache_sentiment',
        'overwrite': 'overwrite'
    }

    def __init__(self, dataset=None, doc_title=None, query=None, num_topics=None, num_keywords=None, custom_stop_words=None, custom_dict_file=None, cache_sentiment=False, overwrite=False):  # noqa: E501
        """DocumentSentimentModel - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._doc_title = None
        self._query = None
        self._num_topics = None
        self._num_keywords = None
        self._custom_stop_words = None
        self._custom_dict_file = None
        self._cache_sentiment = None
        self._overwrite = None
        self.discriminator = None

        self.dataset = dataset
        if doc_title is not None:
            self.doc_title = doc_title
        if query is not None:
            self.query = query
        if num_topics is not None:
            self.num_topics = num_topics
        if num_keywords is not None:
            self.num_keywords = num_keywords
        if custom_stop_words is not None:
            self.custom_stop_words = custom_stop_words
        if custom_dict_file is not None:
            self.custom_dict_file = custom_dict_file
        if cache_sentiment is not None:
            self.cache_sentiment = cache_sentiment
        if overwrite is not None:
            self.overwrite = overwrite

    @property
    def dataset(self):
        """Gets the dataset of this DocumentSentimentModel.  # noqa: E501

        Dataset name  # noqa: E501

        :return: The dataset of this DocumentSentimentModel.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this DocumentSentimentModel.

        Dataset name  # noqa: E501

        :param dataset: The dataset of this DocumentSentimentModel.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def doc_title(self):
        """Gets the doc_title of this DocumentSentimentModel.  # noqa: E501

        The title of the document to be analyzed.  # noqa: E501

        :return: The doc_title of this DocumentSentimentModel.  # noqa: E501
        :rtype: str
        """
        return self._doc_title

    @doc_title.setter
    def doc_title(self, doc_title):
        """Sets the doc_title of this DocumentSentimentModel.

        The title of the document to be analyzed.  # noqa: E501

        :param doc_title: The doc_title of this DocumentSentimentModel.  # noqa: E501
        :type: str
        """

        self._doc_title = doc_title

    @property
    def query(self):
        """Gets the query of this DocumentSentimentModel.  # noqa: E501

        Dataset-language-specific fulltext query, using SQL MATCH boolean query format. Example: \"(word1 OR word2) AND (word3 OR word4)\"  # noqa: E501

        :return: The query of this DocumentSentimentModel.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this DocumentSentimentModel.

        Dataset-language-specific fulltext query, using SQL MATCH boolean query format. Example: \"(word1 OR word2) AND (word3 OR word4)\"  # noqa: E501

        :param query: The query of this DocumentSentimentModel.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def num_topics(self):
        """Gets the num_topics of this DocumentSentimentModel.  # noqa: E501

        Number of topics to be extracted from the document to estimate the document' sentiment.  # noqa: E501

        :return: The num_topics of this DocumentSentimentModel.  # noqa: E501
        :rtype: int
        """
        return self._num_topics

    @num_topics.setter
    def num_topics(self, num_topics):
        """Sets the num_topics of this DocumentSentimentModel.

        Number of topics to be extracted from the document to estimate the document' sentiment.  # noqa: E501

        :param num_topics: The num_topics of this DocumentSentimentModel.  # noqa: E501
        :type: int
        """
        if num_topics is not None and num_topics < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_topics`, must be a value greater than or equal to `1`")  # noqa: E501

        self._num_topics = num_topics

    @property
    def num_keywords(self):
        """Gets the num_keywords of this DocumentSentimentModel.  # noqa: E501

        Number of keywords per topic that is extracted from the document.  # noqa: E501

        :return: The num_keywords of this DocumentSentimentModel.  # noqa: E501
        :rtype: int
        """
        return self._num_keywords

    @num_keywords.setter
    def num_keywords(self, num_keywords):
        """Sets the num_keywords of this DocumentSentimentModel.

        Number of keywords per topic that is extracted from the document.  # noqa: E501

        :param num_keywords: The num_keywords of this DocumentSentimentModel.  # noqa: E501
        :type: int
        """

        self._num_keywords = num_keywords

    @property
    def custom_stop_words(self):
        """Gets the custom_stop_words of this DocumentSentimentModel.  # noqa: E501

        List of dataset-language-specific stopwords that should be excluded from the analysis. Example: [\"word1\", \"word2\", ..., \"wordN\"]  # noqa: E501

        :return: The custom_stop_words of this DocumentSentimentModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_stop_words

    @custom_stop_words.setter
    def custom_stop_words(self, custom_stop_words):
        """Sets the custom_stop_words of this DocumentSentimentModel.

        List of dataset-language-specific stopwords that should be excluded from the analysis. Example: [\"word1\", \"word2\", ..., \"wordN\"]  # noqa: E501

        :param custom_stop_words: The custom_stop_words of this DocumentSentimentModel.  # noqa: E501
        :type: list[str]
        """

        self._custom_stop_words = custom_stop_words

    @property
    def custom_dict_file(self):
        """Gets the custom_dict_file of this DocumentSentimentModel.  # noqa: E501

        JSON with custom sentiment dictionary: {\"word1\": value1,  \"word2\": value2, ..., \"wordN\": valueN}  # noqa: E501

        :return: The custom_dict_file of this DocumentSentimentModel.  # noqa: E501
        :rtype: object
        """
        return self._custom_dict_file

    @custom_dict_file.setter
    def custom_dict_file(self, custom_dict_file):
        """Sets the custom_dict_file of this DocumentSentimentModel.

        JSON with custom sentiment dictionary: {\"word1\": value1,  \"word2\": value2, ..., \"wordN\": valueN}  # noqa: E501

        :param custom_dict_file: The custom_dict_file of this DocumentSentimentModel.  # noqa: E501
        :type: object
        """

        self._custom_dict_file = custom_dict_file

    @property
    def cache_sentiment(self):
        """Gets the cache_sentiment of this DocumentSentimentModel.  # noqa: E501

        If true, computes the sentiment for all docs in the dataset and saves it in a new \"sentiment_category\" metadata column.  # noqa: E501

        :return: The cache_sentiment of this DocumentSentimentModel.  # noqa: E501
        :rtype: bool
        """
        return self._cache_sentiment

    @cache_sentiment.setter
    def cache_sentiment(self, cache_sentiment):
        """Sets the cache_sentiment of this DocumentSentimentModel.

        If true, computes the sentiment for all docs in the dataset and saves it in a new \"sentiment_category\" metadata column.  # noqa: E501

        :param cache_sentiment: The cache_sentiment of this DocumentSentimentModel.  # noqa: E501
        :type: bool
        """

        self._cache_sentiment = cache_sentiment

    @property
    def overwrite(self):
        """Gets the overwrite of this DocumentSentimentModel.  # noqa: E501

        If true, overwrites cached sentiment values for all documents in the dataset  # noqa: E501

        :return: The overwrite of this DocumentSentimentModel.  # noqa: E501
        :rtype: bool
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """Sets the overwrite of this DocumentSentimentModel.

        If true, overwrites cached sentiment values for all documents in the dataset  # noqa: E501

        :param overwrite: The overwrite of this DocumentSentimentModel.  # noqa: E501
        :type: bool
        """

        self._overwrite = overwrite

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentSentimentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentSentimentModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
