# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdminDeleteUserModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_sel': 'str',
        'dataset_only': 'bool',
        'datasets': 'list[str]'
    }

    attribute_map = {
        'user_sel': 'user_sel',
        'dataset_only': 'dataset_only',
        'datasets': 'datasets'
    }

    def __init__(self, user_sel=None, dataset_only=False, datasets=None):  # noqa: E501
        """AdminDeleteUserModel - a model defined in Swagger"""  # noqa: E501

        self._user_sel = None
        self._dataset_only = None
        self._datasets = None
        self.discriminator = None

        self.user_sel = user_sel
        if dataset_only is not None:
            self.dataset_only = dataset_only
        if datasets is not None:
            self.datasets = datasets

    @property
    def user_sel(self):
        """Gets the user_sel of this AdminDeleteUserModel.  # noqa: E501

        Selected user to be deleted  # noqa: E501

        :return: The user_sel of this AdminDeleteUserModel.  # noqa: E501
        :rtype: str
        """
        return self._user_sel

    @user_sel.setter
    def user_sel(self, user_sel):
        """Sets the user_sel of this AdminDeleteUserModel.

        Selected user to be deleted  # noqa: E501

        :param user_sel: The user_sel of this AdminDeleteUserModel.  # noqa: E501
        :type: str
        """
        if user_sel is None:
            raise ValueError("Invalid value for `user_sel`, must not be `None`")  # noqa: E501

        self._user_sel = user_sel

    @property
    def dataset_only(self):
        """Gets the dataset_only of this AdminDeleteUserModel.  # noqa: E501

        If True, only delete datasets of the selected user  # noqa: E501

        :return: The dataset_only of this AdminDeleteUserModel.  # noqa: E501
        :rtype: bool
        """
        return self._dataset_only

    @dataset_only.setter
    def dataset_only(self, dataset_only):
        """Sets the dataset_only of this AdminDeleteUserModel.

        If True, only delete datasets of the selected user  # noqa: E501

        :param dataset_only: The dataset_only of this AdminDeleteUserModel.  # noqa: E501
        :type: bool
        """

        self._dataset_only = dataset_only

    @property
    def datasets(self):
        """Gets the datasets of this AdminDeleteUserModel.  # noqa: E501

        List of datasets to be deleted  # noqa: E501

        :return: The datasets of this AdminDeleteUserModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this AdminDeleteUserModel.

        List of datasets to be deleted  # noqa: E501

        :param datasets: The datasets of this AdminDeleteUserModel.  # noqa: E501
        :type: list[str]
        """

        self._datasets = datasets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminDeleteUserModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminDeleteUserModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
