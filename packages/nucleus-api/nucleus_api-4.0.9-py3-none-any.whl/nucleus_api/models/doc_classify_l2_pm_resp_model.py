# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocClassifyL2PMRespModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accuracy': 'float',
        'recall': 'float',
        'precision': 'float',
        'f1': 'float',
        'balanced_accuracy': 'float'
    }

    attribute_map = {
        'accuracy': 'accuracy',
        'recall': 'recall',
        'precision': 'precision',
        'f1': 'f1',
        'balanced_accuracy': 'balanced_accuracy'
    }

    def __init__(self, accuracy=None, recall=None, precision=None, f1=None, balanced_accuracy=None):  # noqa: E501
        """DocClassifyL2PMRespModel - a model defined in Swagger"""  # noqa: E501

        self._accuracy = None
        self._recall = None
        self._precision = None
        self._f1 = None
        self._balanced_accuracy = None
        self.discriminator = None

        if accuracy is not None:
            self.accuracy = accuracy
        if recall is not None:
            self.recall = recall
        if precision is not None:
            self.precision = precision
        if f1 is not None:
            self.f1 = f1
        if balanced_accuracy is not None:
            self.balanced_accuracy = balanced_accuracy

    @property
    def accuracy(self):
        """Gets the accuracy of this DocClassifyL2PMRespModel.  # noqa: E501

        Accuracy of the classifier  # noqa: E501

        :return: The accuracy of this DocClassifyL2PMRespModel.  # noqa: E501
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this DocClassifyL2PMRespModel.

        Accuracy of the classifier  # noqa: E501

        :param accuracy: The accuracy of this DocClassifyL2PMRespModel.  # noqa: E501
        :type: float
        """

        self._accuracy = accuracy

    @property
    def recall(self):
        """Gets the recall of this DocClassifyL2PMRespModel.  # noqa: E501

        Recall of the classifier  # noqa: E501

        :return: The recall of this DocClassifyL2PMRespModel.  # noqa: E501
        :rtype: float
        """
        return self._recall

    @recall.setter
    def recall(self, recall):
        """Sets the recall of this DocClassifyL2PMRespModel.

        Recall of the classifier  # noqa: E501

        :param recall: The recall of this DocClassifyL2PMRespModel.  # noqa: E501
        :type: float
        """

        self._recall = recall

    @property
    def precision(self):
        """Gets the precision of this DocClassifyL2PMRespModel.  # noqa: E501

        Precision of the classifier  # noqa: E501

        :return: The precision of this DocClassifyL2PMRespModel.  # noqa: E501
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this DocClassifyL2PMRespModel.

        Precision of the classifier  # noqa: E501

        :param precision: The precision of this DocClassifyL2PMRespModel.  # noqa: E501
        :type: float
        """

        self._precision = precision

    @property
    def f1(self):
        """Gets the f1 of this DocClassifyL2PMRespModel.  # noqa: E501

        F1 of the classifier  # noqa: E501

        :return: The f1 of this DocClassifyL2PMRespModel.  # noqa: E501
        :rtype: float
        """
        return self._f1

    @f1.setter
    def f1(self, f1):
        """Sets the f1 of this DocClassifyL2PMRespModel.

        F1 of the classifier  # noqa: E501

        :param f1: The f1 of this DocClassifyL2PMRespModel.  # noqa: E501
        :type: float
        """

        self._f1 = f1

    @property
    def balanced_accuracy(self):
        """Gets the balanced_accuracy of this DocClassifyL2PMRespModel.  # noqa: E501

        Balanced Accuracy of the classifier  # noqa: E501

        :return: The balanced_accuracy of this DocClassifyL2PMRespModel.  # noqa: E501
        :rtype: float
        """
        return self._balanced_accuracy

    @balanced_accuracy.setter
    def balanced_accuracy(self, balanced_accuracy):
        """Sets the balanced_accuracy of this DocClassifyL2PMRespModel.

        Balanced Accuracy of the classifier  # noqa: E501

        :param balanced_accuracy: The balanced_accuracy of this DocClassifyL2PMRespModel.  # noqa: E501
        :type: float
        """

        self._balanced_accuracy = balanced_accuracy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocClassifyL2PMRespModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocClassifyL2PMRespModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
