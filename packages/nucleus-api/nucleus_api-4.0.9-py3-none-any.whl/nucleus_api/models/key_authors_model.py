# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class KeyAuthorsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'query': 'str',
        'tracked_queries': 'list[str]',
        'custom_stop_words': 'list[str]',
        'num_topics': 'int',
        'num_keywords': 'int',
        'metadata_selection': 'object',
        'time_period': 'str',
        'period_start': 'str',
        'period_end': 'str',
        'num_authors': 'int',
        'num_keydocs': 'int',
        'excluded_docs': 'list[str]',
        'custom_dict_file': 'object'
    }

    attribute_map = {
        'dataset': 'dataset',
        'query': 'query',
        'tracked_queries': 'tracked_queries',
        'custom_stop_words': 'custom_stop_words',
        'num_topics': 'num_topics',
        'num_keywords': 'num_keywords',
        'metadata_selection': 'metadata_selection',
        'time_period': 'time_period',
        'period_start': 'period_start',
        'period_end': 'period_end',
        'num_authors': 'num_authors',
        'num_keydocs': 'num_keydocs',
        'excluded_docs': 'excluded_docs',
        'custom_dict_file': 'custom_dict_file'
    }

    def __init__(self, dataset=None, query=None, tracked_queries=None, custom_stop_words=None, num_topics=None, num_keywords=None, metadata_selection=None, time_period=None, period_start=None, period_end=None, num_authors=None, num_keydocs=None, excluded_docs=None, custom_dict_file=None):  # noqa: E501
        """KeyAuthorsModel - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._query = None
        self._tracked_queries = None
        self._custom_stop_words = None
        self._num_topics = None
        self._num_keywords = None
        self._metadata_selection = None
        self._time_period = None
        self._period_start = None
        self._period_end = None
        self._num_authors = None
        self._num_keydocs = None
        self._excluded_docs = None
        self._custom_dict_file = None
        self.discriminator = None

        self.dataset = dataset
        if query is not None:
            self.query = query
        if tracked_queries is not None:
            self.tracked_queries = tracked_queries
        if custom_stop_words is not None:
            self.custom_stop_words = custom_stop_words
        if num_topics is not None:
            self.num_topics = num_topics
        if num_keywords is not None:
            self.num_keywords = num_keywords
        if metadata_selection is not None:
            self.metadata_selection = metadata_selection
        if time_period is not None:
            self.time_period = time_period
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end
        if num_authors is not None:
            self.num_authors = num_authors
        if num_keydocs is not None:
            self.num_keydocs = num_keydocs
        if excluded_docs is not None:
            self.excluded_docs = excluded_docs
        if custom_dict_file is not None:
            self.custom_dict_file = custom_dict_file

    @property
    def dataset(self):
        """Gets the dataset of this KeyAuthorsModel.  # noqa: E501

        Dataset name  # noqa: E501

        :return: The dataset of this KeyAuthorsModel.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this KeyAuthorsModel.

        Dataset name  # noqa: E501

        :param dataset: The dataset of this KeyAuthorsModel.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def query(self):
        """Gets the query of this KeyAuthorsModel.  # noqa: E501

        Dataset-language-specific fulltext query, using SQL MATCH boolean query format. Example: \"(word1 OR word2) AND (word3 OR word4)\"  # noqa: E501

        :return: The query of this KeyAuthorsModel.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this KeyAuthorsModel.

        Dataset-language-specific fulltext query, using SQL MATCH boolean query format. Example: \"(word1 OR word2) AND (word3 OR word4)\"  # noqa: E501

        :param query: The query of this KeyAuthorsModel.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def tracked_queries(self):
        """Gets the tracked_queries of this KeyAuthorsModel.  # noqa: E501

        List of user-defined queries to track  # noqa: E501

        :return: The tracked_queries of this KeyAuthorsModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._tracked_queries

    @tracked_queries.setter
    def tracked_queries(self, tracked_queries):
        """Sets the tracked_queries of this KeyAuthorsModel.

        List of user-defined queries to track  # noqa: E501

        :param tracked_queries: The tracked_queries of this KeyAuthorsModel.  # noqa: E501
        :type: list[str]
        """

        self._tracked_queries = tracked_queries

    @property
    def custom_stop_words(self):
        """Gets the custom_stop_words of this KeyAuthorsModel.  # noqa: E501

        List of dataset-language-specific stopwords that should be excluded from the analysis. Example: [\"word1\", \"word2\", ..., \"wordN\"]  # noqa: E501

        :return: The custom_stop_words of this KeyAuthorsModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_stop_words

    @custom_stop_words.setter
    def custom_stop_words(self, custom_stop_words):
        """Sets the custom_stop_words of this KeyAuthorsModel.

        List of dataset-language-specific stopwords that should be excluded from the analysis. Example: [\"word1\", \"word2\", ..., \"wordN\"]  # noqa: E501

        :param custom_stop_words: The custom_stop_words of this KeyAuthorsModel.  # noqa: E501
        :type: list[str]
        """

        self._custom_stop_words = custom_stop_words

    @property
    def num_topics(self):
        """Gets the num_topics of this KeyAuthorsModel.  # noqa: E501

        Number of topics to be extracted from the dataset per query to aggregate back into the key authors analysis.  # noqa: E501

        :return: The num_topics of this KeyAuthorsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_topics

    @num_topics.setter
    def num_topics(self, num_topics):
        """Sets the num_topics of this KeyAuthorsModel.

        Number of topics to be extracted from the dataset per query to aggregate back into the key authors analysis.  # noqa: E501

        :param num_topics: The num_topics of this KeyAuthorsModel.  # noqa: E501
        :type: int
        """

        self._num_topics = num_topics

    @property
    def num_keywords(self):
        """Gets the num_keywords of this KeyAuthorsModel.  # noqa: E501

        Number of keywords per topic that is extracted from the dataset per query.  # noqa: E501

        :return: The num_keywords of this KeyAuthorsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_keywords

    @num_keywords.setter
    def num_keywords(self, num_keywords):
        """Sets the num_keywords of this KeyAuthorsModel.

        Number of keywords per topic that is extracted from the dataset per query.  # noqa: E501

        :param num_keywords: The num_keywords of this KeyAuthorsModel.  # noqa: E501
        :type: int
        """

        self._num_keywords = num_keywords

    @property
    def metadata_selection(self):
        """Gets the metadata_selection of this KeyAuthorsModel.  # noqa: E501

        JSON object specifying metadata-based queries on the dataset, of type {\"metadata_field\": \"selected_values\"}  # noqa: E501

        :return: The metadata_selection of this KeyAuthorsModel.  # noqa: E501
        :rtype: object
        """
        return self._metadata_selection

    @metadata_selection.setter
    def metadata_selection(self, metadata_selection):
        """Sets the metadata_selection of this KeyAuthorsModel.

        JSON object specifying metadata-based queries on the dataset, of type {\"metadata_field\": \"selected_values\"}  # noqa: E501

        :param metadata_selection: The metadata_selection of this KeyAuthorsModel.  # noqa: E501
        :type: object
        """

        self._metadata_selection = metadata_selection

    @property
    def time_period(self):
        """Gets the time_period of this KeyAuthorsModel.  # noqa: E501

        Time range selection method 1: time period from now  # noqa: E501

        :return: The time_period of this KeyAuthorsModel.  # noqa: E501
        :rtype: str
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this KeyAuthorsModel.

        Time range selection method 1: time period from now  # noqa: E501

        :param time_period: The time_period of this KeyAuthorsModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["1D", "2D", "1W", "2W", "1M", "3M", "6M", "12M", "3Y", "5Y"]  # noqa: E501
        if time_period not in allowed_values:
            raise ValueError(
                "Invalid value for `time_period` ({0}), must be one of {1}"  # noqa: E501
                .format(time_period, allowed_values)
            )

        self._time_period = time_period

    @property
    def period_start(self):
        """Gets the period_start of this KeyAuthorsModel.  # noqa: E501

        Time range selection method 2: Start date for the period to analyze. Format: \"YYYY-MM-DD\"  # noqa: E501

        :return: The period_start of this KeyAuthorsModel.  # noqa: E501
        :rtype: str
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this KeyAuthorsModel.

        Time range selection method 2: Start date for the period to analyze. Format: \"YYYY-MM-DD\"  # noqa: E501

        :param period_start: The period_start of this KeyAuthorsModel.  # noqa: E501
        :type: str
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this KeyAuthorsModel.  # noqa: E501

        Time range selection method 2: End date for the period to analyze. Format: \"YYYY-MM-DD\"  # noqa: E501

        :return: The period_end of this KeyAuthorsModel.  # noqa: E501
        :rtype: str
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this KeyAuthorsModel.

        Time range selection method 2: End date for the period to analyze. Format: \"YYYY-MM-DD\"  # noqa: E501

        :param period_end: The period_end of this KeyAuthorsModel.  # noqa: E501
        :type: str
        """

        self._period_end = period_end

    @property
    def num_authors(self):
        """Gets the num_authors of this KeyAuthorsModel.  # noqa: E501

        Max number of key contributors that the user wants to see returned by the analysis.  # noqa: E501

        :return: The num_authors of this KeyAuthorsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_authors

    @num_authors.setter
    def num_authors(self, num_authors):
        """Sets the num_authors of this KeyAuthorsModel.

        Max number of key contributors that the user wants to see returned by the analysis.  # noqa: E501

        :param num_authors: The num_authors of this KeyAuthorsModel.  # noqa: E501
        :type: int
        """

        self._num_authors = num_authors

    @property
    def num_keydocs(self):
        """Gets the num_keydocs of this KeyAuthorsModel.  # noqa: E501

        Max number of key contributions from key contributors that the user wants to see returned by the analysis.  # noqa: E501

        :return: The num_keydocs of this KeyAuthorsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_keydocs

    @num_keydocs.setter
    def num_keydocs(self, num_keydocs):
        """Sets the num_keydocs of this KeyAuthorsModel.

        Max number of key contributions from key contributors that the user wants to see returned by the analysis.  # noqa: E501

        :param num_keydocs: The num_keydocs of this KeyAuthorsModel.  # noqa: E501
        :type: int
        """

        self._num_keydocs = num_keydocs

    @property
    def excluded_docs(self):
        """Gets the excluded_docs of this KeyAuthorsModel.  # noqa: E501

        List of document IDs that should be excluded from the analysis. Example: [\"doc_id1\", \"doc_id2\", ..., \"doc_idN\"]  # noqa: E501

        :return: The excluded_docs of this KeyAuthorsModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_docs

    @excluded_docs.setter
    def excluded_docs(self, excluded_docs):
        """Sets the excluded_docs of this KeyAuthorsModel.

        List of document IDs that should be excluded from the analysis. Example: [\"doc_id1\", \"doc_id2\", ..., \"doc_idN\"]  # noqa: E501

        :param excluded_docs: The excluded_docs of this KeyAuthorsModel.  # noqa: E501
        :type: list[str]
        """

        self._excluded_docs = excluded_docs

    @property
    def custom_dict_file(self):
        """Gets the custom_dict_file of this KeyAuthorsModel.  # noqa: E501

        JSON with custom sentiment dictionary: {\"word1\": value1,  \"word2\": value2, ..., \"wordN\": valueN}  # noqa: E501

        :return: The custom_dict_file of this KeyAuthorsModel.  # noqa: E501
        :rtype: object
        """
        return self._custom_dict_file

    @custom_dict_file.setter
    def custom_dict_file(self, custom_dict_file):
        """Sets the custom_dict_file of this KeyAuthorsModel.

        JSON with custom sentiment dictionary: {\"word1\": value1,  \"word2\": value2, ..., \"wordN\": valueN}  # noqa: E501

        :param custom_dict_file: The custom_dict_file of this KeyAuthorsModel.  # noqa: E501
        :type: object
        """

        self._custom_dict_file = custom_dict_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeyAuthorsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyAuthorsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
