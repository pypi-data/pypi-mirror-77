# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UploadURLModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'file_url': 'str',
        'filename': 'str',
        'metadata': 'object'
    }

    attribute_map = {
        'dataset': 'dataset',
        'file_url': 'file_url',
        'filename': 'filename',
        'metadata': 'metadata'
    }

    def __init__(self, dataset=None, file_url=None, filename=None, metadata=None):  # noqa: E501
        """UploadURLModel - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._file_url = None
        self._filename = None
        self._metadata = None
        self.discriminator = None

        self.dataset = dataset
        self.file_url = file_url
        if filename is not None:
            self.filename = filename
        if metadata is not None:
            self.metadata = metadata

    @property
    def dataset(self):
        """Gets the dataset of this UploadURLModel.  # noqa: E501

        Dataset name  # noqa: E501

        :return: The dataset of this UploadURLModel.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this UploadURLModel.

        Dataset name  # noqa: E501

        :param dataset: The dataset of this UploadURLModel.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def file_url(self):
        """Gets the file_url of this UploadURLModel.  # noqa: E501

        Public URL pointing to the file (pdf/txt/docx...)  # noqa: E501

        :return: The file_url of this UploadURLModel.  # noqa: E501
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """Sets the file_url of this UploadURLModel.

        Public URL pointing to the file (pdf/txt/docx...)  # noqa: E501

        :param file_url: The file_url of this UploadURLModel.  # noqa: E501
        :type: str
        """
        if file_url is None:
            raise ValueError("Invalid value for `file_url`, must not be `None`")  # noqa: E501

        self._file_url = file_url

    @property
    def filename(self):
        """Gets the filename of this UploadURLModel.  # noqa: E501

        Specify the filename if you want to override the original filename.Nucleus guesses the file type from the file name extension.  # noqa: E501

        :return: The filename of this UploadURLModel.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this UploadURLModel.

        Specify the filename if you want to override the original filename.Nucleus guesses the file type from the file name extension.  # noqa: E501

        :param filename: The filename of this UploadURLModel.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def metadata(self):
        """Gets the metadata of this UploadURLModel.  # noqa: E501

        JSON containing document metadata(e.g. {\"author\": author, \"time\": \"2020-01-01\"}. Metadata values are case-sensitive.  # noqa: E501

        :return: The metadata of this UploadURLModel.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UploadURLModel.

        JSON containing document metadata(e.g. {\"author\": author, \"time\": \"2020-01-01\"}. Metadata values are case-sensitive.  # noqa: E501

        :param metadata: The metadata of this UploadURLModel.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UploadURLModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadURLModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
