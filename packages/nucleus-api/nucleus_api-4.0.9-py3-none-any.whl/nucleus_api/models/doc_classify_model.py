# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocClassifyModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'query': 'str',
        'metadata_selection': 'object',
        'custom_stop_words': 'list[str]',
        'time_period': 'str',
        'period_start': 'str',
        'period_end': 'str',
        'fixed_topics': 'object',
        'classifier_config': 'object',
        'metadata_selection_contrast': 'object',
        'excluded_docs': 'list[str]',
        'syntax_variables': 'bool',
        'validation_phase': 'bool',
        'remove_redundancies': 'bool'
    }

    attribute_map = {
        'dataset': 'dataset',
        'query': 'query',
        'metadata_selection': 'metadata_selection',
        'custom_stop_words': 'custom_stop_words',
        'time_period': 'time_period',
        'period_start': 'period_start',
        'period_end': 'period_end',
        'fixed_topics': 'fixed_topics',
        'classifier_config': 'classifier_config',
        'metadata_selection_contrast': 'metadata_selection_contrast',
        'excluded_docs': 'excluded_docs',
        'syntax_variables': 'syntax_variables',
        'validation_phase': 'validation_phase',
        'remove_redundancies': 'remove_redundancies'
    }

    def __init__(self, dataset=None, query=None, metadata_selection=None, custom_stop_words=None, time_period=None, period_start=None, period_end=None, fixed_topics=None, classifier_config=None, metadata_selection_contrast=None, excluded_docs=None, syntax_variables=False, validation_phase=False, remove_redundancies=False):  # noqa: E501
        """DocClassifyModel - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._query = None
        self._metadata_selection = None
        self._custom_stop_words = None
        self._time_period = None
        self._period_start = None
        self._period_end = None
        self._fixed_topics = None
        self._classifier_config = None
        self._metadata_selection_contrast = None
        self._excluded_docs = None
        self._syntax_variables = None
        self._validation_phase = None
        self._remove_redundancies = None
        self.discriminator = None

        self.dataset = dataset
        if query is not None:
            self.query = query
        if metadata_selection is not None:
            self.metadata_selection = metadata_selection
        if custom_stop_words is not None:
            self.custom_stop_words = custom_stop_words
        if time_period is not None:
            self.time_period = time_period
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end
        self.fixed_topics = fixed_topics
        self.classifier_config = classifier_config
        self.metadata_selection_contrast = metadata_selection_contrast
        if excluded_docs is not None:
            self.excluded_docs = excluded_docs
        if syntax_variables is not None:
            self.syntax_variables = syntax_variables
        if validation_phase is not None:
            self.validation_phase = validation_phase
        if remove_redundancies is not None:
            self.remove_redundancies = remove_redundancies

    @property
    def dataset(self):
        """Gets the dataset of this DocClassifyModel.  # noqa: E501

        Dataset name  # noqa: E501

        :return: The dataset of this DocClassifyModel.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this DocClassifyModel.

        Dataset name  # noqa: E501

        :param dataset: The dataset of this DocClassifyModel.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def query(self):
        """Gets the query of this DocClassifyModel.  # noqa: E501

        Dataset-language-specific fulltext query, using SQL MATCH boolean query format. Example: \"(word1 OR word2) AND (word3 OR word4)\"  # noqa: E501

        :return: The query of this DocClassifyModel.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this DocClassifyModel.

        Dataset-language-specific fulltext query, using SQL MATCH boolean query format. Example: \"(word1 OR word2) AND (word3 OR word4)\"  # noqa: E501

        :param query: The query of this DocClassifyModel.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def metadata_selection(self):
        """Gets the metadata_selection of this DocClassifyModel.  # noqa: E501

        JSON specifying metadata-based queries on the dataset. If titles or doc_ids are also provided, then this selection is ignored. Format: {\"key\": \"values\"}. Metadata values are case-sensitive.  # noqa: E501

        :return: The metadata_selection of this DocClassifyModel.  # noqa: E501
        :rtype: object
        """
        return self._metadata_selection

    @metadata_selection.setter
    def metadata_selection(self, metadata_selection):
        """Sets the metadata_selection of this DocClassifyModel.

        JSON specifying metadata-based queries on the dataset. If titles or doc_ids are also provided, then this selection is ignored. Format: {\"key\": \"values\"}. Metadata values are case-sensitive.  # noqa: E501

        :param metadata_selection: The metadata_selection of this DocClassifyModel.  # noqa: E501
        :type: object
        """

        self._metadata_selection = metadata_selection

    @property
    def custom_stop_words(self):
        """Gets the custom_stop_words of this DocClassifyModel.  # noqa: E501

        List of dataset-language-specific stopwords that should be excluded from the analysis. Example: [\"word1\", \"word2\", ..., \"wordN\"]  # noqa: E501

        :return: The custom_stop_words of this DocClassifyModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_stop_words

    @custom_stop_words.setter
    def custom_stop_words(self, custom_stop_words):
        """Sets the custom_stop_words of this DocClassifyModel.

        List of dataset-language-specific stopwords that should be excluded from the analysis. Example: [\"word1\", \"word2\", ..., \"wordN\"]  # noqa: E501

        :param custom_stop_words: The custom_stop_words of this DocClassifyModel.  # noqa: E501
        :type: list[str]
        """

        self._custom_stop_words = custom_stop_words

    @property
    def time_period(self):
        """Gets the time_period of this DocClassifyModel.  # noqa: E501

        Alternative 1: Time period selection from now  # noqa: E501

        :return: The time_period of this DocClassifyModel.  # noqa: E501
        :rtype: str
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this DocClassifyModel.

        Alternative 1: Time period selection from now  # noqa: E501

        :param time_period: The time_period of this DocClassifyModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["1M", "3M", "6M", "12M", "3Y", "5Y"]  # noqa: E501
        if time_period not in allowed_values:
            raise ValueError(
                "Invalid value for `time_period` ({0}), must be one of {1}"  # noqa: E501
                .format(time_period, allowed_values)
            )

        self._time_period = time_period

    @property
    def period_start(self):
        """Gets the period_start of this DocClassifyModel.  # noqa: E501

        Alternative 2: Start date for the period to analyze within the dataset. Format: \"YYYY-MM-DD\"   # noqa: E501

        :return: The period_start of this DocClassifyModel.  # noqa: E501
        :rtype: str
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this DocClassifyModel.

        Alternative 2: Start date for the period to analyze within the dataset. Format: \"YYYY-MM-DD\"   # noqa: E501

        :param period_start: The period_start of this DocClassifyModel.  # noqa: E501
        :type: str
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this DocClassifyModel.  # noqa: E501

        Alternative 2: End date for the period to analyze within the dataset. Format: \"YYYY-MM-DD\"   # noqa: E501

        :return: The period_end of this DocClassifyModel.  # noqa: E501
        :rtype: str
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this DocClassifyModel.

        Alternative 2: End date for the period to analyze within the dataset. Format: \"YYYY-MM-DD\"   # noqa: E501

        :param period_end: The period_end of this DocClassifyModel.  # noqa: E501
        :type: str
        """

        self._period_end = period_end

    @property
    def fixed_topics(self):
        """Gets the fixed_topics of this DocClassifyModel.  # noqa: E501

        JSON object specifying the contrasting topic that is exogenously fixed, of type {\"keywords\": [\"keyword_1\", \"keyword_2\", \"keyword_3\"], \"weights\": [weight_1, weight_2, weight_3]}  # noqa: E501

        :return: The fixed_topics of this DocClassifyModel.  # noqa: E501
        :rtype: object
        """
        return self._fixed_topics

    @fixed_topics.setter
    def fixed_topics(self, fixed_topics):
        """Sets the fixed_topics of this DocClassifyModel.

        JSON object specifying the contrasting topic that is exogenously fixed, of type {\"keywords\": [\"keyword_1\", \"keyword_2\", \"keyword_3\"], \"weights\": [weight_1, weight_2, weight_3]}  # noqa: E501

        :param fixed_topics: The fixed_topics of this DocClassifyModel.  # noqa: E501
        :type: object
        """
        if fixed_topics is None:
            raise ValueError("Invalid value for `fixed_topics`, must not be `None`")  # noqa: E501

        self._fixed_topics = fixed_topics

    @property
    def classifier_config(self):
        """Gets the classifier_config of this DocClassifyModel.  # noqa: E501

        JSON object specifying the configuration of the classifier                             from the training phase, of type {\"keywords\": [keyword1, keyword2, keyword3],                            \"coefs\": [coef_1, coef_2, coef_3], \"intercept\": intercept}  # noqa: E501

        :return: The classifier_config of this DocClassifyModel.  # noqa: E501
        :rtype: object
        """
        return self._classifier_config

    @classifier_config.setter
    def classifier_config(self, classifier_config):
        """Sets the classifier_config of this DocClassifyModel.

        JSON object specifying the configuration of the classifier                             from the training phase, of type {\"keywords\": [keyword1, keyword2, keyword3],                            \"coefs\": [coef_1, coef_2, coef_3], \"intercept\": intercept}  # noqa: E501

        :param classifier_config: The classifier_config of this DocClassifyModel.  # noqa: E501
        :type: object
        """
        if classifier_config is None:
            raise ValueError("Invalid value for `classifier_config`, must not be `None`")  # noqa: E501

        self._classifier_config = classifier_config

    @property
    def metadata_selection_contrast(self):
        """Gets the metadata_selection_contrast of this DocClassifyModel.  # noqa: E501

        JSON object specifying the 2 classes subject to classification, of type: if based on content-selection {\"content\": \"word1 word2 ... wordN\"}; if based on other field {\"metadata_field\": [\"values_class1\", \"values_class2\"}  # noqa: E501

        :return: The metadata_selection_contrast of this DocClassifyModel.  # noqa: E501
        :rtype: object
        """
        return self._metadata_selection_contrast

    @metadata_selection_contrast.setter
    def metadata_selection_contrast(self, metadata_selection_contrast):
        """Sets the metadata_selection_contrast of this DocClassifyModel.

        JSON object specifying the 2 classes subject to classification, of type: if based on content-selection {\"content\": \"word1 word2 ... wordN\"}; if based on other field {\"metadata_field\": [\"values_class1\", \"values_class2\"}  # noqa: E501

        :param metadata_selection_contrast: The metadata_selection_contrast of this DocClassifyModel.  # noqa: E501
        :type: object
        """
        if metadata_selection_contrast is None:
            raise ValueError("Invalid value for `metadata_selection_contrast`, must not be `None`")  # noqa: E501

        self._metadata_selection_contrast = metadata_selection_contrast

    @property
    def excluded_docs(self):
        """Gets the excluded_docs of this DocClassifyModel.  # noqa: E501

        List of document IDs that should be excluded from the analysis. Example: [\"doc_id1\", \"doc_id2\", ..., \"doc_idN\"]  # noqa: E501

        :return: The excluded_docs of this DocClassifyModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_docs

    @excluded_docs.setter
    def excluded_docs(self, excluded_docs):
        """Sets the excluded_docs of this DocClassifyModel.

        List of document IDs that should be excluded from the analysis. Example: [\"doc_id1\", \"doc_id2\", ..., \"doc_idN\"]  # noqa: E501

        :param excluded_docs: The excluded_docs of this DocClassifyModel.  # noqa: E501
        :type: list[str]
        """

        self._excluded_docs = excluded_docs

    @property
    def syntax_variables(self):
        """Gets the syntax_variables of this DocClassifyModel.  # noqa: E501

        If True, the classifier will include syntax-related variables on top of content variables  # noqa: E501

        :return: The syntax_variables of this DocClassifyModel.  # noqa: E501
        :rtype: bool
        """
        return self._syntax_variables

    @syntax_variables.setter
    def syntax_variables(self, syntax_variables):
        """Sets the syntax_variables of this DocClassifyModel.

        If True, the classifier will include syntax-related variables on top of content variables  # noqa: E501

        :param syntax_variables: The syntax_variables of this DocClassifyModel.  # noqa: E501
        :type: bool
        """

        self._syntax_variables = syntax_variables

    @property
    def validation_phase(self):
        """Gets the validation_phase of this DocClassifyModel.  # noqa: E501

        If True, the classifier assumes that the dataset provided is labeled with the 2 classes and will use that to compute accuracy/precision/recall  # noqa: E501

        :return: The validation_phase of this DocClassifyModel.  # noqa: E501
        :rtype: bool
        """
        return self._validation_phase

    @validation_phase.setter
    def validation_phase(self, validation_phase):
        """Sets the validation_phase of this DocClassifyModel.

        If True, the classifier assumes that the dataset provided is labeled with the 2 classes and will use that to compute accuracy/precision/recall  # noqa: E501

        :param validation_phase: The validation_phase of this DocClassifyModel.  # noqa: E501
        :type: bool
        """

        self._validation_phase = validation_phase

    @property
    def remove_redundancies(self):
        """Gets the remove_redundancies of this DocClassifyModel.  # noqa: E501

        If True, this option removes quasi-duplicates from the analysis and retains only one copy of it. A quasi-duplicate would have the same NLP representation, but not necessarily the exact same text.  # noqa: E501

        :return: The remove_redundancies of this DocClassifyModel.  # noqa: E501
        :rtype: bool
        """
        return self._remove_redundancies

    @remove_redundancies.setter
    def remove_redundancies(self, remove_redundancies):
        """Sets the remove_redundancies of this DocClassifyModel.

        If True, this option removes quasi-duplicates from the analysis and retains only one copy of it. A quasi-duplicate would have the same NLP representation, but not necessarily the exact same text.  # noqa: E501

        :param remove_redundancies: The remove_redundancies of this DocClassifyModel.  # noqa: E501
        :type: bool
        """

        self._remove_redundancies = remove_redundancies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocClassifyModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocClassifyModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
