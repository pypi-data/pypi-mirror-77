# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocClassifyL2DRRespModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doc_ids': 'list[int]',
        'true_class': 'list[str]',
        'estimated_class': 'list[str]'
    }

    attribute_map = {
        'doc_ids': 'doc_ids',
        'true_class': 'true_class',
        'estimated_class': 'estimated_class'
    }

    def __init__(self, doc_ids=None, true_class=None, estimated_class=None):  # noqa: E501
        """DocClassifyL2DRRespModel - a model defined in Swagger"""  # noqa: E501

        self._doc_ids = None
        self._true_class = None
        self._estimated_class = None
        self.discriminator = None

        if doc_ids is not None:
            self.doc_ids = doc_ids
        if true_class is not None:
            self.true_class = true_class
        if estimated_class is not None:
            self.estimated_class = estimated_class

    @property
    def doc_ids(self):
        """Gets the doc_ids of this DocClassifyL2DRRespModel.  # noqa: E501

        List of document IDs (e.g [\"doc_id1\", \"doc_id2\"])  # noqa: E501

        :return: The doc_ids of this DocClassifyL2DRRespModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._doc_ids

    @doc_ids.setter
    def doc_ids(self, doc_ids):
        """Sets the doc_ids of this DocClassifyL2DRRespModel.

        List of document IDs (e.g [\"doc_id1\", \"doc_id2\"])  # noqa: E501

        :param doc_ids: The doc_ids of this DocClassifyL2DRRespModel.  # noqa: E501
        :type: list[int]
        """

        self._doc_ids = doc_ids

    @property
    def true_class(self):
        """Gets the true_class of this DocClassifyL2DRRespModel.  # noqa: E501

        Actual class of each document, if running validation phase and thus such class is known on the labeled data  # noqa: E501

        :return: The true_class of this DocClassifyL2DRRespModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._true_class

    @true_class.setter
    def true_class(self, true_class):
        """Sets the true_class of this DocClassifyL2DRRespModel.

        Actual class of each document, if running validation phase and thus such class is known on the labeled data  # noqa: E501

        :param true_class: The true_class of this DocClassifyL2DRRespModel.  # noqa: E501
        :type: list[str]
        """

        self._true_class = true_class

    @property
    def estimated_class(self):
        """Gets the estimated_class of this DocClassifyL2DRRespModel.  # noqa: E501

        Class of each document as estimated by the document classification algorithm  # noqa: E501

        :return: The estimated_class of this DocClassifyL2DRRespModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._estimated_class

    @estimated_class.setter
    def estimated_class(self, estimated_class):
        """Sets the estimated_class of this DocClassifyL2DRRespModel.

        Class of each document as estimated by the document classification algorithm  # noqa: E501

        :param estimated_class: The estimated_class of this DocClassifyL2DRRespModel.  # noqa: E501
        :type: list[str]
        """

        self._estimated_class = estimated_class

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocClassifyL2DRRespModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocClassifyL2DRRespModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
