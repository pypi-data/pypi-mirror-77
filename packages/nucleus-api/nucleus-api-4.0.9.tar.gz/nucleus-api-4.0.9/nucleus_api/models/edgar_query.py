# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EdgarQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_dataset': 'str',
        'tickers': 'list[str]',
        'filing_types': 'list[str]',
        'sections': 'list[str]',
        'period_start': 'date',
        'period_end': 'date'
    }

    attribute_map = {
        'destination_dataset': 'destination_dataset',
        'tickers': 'tickers',
        'filing_types': 'filing_types',
        'sections': 'sections',
        'period_start': 'period_start',
        'period_end': 'period_end'
    }

    def __init__(self, destination_dataset=None, tickers=None, filing_types=None, sections=None, period_start=None, period_end=None):  # noqa: E501
        """EdgarQuery - a model defined in Swagger"""  # noqa: E501

        self._destination_dataset = None
        self._tickers = None
        self._filing_types = None
        self._sections = None
        self._period_start = None
        self._period_end = None
        self.discriminator = None

        self.destination_dataset = destination_dataset
        self.tickers = tickers
        self.filing_types = filing_types
        if sections is not None:
            self.sections = sections
        if period_start is not None:
            self.period_start = period_start
        if period_end is not None:
            self.period_end = period_end

    @property
    def destination_dataset(self):
        """Gets the destination_dataset of this EdgarQuery.  # noqa: E501

        Name of the new dataset where the scraped documents will be inserted.  # noqa: E501

        :return: The destination_dataset of this EdgarQuery.  # noqa: E501
        :rtype: str
        """
        return self._destination_dataset

    @destination_dataset.setter
    def destination_dataset(self, destination_dataset):
        """Sets the destination_dataset of this EdgarQuery.

        Name of the new dataset where the scraped documents will be inserted.  # noqa: E501

        :param destination_dataset: The destination_dataset of this EdgarQuery.  # noqa: E501
        :type: str
        """
        if destination_dataset is None:
            raise ValueError("Invalid value for `destination_dataset`, must not be `None`")  # noqa: E501

        self._destination_dataset = destination_dataset

    @property
    def tickers(self):
        """Gets the tickers of this EdgarQuery.  # noqa: E501

        List of tickers to be scraped (eg. [\"GOOG\"])  # noqa: E501

        :return: The tickers of this EdgarQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._tickers

    @tickers.setter
    def tickers(self, tickers):
        """Sets the tickers of this EdgarQuery.

        List of tickers to be scraped (eg. [\"GOOG\"])  # noqa: E501

        :param tickers: The tickers of this EdgarQuery.  # noqa: E501
        :type: list[str]
        """
        if tickers is None:
            raise ValueError("Invalid value for `tickers`, must not be `None`")  # noqa: E501

        self._tickers = tickers

    @property
    def filing_types(self):
        """Gets the filing_types of this EdgarQuery.  # noqa: E501

        List of form types to be scraped (eg. [\"10K\"])  # noqa: E501

        :return: The filing_types of this EdgarQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._filing_types

    @filing_types.setter
    def filing_types(self, filing_types):
        """Sets the filing_types of this EdgarQuery.

        List of form types to be scraped (eg. [\"10K\"])  # noqa: E501

        :param filing_types: The filing_types of this EdgarQuery.  # noqa: E501
        :type: list[str]
        """
        if filing_types is None:
            raise ValueError("Invalid value for `filing_types`, must not be `None`")  # noqa: E501

        self._filing_types = filing_types

    @property
    def sections(self):
        """Gets the sections of this EdgarQuery.  # noqa: E501

        List of document sections to be scraped. If empty all sections will be scraped  # noqa: E501

        :return: The sections of this EdgarQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this EdgarQuery.

        List of document sections to be scraped. If empty all sections will be scraped  # noqa: E501

        :param sections: The sections of this EdgarQuery.  # noqa: E501
        :type: list[str]
        """

        self._sections = sections

    @property
    def period_start(self):
        """Gets the period_start of this EdgarQuery.  # noqa: E501

        Start date for the period to analyze within the dataset. Format: \"YYYY-MM-DD\"   # noqa: E501

        :return: The period_start of this EdgarQuery.  # noqa: E501
        :rtype: date
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this EdgarQuery.

        Start date for the period to analyze within the dataset. Format: \"YYYY-MM-DD\"   # noqa: E501

        :param period_start: The period_start of this EdgarQuery.  # noqa: E501
        :type: date
        """

        self._period_start = period_start

    @property
    def period_end(self):
        """Gets the period_end of this EdgarQuery.  # noqa: E501

        End date for the period to analyze within the dataset. Format: \"YYYY-MM-DD\"   # noqa: E501

        :return: The period_end of this EdgarQuery.  # noqa: E501
        :rtype: date
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this EdgarQuery.

        End date for the period to analyze within the dataset. Format: \"YYYY-MM-DD\"   # noqa: E501

        :param period_end: The period_end of this EdgarQuery.  # noqa: E501
        :type: date
        """

        self._period_end = period_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgarQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgarQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
