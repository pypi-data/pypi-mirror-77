# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TopicSentimentL1RespModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'keywords': 'str',
        'strength': 'str',
        'sentiment': 'str',
        'doc_topic_exposures': 'list[str]',
        'doc_sentiments': 'list[str]',
        'doc_ids': 'list[str]'
    }

    attribute_map = {
        'keywords': 'keywords',
        'strength': 'strength',
        'sentiment': 'sentiment',
        'doc_topic_exposures': 'doc_topic_exposures',
        'doc_sentiments': 'doc_sentiments',
        'doc_ids': 'doc_ids'
    }

    def __init__(self, keywords=None, strength=None, sentiment=None, doc_topic_exposures=None, doc_sentiments=None, doc_ids=None):  # noqa: E501
        """TopicSentimentL1RespModel - a model defined in Swagger"""  # noqa: E501

        self._keywords = None
        self._strength = None
        self._sentiment = None
        self._doc_topic_exposures = None
        self._doc_sentiments = None
        self._doc_ids = None
        self.discriminator = None

        if keywords is not None:
            self.keywords = keywords
        if strength is not None:
            self.strength = strength
        if sentiment is not None:
            self.sentiment = sentiment
        if doc_topic_exposures is not None:
            self.doc_topic_exposures = doc_topic_exposures
        if doc_sentiments is not None:
            self.doc_sentiments = doc_sentiments
        if doc_ids is not None:
            self.doc_ids = doc_ids

    @property
    def keywords(self):
        """Gets the keywords of this TopicSentimentL1RespModel.  # noqa: E501

        Topic keywords  # noqa: E501

        :return: The keywords of this TopicSentimentL1RespModel.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this TopicSentimentL1RespModel.

        Topic keywords  # noqa: E501

        :param keywords: The keywords of this TopicSentimentL1RespModel.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def strength(self):
        """Gets the strength of this TopicSentimentL1RespModel.  # noqa: E501

        Topic strength  # noqa: E501

        :return: The strength of this TopicSentimentL1RespModel.  # noqa: E501
        :rtype: str
        """
        return self._strength

    @strength.setter
    def strength(self, strength):
        """Sets the strength of this TopicSentimentL1RespModel.

        Topic strength  # noqa: E501

        :param strength: The strength of this TopicSentimentL1RespModel.  # noqa: E501
        :type: str
        """

        self._strength = strength

    @property
    def sentiment(self):
        """Gets the sentiment of this TopicSentimentL1RespModel.  # noqa: E501

        Topic sentiment  # noqa: E501

        :return: The sentiment of this TopicSentimentL1RespModel.  # noqa: E501
        :rtype: str
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this TopicSentimentL1RespModel.

        Topic sentiment  # noqa: E501

        :param sentiment: The sentiment of this TopicSentimentL1RespModel.  # noqa: E501
        :type: str
        """

        self._sentiment = sentiment

    @property
    def doc_topic_exposures(self):
        """Gets the doc_topic_exposures of this TopicSentimentL1RespModel.  # noqa: E501

        Document exposures to topics  # noqa: E501

        :return: The doc_topic_exposures of this TopicSentimentL1RespModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._doc_topic_exposures

    @doc_topic_exposures.setter
    def doc_topic_exposures(self, doc_topic_exposures):
        """Sets the doc_topic_exposures of this TopicSentimentL1RespModel.

        Document exposures to topics  # noqa: E501

        :param doc_topic_exposures: The doc_topic_exposures of this TopicSentimentL1RespModel.  # noqa: E501
        :type: list[str]
        """

        self._doc_topic_exposures = doc_topic_exposures

    @property
    def doc_sentiments(self):
        """Gets the doc_sentiments of this TopicSentimentL1RespModel.  # noqa: E501

        Document sentiments  # noqa: E501

        :return: The doc_sentiments of this TopicSentimentL1RespModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._doc_sentiments

    @doc_sentiments.setter
    def doc_sentiments(self, doc_sentiments):
        """Sets the doc_sentiments of this TopicSentimentL1RespModel.

        Document sentiments  # noqa: E501

        :param doc_sentiments: The doc_sentiments of this TopicSentimentL1RespModel.  # noqa: E501
        :type: list[str]
        """

        self._doc_sentiments = doc_sentiments

    @property
    def doc_ids(self):
        """Gets the doc_ids of this TopicSentimentL1RespModel.  # noqa: E501

        List of document IDs (e.g [\"doc_id1\", \"doc_id2\"])  # noqa: E501

        :return: The doc_ids of this TopicSentimentL1RespModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._doc_ids

    @doc_ids.setter
    def doc_ids(self, doc_ids):
        """Sets the doc_ids of this TopicSentimentL1RespModel.

        List of document IDs (e.g [\"doc_id1\", \"doc_id2\"])  # noqa: E501

        :param doc_ids: The doc_ids of this TopicSentimentL1RespModel.  # noqa: E501
        :type: list[str]
        """

        self._doc_ids = doc_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopicSentimentL1RespModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopicSentimentL1RespModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
