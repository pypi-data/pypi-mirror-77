# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'doc_titles': 'list[str]',
        'doc_ids': 'list[str]',
        'metadata_selection': 'object'
    }

    attribute_map = {
        'dataset': 'dataset',
        'doc_titles': 'doc_titles',
        'doc_ids': 'doc_ids',
        'metadata_selection': 'metadata_selection'
    }

    def __init__(self, dataset=None, doc_titles=None, doc_ids=None, metadata_selection=None):  # noqa: E501
        """DocInfo - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._doc_titles = None
        self._doc_ids = None
        self._metadata_selection = None
        self.discriminator = None

        self.dataset = dataset
        if doc_titles is not None:
            self.doc_titles = doc_titles
        if doc_ids is not None:
            self.doc_ids = doc_ids
        if metadata_selection is not None:
            self.metadata_selection = metadata_selection

    @property
    def dataset(self):
        """Gets the dataset of this DocInfo.  # noqa: E501

        Dataset name  # noqa: E501

        :return: The dataset of this DocInfo.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this DocInfo.

        Dataset name  # noqa: E501

        :param dataset: The dataset of this DocInfo.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def doc_titles(self):
        """Gets the doc_titles of this DocInfo.  # noqa: E501

        List of document IDs that should be excluded from the analysis. Example: [\"doc_id1\", \"doc_id2\", ..., \"doc_idN\"]  # noqa: E501

        :return: The doc_titles of this DocInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._doc_titles

    @doc_titles.setter
    def doc_titles(self, doc_titles):
        """Sets the doc_titles of this DocInfo.

        List of document IDs that should be excluded from the analysis. Example: [\"doc_id1\", \"doc_id2\", ..., \"doc_idN\"]  # noqa: E501

        :param doc_titles: The doc_titles of this DocInfo.  # noqa: E501
        :type: list[str]
        """

        self._doc_titles = doc_titles

    @property
    def doc_ids(self):
        """Gets the doc_ids of this DocInfo.  # noqa: E501

        List of document IDs (e.g [\"doc_id1\", \"doc_id2\"])  # noqa: E501

        :return: The doc_ids of this DocInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._doc_ids

    @doc_ids.setter
    def doc_ids(self, doc_ids):
        """Sets the doc_ids of this DocInfo.

        List of document IDs (e.g [\"doc_id1\", \"doc_id2\"])  # noqa: E501

        :param doc_ids: The doc_ids of this DocInfo.  # noqa: E501
        :type: list[str]
        """

        self._doc_ids = doc_ids

    @property
    def metadata_selection(self):
        """Gets the metadata_selection of this DocInfo.  # noqa: E501

        JSON specifying metadata-based queries on the dataset. If titles or doc_ids are also provided, then this selection is ignored. Format: {\"key\": \"values\"}. Metadata values are case-sensitive.  # noqa: E501

        :return: The metadata_selection of this DocInfo.  # noqa: E501
        :rtype: object
        """
        return self._metadata_selection

    @metadata_selection.setter
    def metadata_selection(self, metadata_selection):
        """Sets the metadata_selection of this DocInfo.

        JSON specifying metadata-based queries on the dataset. If titles or doc_ids are also provided, then this selection is ignored. Format: {\"key\": \"values\"}. Metadata values are case-sensitive.  # noqa: E501

        :param metadata_selection: The metadata_selection of this DocInfo.  # noqa: E501
        :type: object
        """

        self._metadata_selection = metadata_selection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
