# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocumentNoveltyL1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'list[str]',
        'novel_docs': 'list[str]',
        'novel_urls': 'list[str]',
        'novel_docids': 'list[str]',
        'novelty_scores': 'list[str]'
    }

    attribute_map = {
        'query': 'query',
        'novel_docs': 'novel_docs',
        'novel_urls': 'novel_urls',
        'novel_docids': 'novel_docids',
        'novelty_scores': 'novelty_scores'
    }

    def __init__(self, query=None, novel_docs=None, novel_urls=None, novel_docids=None, novelty_scores=None):  # noqa: E501
        """DocumentNoveltyL1Model - a model defined in Swagger"""  # noqa: E501

        self._query = None
        self._novel_docs = None
        self._novel_urls = None
        self._novel_docids = None
        self._novelty_scores = None
        self.discriminator = None

        if query is not None:
            self.query = query
        if novel_docs is not None:
            self.novel_docs = novel_docs
        if novel_urls is not None:
            self.novel_urls = novel_urls
        if novel_docids is not None:
            self.novel_docids = novel_docids
        if novelty_scores is not None:
            self.novelty_scores = novelty_scores

    @property
    def query(self):
        """Gets the query of this DocumentNoveltyL1Model.  # noqa: E501

        Query analyzed. If no query was provided, then these are the hot topics.  # noqa: E501

        :return: The query of this DocumentNoveltyL1Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this DocumentNoveltyL1Model.

        Query analyzed. If no query was provided, then these are the hot topics.  # noqa: E501

        :param query: The query of this DocumentNoveltyL1Model.  # noqa: E501
        :type: list[str]
        """

        self._query = query

    @property
    def novel_docs(self):
        """Gets the novel_docs of this DocumentNoveltyL1Model.  # noqa: E501

        Document titles for novel documents  # noqa: E501

        :return: The novel_docs of this DocumentNoveltyL1Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._novel_docs

    @novel_docs.setter
    def novel_docs(self, novel_docs):
        """Sets the novel_docs of this DocumentNoveltyL1Model.

        Document titles for novel documents  # noqa: E501

        :param novel_docs: The novel_docs of this DocumentNoveltyL1Model.  # noqa: E501
        :type: list[str]
        """

        self._novel_docs = novel_docs

    @property
    def novel_urls(self):
        """Gets the novel_urls of this DocumentNoveltyL1Model.  # noqa: E501

        URLs of documents from the foreground containing new words  # noqa: E501

        :return: The novel_urls of this DocumentNoveltyL1Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._novel_urls

    @novel_urls.setter
    def novel_urls(self, novel_urls):
        """Sets the novel_urls of this DocumentNoveltyL1Model.

        URLs of documents from the foreground containing new words  # noqa: E501

        :param novel_urls: The novel_urls of this DocumentNoveltyL1Model.  # noqa: E501
        :type: list[str]
        """

        self._novel_urls = novel_urls

    @property
    def novel_docids(self):
        """Gets the novel_docids of this DocumentNoveltyL1Model.  # noqa: E501

        Document IDs for novel documents  # noqa: E501

        :return: The novel_docids of this DocumentNoveltyL1Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._novel_docids

    @novel_docids.setter
    def novel_docids(self, novel_docids):
        """Sets the novel_docids of this DocumentNoveltyL1Model.

        Document IDs for novel documents  # noqa: E501

        :param novel_docids: The novel_docids of this DocumentNoveltyL1Model.  # noqa: E501
        :type: list[str]
        """

        self._novel_docids = novel_docids

    @property
    def novelty_scores(self):
        """Gets the novelty_scores of this DocumentNoveltyL1Model.  # noqa: E501

        Novelty scores for all documents in the foreground  # noqa: E501

        :return: The novelty_scores of this DocumentNoveltyL1Model.  # noqa: E501
        :rtype: list[str]
        """
        return self._novelty_scores

    @novelty_scores.setter
    def novelty_scores(self, novelty_scores):
        """Sets the novelty_scores of this DocumentNoveltyL1Model.

        Novelty scores for all documents in the foreground  # noqa: E501

        :param novelty_scores: The novelty_scores of this DocumentNoveltyL1Model.  # noqa: E501
        :type: list[str]
        """

        self._novelty_scores = novelty_scores

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentNoveltyL1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentNoveltyL1Model):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
