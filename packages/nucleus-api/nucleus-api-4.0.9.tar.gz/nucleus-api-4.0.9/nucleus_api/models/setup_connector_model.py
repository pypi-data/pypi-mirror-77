# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SetupConnectorModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'str',
        'settings': 'object',
        'period_seconds': 'int',
        'connector': 'str'
    }

    attribute_map = {
        'dataset': 'dataset',
        'settings': 'settings',
        'period_seconds': 'period_seconds',
        'connector': 'connector'
    }

    def __init__(self, dataset=None, settings=None, period_seconds=None, connector='servicenow'):  # noqa: E501
        """SetupConnectorModel - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._settings = None
        self._period_seconds = None
        self._connector = None
        self.discriminator = None

        self.dataset = dataset
        self.settings = settings
        if period_seconds is not None:
            self.period_seconds = period_seconds
        if connector is not None:
            self.connector = connector

    @property
    def dataset(self):
        """Gets the dataset of this SetupConnectorModel.  # noqa: E501

        Destination dataset name. Data from the connector will be inserted into this dataset.  # noqa: E501

        :return: The dataset of this SetupConnectorModel.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this SetupConnectorModel.

        Destination dataset name. Data from the connector will be inserted into this dataset.  # noqa: E501

        :param dataset: The dataset of this SetupConnectorModel.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def settings(self):
        """Gets the settings of this SetupConnectorModel.  # noqa: E501

        Json settings, specific for each connector. Check connector documentation  # noqa: E501

        :return: The settings of this SetupConnectorModel.  # noqa: E501
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this SetupConnectorModel.

        Json settings, specific for each connector. Check connector documentation  # noqa: E501

        :param settings: The settings of this SetupConnectorModel.  # noqa: E501
        :type: object
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")  # noqa: E501

        self._settings = settings

    @property
    def period_seconds(self):
        """Gets the period_seconds of this SetupConnectorModel.  # noqa: E501

        Update frequency, in seconds. Default 1 hour.  # noqa: E501

        :return: The period_seconds of this SetupConnectorModel.  # noqa: E501
        :rtype: int
        """
        return self._period_seconds

    @period_seconds.setter
    def period_seconds(self, period_seconds):
        """Sets the period_seconds of this SetupConnectorModel.

        Update frequency, in seconds. Default 1 hour.  # noqa: E501

        :param period_seconds: The period_seconds of this SetupConnectorModel.  # noqa: E501
        :type: int
        """

        self._period_seconds = period_seconds

    @property
    def connector(self):
        """Gets the connector of this SetupConnectorModel.  # noqa: E501

        Name of the connector.  # noqa: E501

        :return: The connector of this SetupConnectorModel.  # noqa: E501
        :rtype: str
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this SetupConnectorModel.

        Name of the connector.  # noqa: E501

        :param connector: The connector of this SetupConnectorModel.  # noqa: E501
        :type: str
        """

        self._connector = connector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetupConnectorModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetupConnectorModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
