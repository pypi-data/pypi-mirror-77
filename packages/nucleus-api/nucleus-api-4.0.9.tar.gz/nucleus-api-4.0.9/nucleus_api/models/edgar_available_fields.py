# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.9
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EdgarAvailableFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tickers': 'object',
        'filing_types': 'list[str]',
        'sections': 'list[str]',
        'count': 'int',
        'date_range': 'list[date]'
    }

    attribute_map = {
        'tickers': 'tickers',
        'filing_types': 'filing_types',
        'sections': 'sections',
        'count': 'count',
        'date_range': 'date_range'
    }

    def __init__(self, tickers=None, filing_types=None, sections=None, count=None, date_range=None):  # noqa: E501
        """EdgarAvailableFields - a model defined in Swagger"""  # noqa: E501

        self._tickers = None
        self._filing_types = None
        self._sections = None
        self._count = None
        self._date_range = None
        self.discriminator = None

        if tickers is not None:
            self.tickers = tickers
        if filing_types is not None:
            self.filing_types = filing_types
        if sections is not None:
            self.sections = sections
        if count is not None:
            self.count = count
        if date_range is not None:
            self.date_range = date_range

    @property
    def tickers(self):
        """Gets the tickers of this EdgarAvailableFields.  # noqa: E501

        Mapping of tickers and company names (eg: {\"GOOG\":\"Google\"})  # noqa: E501

        :return: The tickers of this EdgarAvailableFields.  # noqa: E501
        :rtype: object
        """
        return self._tickers

    @tickers.setter
    def tickers(self, tickers):
        """Sets the tickers of this EdgarAvailableFields.

        Mapping of tickers and company names (eg: {\"GOOG\":\"Google\"})  # noqa: E501

        :param tickers: The tickers of this EdgarAvailableFields.  # noqa: E501
        :type: object
        """

        self._tickers = tickers

    @property
    def filing_types(self):
        """Gets the filing_types of this EdgarAvailableFields.  # noqa: E501

        List of form types to be scraped (eg. [\"10K\"])  # noqa: E501

        :return: The filing_types of this EdgarAvailableFields.  # noqa: E501
        :rtype: list[str]
        """
        return self._filing_types

    @filing_types.setter
    def filing_types(self, filing_types):
        """Sets the filing_types of this EdgarAvailableFields.

        List of form types to be scraped (eg. [\"10K\"])  # noqa: E501

        :param filing_types: The filing_types of this EdgarAvailableFields.  # noqa: E501
        :type: list[str]
        """

        self._filing_types = filing_types

    @property
    def sections(self):
        """Gets the sections of this EdgarAvailableFields.  # noqa: E501

        List of document sections to be scraped. If empty all sections will be scraped  # noqa: E501

        :return: The sections of this EdgarAvailableFields.  # noqa: E501
        :rtype: list[str]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this EdgarAvailableFields.

        List of document sections to be scraped. If empty all sections will be scraped  # noqa: E501

        :param sections: The sections of this EdgarAvailableFields.  # noqa: E501
        :type: list[str]
        """

        self._sections = sections

    @property
    def count(self):
        """Gets the count of this EdgarAvailableFields.  # noqa: E501

        Number of available filings matching the input filter (if sections is specified, count is the number of matching sections)  # noqa: E501

        :return: The count of this EdgarAvailableFields.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this EdgarAvailableFields.

        Number of available filings matching the input filter (if sections is specified, count is the number of matching sections)  # noqa: E501

        :param count: The count of this EdgarAvailableFields.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def date_range(self):
        """Gets the date_range of this EdgarAvailableFields.  # noqa: E501

        Available date range matching the input filter  # noqa: E501

        :return: The date_range of this EdgarAvailableFields.  # noqa: E501
        :rtype: list[date]
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this EdgarAvailableFields.

        Available date range matching the input filter  # noqa: E501

        :param date_range: The date_range of this EdgarAvailableFields.  # noqa: E501
        :type: list[date]
        """

        self._date_range = date_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgarAvailableFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgarAvailableFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
