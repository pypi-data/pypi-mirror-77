syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "common.proto";
import "integration.proto";

option java_package = "io.calixa.domain.collaboration";
option java_multiple_files = true;
option optimize_for = SPEED;

package calixa.domain.collaboration;

enum PinnedState {
    PINNED_STATE_UNSPECIFIED = 0;
    PINNED = 1;
    UNPINNED = 2;
}

enum ResolvedState {
    RESOLVED_STATE_UNSPECIFIED = 0;
    RESOLVED = 1;
    UNRESOLVED = 2;
}

enum ReadState {
    READ_STATE_UNSPECIFIED = 0;
    READ = 1;
    UNREAD = 2;
}

// while we can use EntityType, event is not part of it making the storage model weird
enum AssociationType {
    ASSOCIATION_TYPE_UNSPECIFIED = 0;
    EVENT = 1;
    ACCOUNT = 2;
    USER = 3;
}

message Message {
    string organization_id = 1;
    string message_id = 2;
    string thread_id = 3;
    string body = 4;
    string author_id = 5;
    PinnedState pinned = 6;
    ResolvedState resolved = 7;
    google.protobuf.Timestamp created_at = 500;
    google.protobuf.Timestamp updated_at = 501;
}

message Thread {
    string organization_id = 1;
    string thread_id = 2;
    string title = 3;
    AssociationType association_type = 4;
    // account, user ext id or event uuid
    string association_id = 5;
    PinnedState pinned = 6;
    ResolvedState resolved = 7;
    repeated Message messages = 8;
    int64 message_count = 9;
    google.protobuf.Timestamp created_at = 500;
    google.protobuf.Timestamp updated_at = 501;
}

message OrganizationUserNotification {
    string organization_id = 1;
    string notification_id = 2;
    string organization_user_id = 3;
    string thread_id = 4;
    ReadState read = 5;
    google.protobuf.Timestamp created_at = 500;
    google.protobuf.Timestamp updated_at = 501;
}

message SaveThreadRequest {
    Thread thread = 1;
}

message SaveMessageRequest {
    Message message = 1;
}

message ThreadReference {
    string organization_id = 1;
    string thread_id = 2;
}

message MessageReference {
    string organization_id = 1;
    string message_id = 2;
}

message NotificationReference {
    string organization_id = 1;
    string notification_id = 2;
}

message OrganizationUserNotificationRequest {
    string organization_id = 1;
    string organization_user_id = 2;
    string thread_id = 3;
}

message GetThreadRequest {
    string organization_id = 1;
    string thread_id = 2;
    // flag only checked if thread id is set
    bool include_messages = 3;
}

message GetAssociatedThreadsRequest {
    string organization_id = 1;
    AssociationType association_type = 2;
    string association_id = 3;
}

message GetMessageRequest {
    string organization_id = 1;
    string thread_id = 2;
    string message_id = 3;
}

message GetOrganizationUserNotificationsRequest {
    string organization_id = 1;
    string organization_user_id = 2;
}

message GetThreadNotificationsRequest {
    string organization_id = 1;
    string thread_id = 2;
}

service NoteService {
    rpc SaveThread (SaveThreadRequest) returns (Thread) {
    }
    rpc GetThreads (GetThreadRequest) returns (stream Thread) {
    }
    rpc GetAssociatedThreads (GetAssociatedThreadsRequest) returns (stream Thread) {
    }
    rpc SaveMessage (SaveMessageRequest) returns (Message) {
    }
    rpc GetMessages (GetMessageRequest) returns (stream Message) {
    }
    rpc GetLatestMessage (ThreadReference) returns (Message) {
    }
    rpc DeleteThread (ThreadReference) returns (google.protobuf.Empty) {
    }
    rpc DeleteMessage (MessageReference) returns (google.protobuf.Empty) {
    }
    rpc AddOrganizationUserNotification (OrganizationUserNotificationRequest) returns (OrganizationUserNotification) {
    }
    rpc MarkNotificationRead (NotificationReference) returns (google.protobuf.Empty) {
    }
    rpc GetOrganizationUserNotifications (GetOrganizationUserNotificationsRequest) returns (stream OrganizationUserNotification) {
    }
    rpc GetThreadNotifications (GetThreadNotificationsRequest) returns (stream OrganizationUserNotification) {
    }
}
