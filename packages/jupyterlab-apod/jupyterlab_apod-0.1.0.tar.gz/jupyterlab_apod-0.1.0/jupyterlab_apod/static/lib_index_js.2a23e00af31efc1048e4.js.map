{"version":3,"sources":["webpack://jupyterlab_apod/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAA0D;AAC4B;AAC7C;AACzC,yBAAyB,mDAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG,kBAAkB;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,eAAe;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gEAAc,EAAE,UAAU;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB,gCAAgC;AACrD;AACA,sBAAsB,+DAAa;AACnC;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,oEAAe;AAC/C;AACA;AACA,iEAAe,SAAS,EAAC","file":"lib_index_js.2a23e00af31efc1048e4.js","sourcesContent":["import { ILayoutRestorer } from '@jupyterlab/application';\nimport { ICommandPalette, MainAreaWidget, WidgetTracker } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\nclass APODWidget extends Widget {\n    /**\n     * Construct a new APOD widget.\n     */\n    constructor() {\n        super();\n        this.addClass('my-apodWidget');\n        // Add an image element to the panel\n        this.img = document.createElement('img');\n        this.node.appendChild(this.img);\n        // Add a summary element to the panel\n        this.summary = document.createElement('p');\n        this.node.appendChild(this.summary);\n    }\n    /**\n     * Handle update requests for the widget.\n     */\n    async onUpdateRequest(msg) {\n        const response = await fetch(`https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&date=${this.randomDate()}`);\n        if (!response.ok) {\n            const data = await response.json();\n            if (data.error) {\n                this.summary.innerText = data.error.message;\n            }\n            else {\n                this.summary.innerText = response.statusText;\n            }\n            return;\n        }\n        const data = (await response.json());\n        if (data.media_type === 'image') {\n            // Populate the image\n            this.img.src = data.url;\n            this.img.title = data.title;\n            this.summary.innerText = data.title;\n            if (data.copyright) {\n                this.summary.innerText += ` (Copyright ${data.copyright})`;\n            }\n        }\n        else {\n            this.summary.innerText = 'Random APOD fetched was not an image.';\n        }\n    }\n    /**\n     * Get a random date string in YYYY-MM-DD format.\n     */\n    randomDate() {\n        const start = new Date(2010, 1, 1);\n        const end = new Date();\n        const randomDate = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n        return randomDate.toISOString().slice(0, 10);\n    }\n}\n/**\n * Activate the APOD widget extension.\n */\nfunction activate(app, palette, restorer) {\n    console.log('JupyterLab extension jupyterlab_apod is activated!');\n    // Declare a widget variable\n    let widget;\n    // Add an application command\n    const command = 'apod:open';\n    app.commands.addCommand(command, {\n        label: 'Random Astronomy Picture',\n        execute: () => {\n            if (!widget || widget.isDisposed) {\n                // Create a new widget if one does not exist\n                // or if the previous one was disposed after closing the panel\n                const content = new APODWidget();\n                widget = new MainAreaWidget({ content });\n                widget.id = 'apod-jupyterlab';\n                widget.title.label = 'Astronomy Picture';\n                widget.title.closable = true;\n            }\n            if (!tracker.has(widget)) {\n                // Track the state of the widget for later restoration\n                tracker.add(widget);\n            }\n            if (!widget.isAttached) {\n                // Attach the widget to the main work area if it's not there\n                app.shell.add(widget, 'main');\n            }\n            widget.content.update();\n            // Activate the widget\n            app.shell.activateById(widget.id);\n        }\n    });\n    // Add the command to the palette.\n    palette.addItem({ command, category: 'Tutorial' });\n    // Track and restore the widget state\n    let tracker = new WidgetTracker({\n        namespace: 'apod'\n    });\n    restorer.restore(tracker, {\n        command,\n        name: () => 'apod'\n    });\n}\n/**\n * Initialization data for the jupyterlab_apod extension.\n */\nconst extension = {\n    id: 'jupyterlab_apod',\n    autoStart: true,\n    requires: [ICommandPalette, ILayoutRestorer],\n    activate: activate\n};\nexport default extension;\n"],"sourceRoot":""}