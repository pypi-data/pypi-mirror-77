# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetEnterpriseInstancesResult:
    """
    A collection of values returned by getEnterpriseInstances.
    """
    def __init__(__self__, env_type=None, id=None, instance_alias_regex=None, instance_source=None, instance_type=None, instances=None, net_type=None, output_file=None, search_key=None, status=None, tid=None):
        if env_type and not isinstance(env_type, str):
            raise TypeError("Expected argument 'env_type' to be a str")
        __self__.env_type = env_type
        """
        The type of the environment to which the database instance belongs..
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if instance_alias_regex and not isinstance(instance_alias_regex, str):
            raise TypeError("Expected argument 'instance_alias_regex' to be a str")
        __self__.instance_alias_regex = instance_alias_regex
        if instance_source and not isinstance(instance_source, str):
            raise TypeError("Expected argument 'instance_source' to be a str")
        __self__.instance_source = instance_source
        """
        The ID of the database instance.
        """
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        __self__.instance_type = instance_type
        """
        The ID of the database instance.
        """
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        __self__.instances = instances
        """
        A list of KMS keys. Each element contains the following attributes:
        """
        if net_type and not isinstance(net_type, str):
            raise TypeError("Expected argument 'net_type' to be a str")
        __self__.net_type = net_type
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if search_key and not isinstance(search_key, str):
            raise TypeError("Expected argument 'search_key' to be a str")
        __self__.search_key = search_key
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        The status of the database instance.
        """
        if tid and not isinstance(tid, float):
            raise TypeError("Expected argument 'tid' to be a float")
        __self__.tid = tid
class AwaitableGetEnterpriseInstancesResult(GetEnterpriseInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnterpriseInstancesResult(
            env_type=self.env_type,
            id=self.id,
            instance_alias_regex=self.instance_alias_regex,
            instance_source=self.instance_source,
            instance_type=self.instance_type,
            instances=self.instances,
            net_type=self.net_type,
            output_file=self.output_file,
            search_key=self.search_key,
            status=self.status,
            tid=self.tid)

def get_enterprise_instances(env_type=None,instance_alias_regex=None,instance_source=None,instance_type=None,net_type=None,output_file=None,search_key=None,status=None,tid=None,opts=None):
    """
    This data source provides a list of DMS Enterprise Instances in an Alibaba Cloud account according to the specified filters.

    > **NOTE:** Available in 1.88.0+




    :param str env_type: The type of the environment to which the database instance belongs.
    :param str instance_alias_regex: A regex string to filter the results by the DMS Enterprise Instance instance_alias.
    :param str instance_source: The source of the database instance.
    :param str instance_type: The ID of the database instance.
    :param str net_type: The network type of the database instance. Valid values: CLASSIC and VPC. For more information about the valid values, see the description of the RegisterInstance operation.
    :param str search_key: The keyword used to query database instances.
    :param str status: Filter the results by status of the DMS Enterprise Instances. Valid values: `NORMAL`, `UNAVAILABLE`, `UNKNOWN`, `DELETED`, `DISABLE`.
    :param float tid: The ID of the tenant in Data Management (DMS) Enterprise.
    """
    __args__ = dict()


    __args__['envType'] = env_type
    __args__['instanceAliasRegex'] = instance_alias_regex
    __args__['instanceSource'] = instance_source
    __args__['instanceType'] = instance_type
    __args__['netType'] = net_type
    __args__['outputFile'] = output_file
    __args__['searchKey'] = search_key
    __args__['status'] = status
    __args__['tid'] = tid
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('alicloud:dms/getEnterpriseInstances:getEnterpriseInstances', __args__, opts=opts).value

    return AwaitableGetEnterpriseInstancesResult(
        env_type=__ret__.get('envType'),
        id=__ret__.get('id'),
        instance_alias_regex=__ret__.get('instanceAliasRegex'),
        instance_source=__ret__.get('instanceSource'),
        instance_type=__ret__.get('instanceType'),
        instances=__ret__.get('instances'),
        net_type=__ret__.get('netType'),
        output_file=__ret__.get('outputFile'),
        search_key=__ret__.get('searchKey'),
        status=__ret__.get('status'),
        tid=__ret__.get('tid'))
