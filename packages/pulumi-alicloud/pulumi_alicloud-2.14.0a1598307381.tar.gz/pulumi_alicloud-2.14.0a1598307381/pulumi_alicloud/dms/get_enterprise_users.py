# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetEnterpriseUsersResult:
    """
    A collection of values returned by getEnterpriseUsers.
    """
    def __init__(__self__, id=None, ids=None, output_file=None, role=None, search_key=None, status=None, tid=None, users=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        __self__.ids = ids
        """
        A list of DMS Enterprise User IDs (UID).
        """
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        __self__.role = role
        if search_key and not isinstance(search_key, str):
            raise TypeError("Expected argument 'search_key' to be a str")
        __self__.search_key = search_key
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        The status of the user.
        """
        if tid and not isinstance(tid, float):
            raise TypeError("Expected argument 'tid' to be a float")
        __self__.tid = tid
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        __self__.users = users
        """
        A list of DMS Enterprise Users. Each element contains the following attributes:
        """
class AwaitableGetEnterpriseUsersResult(GetEnterpriseUsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnterpriseUsersResult(
            id=self.id,
            ids=self.ids,
            output_file=self.output_file,
            role=self.role,
            search_key=self.search_key,
            status=self.status,
            tid=self.tid,
            users=self.users)

def get_enterprise_users(ids=None,output_file=None,role=None,search_key=None,status=None,tid=None,opts=None):
    """
    This data source provides a list of DMS Enterprise Users in an Alibaba Cloud account according to the specified filters.

    > **NOTE:** Available in 1.90.0+

    ## Example Usage



    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    dms_enterprise_users_ds = alicloud.dms.get_enterprise_users(ids=["uid"],
        role="USER",
        status="NORMAL")
    pulumi.export("firstUserId", dms_enterprise_users_ds.users[0]["id"])
    ```



    :param list ids: A list of DMS Enterprise User IDs (UID).
    :param str role: The role of the user to query.
    :param str search_key: The keyword used to query users.
    :param str status: The status of the user.
    :param float tid: The ID of the tenant in DMS Enterprise.
    """
    __args__ = dict()


    __args__['ids'] = ids
    __args__['outputFile'] = output_file
    __args__['role'] = role
    __args__['searchKey'] = search_key
    __args__['status'] = status
    __args__['tid'] = tid
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('alicloud:dms/getEnterpriseUsers:getEnterpriseUsers', __args__, opts=opts).value

    return AwaitableGetEnterpriseUsersResult(
        id=__ret__.get('id'),
        ids=__ret__.get('ids'),
        output_file=__ret__.get('outputFile'),
        role=__ret__.get('role'),
        search_key=__ret__.get('searchKey'),
        status=__ret__.get('status'),
        tid=__ret__.get('tid'),
        users=__ret__.get('users'))
