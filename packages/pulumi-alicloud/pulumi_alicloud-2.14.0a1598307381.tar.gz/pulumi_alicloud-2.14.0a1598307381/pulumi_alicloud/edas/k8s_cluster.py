# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class K8sCluster(pulumi.CustomResource):
    cluster_import_status: pulumi.Output[float]
    """
    The import status of cluster: 
    `1`: success.
    `2`: failed.
    `3`: importing.
    `4`: deleted.
    """
    cluster_name: pulumi.Output[str]
    """
    The name of the cluster that you want to create.
    """
    cluster_type: pulumi.Output[float]
    """
    The type of the cluster that you want to create. Valid values only: 5: K8s cluster. 
    """
    cs_cluster_id: pulumi.Output[str]
    """
    The ID of the alicloud container service kubernetes cluster that you want to import.
    """
    namespace_id: pulumi.Output[str]
    """
    The ID of the namespace where you want to import. You can call the [ListUserDefineRegion](https://www.alibabacloud.com/help/en/doc-detail/149377.htm?spm=a2c63.p38356.879954.34.331054faK2yNvC#doc-api-Edas-ListUserDefineRegion) operation to query the namespace ID.
    """
    network_mode: pulumi.Output[float]
    """
    The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
    """
    vpc_id: pulumi.Output[str]
    """
    The ID of the Virtual Private Cloud (VPC) for the cluster.
    """
    def __init__(__self__, resource_name, opts=None, cs_cluster_id=None, namespace_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides an EDAS K8s cluster resource. For information about EDAS K8s Cluster and how to use it, see[What is EDAS K8s Cluster](https://www.alibabacloud.com/help/en/doc-detail/85108.htm).

        > **NOTE:** Available in 1.93.0+



        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cs_cluster_id: The ID of the alicloud container service kubernetes cluster that you want to import.
        :param pulumi.Input[str] namespace_id: The ID of the namespace where you want to import. You can call the [ListUserDefineRegion](https://www.alibabacloud.com/help/en/doc-detail/149377.htm?spm=a2c63.p38356.879954.34.331054faK2yNvC#doc-api-Edas-ListUserDefineRegion) operation to query the namespace ID.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if cs_cluster_id is None:
                raise TypeError("Missing required property 'cs_cluster_id'")
            __props__['cs_cluster_id'] = cs_cluster_id
            __props__['namespace_id'] = namespace_id
            __props__['cluster_import_status'] = None
            __props__['cluster_name'] = None
            __props__['cluster_type'] = None
            __props__['network_mode'] = None
            __props__['vpc_id'] = None
        super(K8sCluster, __self__).__init__(
            'alicloud:edas/k8sCluster:K8sCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, cluster_import_status=None, cluster_name=None, cluster_type=None, cs_cluster_id=None, namespace_id=None, network_mode=None, vpc_id=None):
        """
        Get an existing K8sCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] cluster_import_status: The import status of cluster: 
               `1`: success.
               `2`: failed.
               `3`: importing.
               `4`: deleted.
        :param pulumi.Input[str] cluster_name: The name of the cluster that you want to create.
        :param pulumi.Input[float] cluster_type: The type of the cluster that you want to create. Valid values only: 5: K8s cluster. 
        :param pulumi.Input[str] cs_cluster_id: The ID of the alicloud container service kubernetes cluster that you want to import.
        :param pulumi.Input[str] namespace_id: The ID of the namespace where you want to import. You can call the [ListUserDefineRegion](https://www.alibabacloud.com/help/en/doc-detail/149377.htm?spm=a2c63.p38356.879954.34.331054faK2yNvC#doc-api-Edas-ListUserDefineRegion) operation to query the namespace ID.
        :param pulumi.Input[float] network_mode: The network type of the cluster that you want to create. Valid values: 1: classic network. 2: VPC.
        :param pulumi.Input[str] vpc_id: The ID of the Virtual Private Cloud (VPC) for the cluster.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["cluster_import_status"] = cluster_import_status
        __props__["cluster_name"] = cluster_name
        __props__["cluster_type"] = cluster_type
        __props__["cs_cluster_id"] = cs_cluster_id
        __props__["namespace_id"] = namespace_id
        __props__["network_mode"] = network_mode
        __props__["vpc_id"] = vpc_id
        return K8sCluster(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

