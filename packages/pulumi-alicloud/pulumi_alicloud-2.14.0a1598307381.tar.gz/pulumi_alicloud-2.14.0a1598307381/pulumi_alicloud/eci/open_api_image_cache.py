# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class OpenApiImageCache(pulumi.CustomResource):
    container_group_id: pulumi.Output[str]
    eip_instance_id: pulumi.Output[str]
    image_cache_name: pulumi.Output[str]
    image_cache_size: pulumi.Output[float]
    image_registry_credentials: pulumi.Output[list]
    images: pulumi.Output[list]
    resource_group_id: pulumi.Output[str]
    retention_days: pulumi.Output[float]
    security_group_id: pulumi.Output[str]
    status: pulumi.Output[str]
    vswitch_id: pulumi.Output[str]
    zone_id: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, eip_instance_id=None, image_cache_name=None, image_cache_size=None, image_registry_credentials=None, images=None, resource_group_id=None, retention_days=None, security_group_id=None, vswitch_id=None, zone_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a OpenApiImageCache resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **image_registry_credentials** object supports the following:

          * `password` (`pulumi.Input[str]`)
          * `server` (`pulumi.Input[str]`)
          * `user_name` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['eip_instance_id'] = eip_instance_id
            if image_cache_name is None:
                raise TypeError("Missing required property 'image_cache_name'")
            __props__['image_cache_name'] = image_cache_name
            __props__['image_cache_size'] = image_cache_size
            __props__['image_registry_credentials'] = image_registry_credentials
            if images is None:
                raise TypeError("Missing required property 'images'")
            __props__['images'] = images
            __props__['resource_group_id'] = resource_group_id
            __props__['retention_days'] = retention_days
            if security_group_id is None:
                raise TypeError("Missing required property 'security_group_id'")
            __props__['security_group_id'] = security_group_id
            if vswitch_id is None:
                raise TypeError("Missing required property 'vswitch_id'")
            __props__['vswitch_id'] = vswitch_id
            __props__['zone_id'] = zone_id
            __props__['container_group_id'] = None
            __props__['status'] = None
        super(OpenApiImageCache, __self__).__init__(
            'alicloud:eci/openApiImageCache:OpenApiImageCache',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, container_group_id=None, eip_instance_id=None, image_cache_name=None, image_cache_size=None, image_registry_credentials=None, images=None, resource_group_id=None, retention_days=None, security_group_id=None, status=None, vswitch_id=None, zone_id=None):
        """
        Get an existing OpenApiImageCache resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **image_registry_credentials** object supports the following:

          * `password` (`pulumi.Input[str]`)
          * `server` (`pulumi.Input[str]`)
          * `user_name` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["container_group_id"] = container_group_id
        __props__["eip_instance_id"] = eip_instance_id
        __props__["image_cache_name"] = image_cache_name
        __props__["image_cache_size"] = image_cache_size
        __props__["image_registry_credentials"] = image_registry_credentials
        __props__["images"] = images
        __props__["resource_group_id"] = resource_group_id
        __props__["retention_days"] = retention_days
        __props__["security_group_id"] = security_group_id
        __props__["status"] = status
        __props__["vswitch_id"] = vswitch_id
        __props__["zone_id"] = zone_id
        return OpenApiImageCache(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

