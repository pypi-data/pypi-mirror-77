# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetImageCachesResult:
    """
    A collection of values returned by getImageCaches.
    """
    def __init__(__self__, caches=None, id=None, ids=None, image=None, image_cache_name=None, name_regex=None, names=None, output_file=None, snapshot_id=None, status=None):
        if caches and not isinstance(caches, list):
            raise TypeError("Expected argument 'caches' to be a list")
        __self__.caches = caches
        """
        A list of caches. Each element contains the following attributes:
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        __self__.ids = ids
        """
        A list ids of ECI Image Cache.
        """
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        __self__.image = image
        if image_cache_name and not isinstance(image_cache_name, str):
            raise TypeError("Expected argument 'image_cache_name' to be a str")
        __self__.image_cache_name = image_cache_name
        """
        The name of the ECI Image Cache.
        """
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        __self__.name_regex = name_regex
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        __self__.names = names
        """
        A list of ECI Image Cache names.
        """
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if snapshot_id and not isinstance(snapshot_id, str):
            raise TypeError("Expected argument 'snapshot_id' to be a str")
        __self__.snapshot_id = snapshot_id
        """
        The id of snapshot.
        """
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        The status of ECI Image Cache.
        """
class AwaitableGetImageCachesResult(GetImageCachesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageCachesResult(
            caches=self.caches,
            id=self.id,
            ids=self.ids,
            image=self.image,
            image_cache_name=self.image_cache_name,
            name_regex=self.name_regex,
            names=self.names,
            output_file=self.output_file,
            snapshot_id=self.snapshot_id,
            status=self.status)

def get_image_caches(ids=None,image=None,image_cache_name=None,name_regex=None,output_file=None,snapshot_id=None,status=None,opts=None):
    """
    Provides a collection of ECI Image Cache to the specified filters.

    > **NOTE:** Available in 1.90.0+.




    :param list ids: A list ids of ECI Image Cache.
    :param str image: Find the mirror cache containing it according to the image name.
    :param str image_cache_name: The name of ECI Image Cache.
    :param str name_regex: A regex string to filter results by the image cache name.
    :param str snapshot_id: The id of snapshot.
    :param str status: The status of ECI Image Cache.
    """
    __args__ = dict()


    __args__['ids'] = ids
    __args__['image'] = image
    __args__['imageCacheName'] = image_cache_name
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['snapshotId'] = snapshot_id
    __args__['status'] = status
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('alicloud:eci/getImageCaches:getImageCaches', __args__, opts=opts).value

    return AwaitableGetImageCachesResult(
        caches=__ret__.get('caches'),
        id=__ret__.get('id'),
        ids=__ret__.get('ids'),
        image=__ret__.get('image'),
        image_cache_name=__ret__.get('imageCacheName'),
        name_regex=__ret__.get('nameRegex'),
        names=__ret__.get('names'),
        output_file=__ret__.get('outputFile'),
        snapshot_id=__ret__.get('snapshotId'),
        status=__ret__.get('status'))
