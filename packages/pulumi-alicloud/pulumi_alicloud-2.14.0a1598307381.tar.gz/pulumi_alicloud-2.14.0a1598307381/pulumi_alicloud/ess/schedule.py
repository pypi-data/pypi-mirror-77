# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class Schedule(pulumi.CustomResource):
    description: pulumi.Output[str]
    desired_capacity: pulumi.Output[float]
    launch_expiration_time: pulumi.Output[float]
    launch_time: pulumi.Output[str]
    max_value: pulumi.Output[float]
    min_value: pulumi.Output[float]
    recurrence_end_time: pulumi.Output[str]
    recurrence_type: pulumi.Output[str]
    recurrence_value: pulumi.Output[str]
    scaling_group_id: pulumi.Output[str]
    scheduled_action: pulumi.Output[str]
    scheduled_task_name: pulumi.Output[str]
    task_enabled: pulumi.Output[bool]
    def __init__(__self__, resource_name, opts=None, description=None, desired_capacity=None, launch_expiration_time=None, launch_time=None, max_value=None, min_value=None, recurrence_end_time=None, recurrence_type=None, recurrence_value=None, scaling_group_id=None, scheduled_action=None, scheduled_task_name=None, task_enabled=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Schedule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['desired_capacity'] = desired_capacity
            __props__['launch_expiration_time'] = launch_expiration_time
            __props__['launch_time'] = launch_time
            __props__['max_value'] = max_value
            __props__['min_value'] = min_value
            __props__['recurrence_end_time'] = recurrence_end_time
            __props__['recurrence_type'] = recurrence_type
            __props__['recurrence_value'] = recurrence_value
            __props__['scaling_group_id'] = scaling_group_id
            __props__['scheduled_action'] = scheduled_action
            __props__['scheduled_task_name'] = scheduled_task_name
            __props__['task_enabled'] = task_enabled
        super(Schedule, __self__).__init__(
            'alicloud:ess/schedule:Schedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, description=None, desired_capacity=None, launch_expiration_time=None, launch_time=None, max_value=None, min_value=None, recurrence_end_time=None, recurrence_type=None, recurrence_value=None, scaling_group_id=None, scheduled_action=None, scheduled_task_name=None, task_enabled=None):
        """
        Get an existing Schedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["desired_capacity"] = desired_capacity
        __props__["launch_expiration_time"] = launch_expiration_time
        __props__["launch_time"] = launch_time
        __props__["max_value"] = max_value
        __props__["min_value"] = min_value
        __props__["recurrence_end_time"] = recurrence_end_time
        __props__["recurrence_type"] = recurrence_type
        __props__["recurrence_value"] = recurrence_value
        __props__["scaling_group_id"] = scaling_group_id
        __props__["scheduled_action"] = scheduled_action
        __props__["scheduled_task_name"] = scheduled_task_name
        __props__["task_enabled"] = task_enabled
        return Schedule(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

