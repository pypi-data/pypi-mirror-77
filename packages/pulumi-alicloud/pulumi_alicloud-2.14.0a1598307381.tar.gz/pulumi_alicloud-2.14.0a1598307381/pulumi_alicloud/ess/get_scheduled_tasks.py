# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetScheduledTasksResult:
    """
    A collection of values returned by getScheduledTasks.
    """
    def __init__(__self__, id=None, ids=None, name_regex=None, names=None, output_file=None, scheduled_action=None, scheduled_task_id=None, tasks=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        __self__.ids = ids
        """
        A list of scheduled task ids.
        """
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        __self__.name_regex = name_regex
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        __self__.names = names
        """
        A list of scheduled task names.
        """
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if scheduled_action and not isinstance(scheduled_action, str):
            raise TypeError("Expected argument 'scheduled_action' to be a str")
        __self__.scheduled_action = scheduled_action
        """
        The operation to be performed when a scheduled task is triggered.
        """
        if scheduled_task_id and not isinstance(scheduled_task_id, str):
            raise TypeError("Expected argument 'scheduled_task_id' to be a str")
        __self__.scheduled_task_id = scheduled_task_id
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        __self__.tasks = tasks
        """
        A list of scheduled tasks. Each element contains the following attributes:
        """
class AwaitableGetScheduledTasksResult(GetScheduledTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScheduledTasksResult(
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            names=self.names,
            output_file=self.output_file,
            scheduled_action=self.scheduled_action,
            scheduled_task_id=self.scheduled_task_id,
            tasks=self.tasks)

def get_scheduled_tasks(ids=None,name_regex=None,output_file=None,scheduled_action=None,scheduled_task_id=None,opts=None):
    """
    This data source provides available scheduled task resources. 

    > **NOTE:** Available in 1.72.0+

    ## Example Usage



    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    ds = alicloud.ess.get_scheduled_tasks(name_regex="scheduled_task_name",
        scheduled_task_id="scheduled_task_id")
    pulumi.export("firstScheduledTask", ds.tasks[0]["id"])
    ```



    :param list ids: A list of scheduled task IDs.
    :param str name_regex: A regex string to filter resulting scheduled tasks by name.
    :param str scheduled_action: The operation to be performed when a scheduled task is triggered.
    :param str scheduled_task_id: The id of the scheduled task.
    """
    __args__ = dict()


    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['scheduledAction'] = scheduled_action
    __args__['scheduledTaskId'] = scheduled_task_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('alicloud:ess/getScheduledTasks:getScheduledTasks', __args__, opts=opts).value

    return AwaitableGetScheduledTasksResult(
        id=__ret__.get('id'),
        ids=__ret__.get('ids'),
        name_regex=__ret__.get('nameRegex'),
        names=__ret__.get('names'),
        output_file=__ret__.get('outputFile'),
        scheduled_action=__ret__.get('scheduledAction'),
        scheduled_task_id=__ret__.get('scheduledTaskId'),
        tasks=__ret__.get('tasks'))
