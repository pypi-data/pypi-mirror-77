# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetTemplatesResult:
    """
    A collection of values returned by getTemplates.
    """
    def __init__(__self__, category=None, created_by=None, created_date=None, created_date_after=None, has_trigger=None, id=None, ids=None, name_regex=None, output_file=None, share_type=None, sort_field=None, sort_order=None, tags=None, template_format=None, template_type=None, templates=None):
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        __self__.category = category
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        __self__.created_by = created_by
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        __self__.created_date = created_date
        if created_date_after and not isinstance(created_date_after, str):
            raise TypeError("Expected argument 'created_date_after' to be a str")
        __self__.created_date_after = created_date_after
        if has_trigger and not isinstance(has_trigger, bool):
            raise TypeError("Expected argument 'has_trigger' to be a bool")
        __self__.has_trigger = has_trigger
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        __self__.ids = ids
        """
        A list of OOS Template ids. Each element in the list is same as template_name.
        """
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        __self__.name_regex = name_regex
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if share_type and not isinstance(share_type, str):
            raise TypeError("Expected argument 'share_type' to be a str")
        __self__.share_type = share_type
        if sort_field and not isinstance(sort_field, str):
            raise TypeError("Expected argument 'sort_field' to be a str")
        __self__.sort_field = sort_field
        if sort_order and not isinstance(sort_order, str):
            raise TypeError("Expected argument 'sort_order' to be a str")
        __self__.sort_order = sort_order
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        if template_format and not isinstance(template_format, str):
            raise TypeError("Expected argument 'template_format' to be a str")
        __self__.template_format = template_format
        if template_type and not isinstance(template_type, str):
            raise TypeError("Expected argument 'template_type' to be a str")
        __self__.template_type = template_type
        if templates and not isinstance(templates, list):
            raise TypeError("Expected argument 'templates' to be a list")
        __self__.templates = templates
        """
        A list of OOS Templates. Each element contains the following attributes:
        """
class AwaitableGetTemplatesResult(GetTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTemplatesResult(
            category=self.category,
            created_by=self.created_by,
            created_date=self.created_date,
            created_date_after=self.created_date_after,
            has_trigger=self.has_trigger,
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            output_file=self.output_file,
            share_type=self.share_type,
            sort_field=self.sort_field,
            sort_order=self.sort_order,
            tags=self.tags,
            template_format=self.template_format,
            template_type=self.template_type,
            templates=self.templates)

def get_templates(category=None,created_by=None,created_date=None,created_date_after=None,has_trigger=None,ids=None,name_regex=None,output_file=None,share_type=None,sort_field=None,sort_order=None,tags=None,template_format=None,template_type=None,opts=None):
    """
    This data source provides a list of OOS Templates in an Alibaba Cloud account according to the specified filters.
     
    > **NOTE:** Available in v1.92.0+.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    example = alicloud.oos.get_templates(has_trigger=False,
        name_regex="test",
        share_type="Private",
        tags={
            "Created": "TF",
            "For": "template Test",
        })
    pulumi.export("firstTemplateName", example.templates[0]["template_name"])
    ```



    :param str category: The category of template.
    :param str created_by: The creator of the template.
    :param str created_date: The template whose creation time is less than or equal to the specified time. The format is: YYYY-MM-DDThh:mm::ssZ.
    :param str created_date_after: Create a template whose time is greater than or equal to the specified time. The format is: YYYY-MM-DDThh:mm:ssZ.
    :param bool has_trigger: Is it triggered successfully.
    :param list ids: A list of OOS Template ids. Each element in the list is same as template_name.
    :param str name_regex: A regex string to filter the results by the template_name.
    :param str share_type: The sharing type of the template. Valid values: `Private`, `Public`.
    :param str sort_field: Sort field. Valid values: `TotalExecutionCount`, `Popularity`, `TemplateName` and `CreatedDate`. Default to `TotalExecutionCount`.
    :param str sort_order: Sort order. Valid values: `Ascending`, `Descending`. Default to `Descending`
    :param dict tags: A mapping of tags to assign to the resource.
    :param str template_format: The format of the template. Valid values: `JSON`, `YAML`.
    :param str template_type: The type of OOS Template.
    """
    __args__ = dict()


    __args__['category'] = category
    __args__['createdBy'] = created_by
    __args__['createdDate'] = created_date
    __args__['createdDateAfter'] = created_date_after
    __args__['hasTrigger'] = has_trigger
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['shareType'] = share_type
    __args__['sortField'] = sort_field
    __args__['sortOrder'] = sort_order
    __args__['tags'] = tags
    __args__['templateFormat'] = template_format
    __args__['templateType'] = template_type
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('alicloud:oos/getTemplates:getTemplates', __args__, opts=opts).value

    return AwaitableGetTemplatesResult(
        category=__ret__.get('category'),
        created_by=__ret__.get('createdBy'),
        created_date=__ret__.get('createdDate'),
        created_date_after=__ret__.get('createdDateAfter'),
        has_trigger=__ret__.get('hasTrigger'),
        id=__ret__.get('id'),
        ids=__ret__.get('ids'),
        name_regex=__ret__.get('nameRegex'),
        output_file=__ret__.get('outputFile'),
        share_type=__ret__.get('shareType'),
        sort_field=__ret__.get('sortField'),
        sort_order=__ret__.get('sortOrder'),
        tags=__ret__.get('tags'),
        template_format=__ret__.get('templateFormat'),
        template_type=__ret__.get('templateType'),
        templates=__ret__.get('templates'))
