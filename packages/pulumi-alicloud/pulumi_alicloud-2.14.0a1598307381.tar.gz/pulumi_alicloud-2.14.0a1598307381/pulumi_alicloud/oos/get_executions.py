# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetExecutionsResult:
    """
    A collection of values returned by getExecutions.
    """
    def __init__(__self__, category=None, end_date=None, end_date_after=None, executed_by=None, executions=None, id=None, ids=None, include_child_execution=None, mode=None, output_file=None, parent_execution_id=None, ram_role=None, sort_field=None, sort_order=None, start_date_after=None, start_date_before=None, status=None, tags=None, template_name=None):
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        __self__.category = category
        if end_date and not isinstance(end_date, str):
            raise TypeError("Expected argument 'end_date' to be a str")
        __self__.end_date = end_date
        if end_date_after and not isinstance(end_date_after, str):
            raise TypeError("Expected argument 'end_date_after' to be a str")
        __self__.end_date_after = end_date_after
        if executed_by and not isinstance(executed_by, str):
            raise TypeError("Expected argument 'executed_by' to be a str")
        __self__.executed_by = executed_by
        if executions and not isinstance(executions, list):
            raise TypeError("Expected argument 'executions' to be a list")
        __self__.executions = executions
        """
        A list of OOS Executions. Each element contains the following attributes:
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        __self__.ids = ids
        """
        A list of OOS Execution ids.
        """
        if include_child_execution and not isinstance(include_child_execution, bool):
            raise TypeError("Expected argument 'include_child_execution' to be a bool")
        __self__.include_child_execution = include_child_execution
        if mode and not isinstance(mode, str):
            raise TypeError("Expected argument 'mode' to be a str")
        __self__.mode = mode
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if parent_execution_id and not isinstance(parent_execution_id, str):
            raise TypeError("Expected argument 'parent_execution_id' to be a str")
        __self__.parent_execution_id = parent_execution_id
        if ram_role and not isinstance(ram_role, str):
            raise TypeError("Expected argument 'ram_role' to be a str")
        __self__.ram_role = ram_role
        if sort_field and not isinstance(sort_field, str):
            raise TypeError("Expected argument 'sort_field' to be a str")
        __self__.sort_field = sort_field
        if sort_order and not isinstance(sort_order, str):
            raise TypeError("Expected argument 'sort_order' to be a str")
        __self__.sort_order = sort_order
        if start_date_after and not isinstance(start_date_after, str):
            raise TypeError("Expected argument 'start_date_after' to be a str")
        __self__.start_date_after = start_date_after
        if start_date_before and not isinstance(start_date_before, str):
            raise TypeError("Expected argument 'start_date_before' to be a str")
        __self__.start_date_before = start_date_before
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        if template_name and not isinstance(template_name, str):
            raise TypeError("Expected argument 'template_name' to be a str")
        __self__.template_name = template_name
class AwaitableGetExecutionsResult(GetExecutionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExecutionsResult(
            category=self.category,
            end_date=self.end_date,
            end_date_after=self.end_date_after,
            executed_by=self.executed_by,
            executions=self.executions,
            id=self.id,
            ids=self.ids,
            include_child_execution=self.include_child_execution,
            mode=self.mode,
            output_file=self.output_file,
            parent_execution_id=self.parent_execution_id,
            ram_role=self.ram_role,
            sort_field=self.sort_field,
            sort_order=self.sort_order,
            start_date_after=self.start_date_after,
            start_date_before=self.start_date_before,
            status=self.status,
            tags=self.tags,
            template_name=self.template_name)

def get_executions(category=None,end_date=None,end_date_after=None,executed_by=None,ids=None,include_child_execution=None,mode=None,output_file=None,parent_execution_id=None,ram_role=None,sort_field=None,sort_order=None,start_date_after=None,start_date_before=None,status=None,tags=None,template_name=None,opts=None):
    """
    This data source provides a list of OOS Executions in an Alibaba Cloud account according to the specified filters.
     
    > **NOTE:** Available in v1.93.0+.




    :param str category: The category of template. Valid: `AlarmTrigger`, `EventTrigger`, `Other` and `TimerTrigger`.
    :param str end_date: The time when the execution was ended.
    :param str end_date_after: Execution whose end time is less than or equal to the specified time.
    :param str executed_by: The user who execute the template.
    :param list ids: A list of OOS Execution ids.
    :param bool include_child_execution: Whether to include sub-execution.
    :param str mode: The mode of OOS Execution. Valid: `Automatic`, `Debug`.
    :param str parent_execution_id: The id of parent OOS Execution.
    :param str ram_role: The role that executes the current template.
    :param str sort_field: The sort field.
    :param str sort_order: The sort order.
    :param str start_date_after: The execution whose start time is greater than or equal to the specified time.
    :param str start_date_before: The execution with start time less than or equal to the specified time.
    :param str status: The Status of OOS Execution. Valid: `Cancelled`, `Failed`, `Queued`, `Running`, `Started`, `Success`, `Waiting`.
    :param dict tags: A mapping of tags to assign to the resource.
    :param str template_name: The name of execution template.
    """
    __args__ = dict()


    __args__['category'] = category
    __args__['endDate'] = end_date
    __args__['endDateAfter'] = end_date_after
    __args__['executedBy'] = executed_by
    __args__['ids'] = ids
    __args__['includeChildExecution'] = include_child_execution
    __args__['mode'] = mode
    __args__['outputFile'] = output_file
    __args__['parentExecutionId'] = parent_execution_id
    __args__['ramRole'] = ram_role
    __args__['sortField'] = sort_field
    __args__['sortOrder'] = sort_order
    __args__['startDateAfter'] = start_date_after
    __args__['startDateBefore'] = start_date_before
    __args__['status'] = status
    __args__['tags'] = tags
    __args__['templateName'] = template_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('alicloud:oos/getExecutions:getExecutions', __args__, opts=opts).value

    return AwaitableGetExecutionsResult(
        category=__ret__.get('category'),
        end_date=__ret__.get('endDate'),
        end_date_after=__ret__.get('endDateAfter'),
        executed_by=__ret__.get('executedBy'),
        executions=__ret__.get('executions'),
        id=__ret__.get('id'),
        ids=__ret__.get('ids'),
        include_child_execution=__ret__.get('includeChildExecution'),
        mode=__ret__.get('mode'),
        output_file=__ret__.get('outputFile'),
        parent_execution_id=__ret__.get('parentExecutionId'),
        ram_role=__ret__.get('ramRole'),
        sort_field=__ret__.get('sortField'),
        sort_order=__ret__.get('sortOrder'),
        start_date_after=__ret__.get('startDateAfter'),
        start_date_before=__ret__.get('startDateBefore'),
        status=__ret__.get('status'),
        tags=__ret__.get('tags'),
        template_name=__ret__.get('templateName'))
