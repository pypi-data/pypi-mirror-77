# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class RouteEntry(pulumi.CustomResource):
    destination_cidrblock: pulumi.Output[str]
    """
    The RouteEntry's target network segment.
    """
    name: pulumi.Output[str]
    """
    The name of the route entry. This name can have a string of 2 to 128 characters, must contain only alphanumeric characters or hyphens, such as "-",".","_", and must not begin or end with a hyphen, and must not begin with http:// or https://.
    """
    nexthop_id: pulumi.Output[str]
    """
    The route entry's next hop. ECS instance ID or VPC router interface ID.
    """
    nexthop_type: pulumi.Output[str]
    """
    The next hop type. Available values:
    - `Instance` (Default): Route the traffic destined for the destination CIDR block to an ECS instance in the VPC.
    - `RouterInterface`: Route the traffic destined for the destination CIDR block to a router interface.
    - `VpnGateway`: Route the traffic destined for the destination CIDR block to a VPN Gateway.
    - `HaVip`: Route the traffic destined for the destination CIDR block to an HAVIP.
    - `NetworkInterface`: Route the traffic destined for the destination CIDR block to an NetworkInterface.
    - `NatGateway`: Route the traffic destined for the destination CIDR block to an Nat Gateway.
    """
    route_table_id: pulumi.Output[str]
    """
    The ID of the route table.
    """
    router_id: pulumi.Output[str]
    """
    This argument has beeb deprecated. Please use other arguments to launch a custom route entry.
    """
    def __init__(__self__, resource_name, opts=None, destination_cidrblock=None, name=None, nexthop_id=None, nexthop_type=None, route_table_id=None, router_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a RouteEntry resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_cidrblock: The RouteEntry's target network segment.
        :param pulumi.Input[str] name: The name of the route entry. This name can have a string of 2 to 128 characters, must contain only alphanumeric characters or hyphens, such as "-",".","_", and must not begin or end with a hyphen, and must not begin with http:// or https://.
        :param pulumi.Input[str] nexthop_id: The route entry's next hop. ECS instance ID or VPC router interface ID.
        :param pulumi.Input[str] nexthop_type: The next hop type. Available values:
               - `Instance` (Default): Route the traffic destined for the destination CIDR block to an ECS instance in the VPC.
               - `RouterInterface`: Route the traffic destined for the destination CIDR block to a router interface.
               - `VpnGateway`: Route the traffic destined for the destination CIDR block to a VPN Gateway.
               - `HaVip`: Route the traffic destined for the destination CIDR block to an HAVIP.
               - `NetworkInterface`: Route the traffic destined for the destination CIDR block to an NetworkInterface.
               - `NatGateway`: Route the traffic destined for the destination CIDR block to an Nat Gateway.
        :param pulumi.Input[str] route_table_id: The ID of the route table.
        :param pulumi.Input[str] router_id: This argument has beeb deprecated. Please use other arguments to launch a custom route entry.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['destination_cidrblock'] = destination_cidrblock
            __props__['name'] = name
            __props__['nexthop_id'] = nexthop_id
            __props__['nexthop_type'] = nexthop_type
            if route_table_id is None:
                raise TypeError("Missing required property 'route_table_id'")
            __props__['route_table_id'] = route_table_id
            if router_id is not None:
                warnings.warn("Attribute router_id has been deprecated and suggest removing it from your template.", DeprecationWarning)
                pulumi.log.warn("router_id is deprecated: Attribute router_id has been deprecated and suggest removing it from your template.")
            __props__['router_id'] = router_id
        super(RouteEntry, __self__).__init__(
            'alicloud:vpc/routeEntry:RouteEntry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, destination_cidrblock=None, name=None, nexthop_id=None, nexthop_type=None, route_table_id=None, router_id=None):
        """
        Get an existing RouteEntry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_cidrblock: The RouteEntry's target network segment.
        :param pulumi.Input[str] name: The name of the route entry. This name can have a string of 2 to 128 characters, must contain only alphanumeric characters or hyphens, such as "-",".","_", and must not begin or end with a hyphen, and must not begin with http:// or https://.
        :param pulumi.Input[str] nexthop_id: The route entry's next hop. ECS instance ID or VPC router interface ID.
        :param pulumi.Input[str] nexthop_type: The next hop type. Available values:
               - `Instance` (Default): Route the traffic destined for the destination CIDR block to an ECS instance in the VPC.
               - `RouterInterface`: Route the traffic destined for the destination CIDR block to a router interface.
               - `VpnGateway`: Route the traffic destined for the destination CIDR block to a VPN Gateway.
               - `HaVip`: Route the traffic destined for the destination CIDR block to an HAVIP.
               - `NetworkInterface`: Route the traffic destined for the destination CIDR block to an NetworkInterface.
               - `NatGateway`: Route the traffic destined for the destination CIDR block to an Nat Gateway.
        :param pulumi.Input[str] route_table_id: The ID of the route table.
        :param pulumi.Input[str] router_id: This argument has beeb deprecated. Please use other arguments to launch a custom route entry.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["destination_cidrblock"] = destination_cidrblock
        __props__["name"] = name
        __props__["nexthop_id"] = nexthop_id
        __props__["nexthop_type"] = nexthop_type
        __props__["route_table_id"] = route_table_id
        __props__["router_id"] = router_id
        return RouteEntry(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

