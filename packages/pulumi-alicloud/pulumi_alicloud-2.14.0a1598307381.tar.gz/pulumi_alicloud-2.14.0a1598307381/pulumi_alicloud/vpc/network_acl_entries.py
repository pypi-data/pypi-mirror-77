# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class NetworkAclEntries(pulumi.CustomResource):
    egresses: pulumi.Output[list]
    """
    List of the egress entries of the network acl. The order of the egress entries determines the priority. The details see Block Egress.

      * `description` (`str`) - The description of the egress entry.
      * `destinationCidrIp` (`str`) - The destination ip of the egress entry.
      * `entryType` (`str`) - The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
      * `name` (`str`) - The name of the egress entry.
      * `policy` (`str`) - The policy of the egress entry. It must be `accept` or `drop`.
      * `port` (`str`) - The port of the egress entry.
      * `protocol` (`str`) - The protocol of the egress entry.
    """
    ingresses: pulumi.Output[list]
    """
    List of the ingress entries of the network acl. The order of the ingress entries determines the priority. The details see Block Ingress.

      * `description` (`str`) - The description of the egress entry.
      * `entryType` (`str`) - The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
      * `name` (`str`) - The name of the egress entry.
      * `policy` (`str`) - The policy of the egress entry. It must be `accept` or `drop`.
      * `port` (`str`) - The port of the egress entry.
      * `protocol` (`str`) - The protocol of the egress entry.
      * `source_cidr_ip` (`str`) - The source ip of the ingress entry.
    """
    network_acl_id: pulumi.Output[str]
    """
    The id of the network acl, the field can't be changed.
    """
    def __init__(__self__, resource_name, opts=None, egresses=None, ingresses=None, network_acl_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a network acl entries resource to create ingress and egress entries.

        > **NOTE:** Available in 1.45.0+. Currently, the resource are only available in Hongkong(cn-hongkong), India(ap-south-1), and Indonesia(ap-southeast-1) regions.

        > **NOTE:** It doesn't support concurrency and the order of the ingress and egress entries determines the priority.

        > **NOTE:** Using this resource need to open a whitelist.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_alicloud as alicloud

        config = pulumi.Config()
        name = config.get("name")
        if name is None:
            name = "NetworkAclEntries"
        default_zones = alicloud.get_zones(available_resource_creation="VSwitch")
        default_network = alicloud.vpc.Network("defaultNetwork", cidr_block="172.16.0.0/12")
        default_network_acl = alicloud.vpc.NetworkAcl("defaultNetworkAcl", vpc_id=default_network.id)
        default_switch = alicloud.vpc.Switch("defaultSwitch",
            availability_zone=default_zones.zones[0]["id"],
            cidr_block="172.16.0.0/21",
            vpc_id=default_network.id)
        default_network_acl_attachment = alicloud.vpc.NetworkAclAttachment("defaultNetworkAclAttachment",
            network_acl_id=default_network_acl.id,
            resources=[{
                "resourceId": default_switch.id,
                "resourceType": "VSwitch",
            }])
        default_network_acl_entries = alicloud.vpc.NetworkAclEntries("defaultNetworkAclEntries",
            egresses=[{
                "description": name,
                "destinationCidrIp": "0.0.0.0/32",
                "entryType": "custom",
                "name": name,
                "policy": "accept",
                "port": "-1/-1",
                "protocol": "all",
            }],
            ingresses=[{
                "description": name,
                "entryType": "custom",
                "name": name,
                "policy": "accept",
                "port": "-1/-1",
                "protocol": "all",
                "source_cidr_ip": "0.0.0.0/32",
            }],
            network_acl_id=default_network_acl.id)
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] egresses: List of the egress entries of the network acl. The order of the egress entries determines the priority. The details see Block Egress.
        :param pulumi.Input[list] ingresses: List of the ingress entries of the network acl. The order of the ingress entries determines the priority. The details see Block Ingress.
        :param pulumi.Input[str] network_acl_id: The id of the network acl, the field can't be changed.

        The **egresses** object supports the following:

          * `description` (`pulumi.Input[str]`) - The description of the egress entry.
          * `destinationCidrIp` (`pulumi.Input[str]`) - The destination ip of the egress entry.
          * `entryType` (`pulumi.Input[str]`) - The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
          * `name` (`pulumi.Input[str]`) - The name of the egress entry.
          * `policy` (`pulumi.Input[str]`) - The policy of the egress entry. It must be `accept` or `drop`.
          * `port` (`pulumi.Input[str]`) - The port of the egress entry.
          * `protocol` (`pulumi.Input[str]`) - The protocol of the egress entry.

        The **ingresses** object supports the following:

          * `description` (`pulumi.Input[str]`) - The description of the egress entry.
          * `entryType` (`pulumi.Input[str]`) - The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
          * `name` (`pulumi.Input[str]`) - The name of the egress entry.
          * `policy` (`pulumi.Input[str]`) - The policy of the egress entry. It must be `accept` or `drop`.
          * `port` (`pulumi.Input[str]`) - The port of the egress entry.
          * `protocol` (`pulumi.Input[str]`) - The protocol of the egress entry.
          * `source_cidr_ip` (`pulumi.Input[str]`) - The source ip of the ingress entry.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['egresses'] = egresses
            __props__['ingresses'] = ingresses
            if network_acl_id is None:
                raise TypeError("Missing required property 'network_acl_id'")
            __props__['network_acl_id'] = network_acl_id
        super(NetworkAclEntries, __self__).__init__(
            'alicloud:vpc/networkAclEntries:NetworkAclEntries',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, egresses=None, ingresses=None, network_acl_id=None):
        """
        Get an existing NetworkAclEntries resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] egresses: List of the egress entries of the network acl. The order of the egress entries determines the priority. The details see Block Egress.
        :param pulumi.Input[list] ingresses: List of the ingress entries of the network acl. The order of the ingress entries determines the priority. The details see Block Ingress.
        :param pulumi.Input[str] network_acl_id: The id of the network acl, the field can't be changed.

        The **egresses** object supports the following:

          * `description` (`pulumi.Input[str]`) - The description of the egress entry.
          * `destinationCidrIp` (`pulumi.Input[str]`) - The destination ip of the egress entry.
          * `entryType` (`pulumi.Input[str]`) - The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
          * `name` (`pulumi.Input[str]`) - The name of the egress entry.
          * `policy` (`pulumi.Input[str]`) - The policy of the egress entry. It must be `accept` or `drop`.
          * `port` (`pulumi.Input[str]`) - The port of the egress entry.
          * `protocol` (`pulumi.Input[str]`) - The protocol of the egress entry.

        The **ingresses** object supports the following:

          * `description` (`pulumi.Input[str]`) - The description of the egress entry.
          * `entryType` (`pulumi.Input[str]`) - The entry type of the egress entry. It must be `custom` or `system`. Default value is `custom`.
          * `name` (`pulumi.Input[str]`) - The name of the egress entry.
          * `policy` (`pulumi.Input[str]`) - The policy of the egress entry. It must be `accept` or `drop`.
          * `port` (`pulumi.Input[str]`) - The port of the egress entry.
          * `protocol` (`pulumi.Input[str]`) - The protocol of the egress entry.
          * `source_cidr_ip` (`pulumi.Input[str]`) - The source ip of the ingress entry.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["egresses"] = egresses
        __props__["ingresses"] = ingresses
        __props__["network_acl_id"] = network_acl_id
        return NetworkAclEntries(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

