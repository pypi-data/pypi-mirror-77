# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetEipsResult:
    """
    A collection of values returned by getEips.
    """
    def __init__(__self__, eips=None, id=None, ids=None, in_use=None, ip_addresses=None, names=None, output_file=None, resource_group_id=None, tags=None):
        if eips and not isinstance(eips, list):
            raise TypeError("Expected argument 'eips' to be a list")
        __self__.eips = eips
        """
        A list of EIPs. Each element contains the following attributes:
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        __self__.ids = ids
        """
        (Optional) A list of EIP IDs.
        """
        if in_use and not isinstance(in_use, bool):
            raise TypeError("Expected argument 'in_use' to be a bool")
        if in_use is not None:
            warnings.warn("Field 'in_use' has been deprecated from provider version 1.8.0.", DeprecationWarning)
            pulumi.log.warn("in_use is deprecated: Field 'in_use' has been deprecated from provider version 1.8.0.")
        __self__.in_use = in_use
        if ip_addresses and not isinstance(ip_addresses, list):
            raise TypeError("Expected argument 'ip_addresses' to be a list")
        __self__.ip_addresses = ip_addresses
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        __self__.names = names
        """
        (Optional) A list of EIP names.
        """
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        __self__.resource_group_id = resource_group_id
        """
        The Id of resource group which the eips belongs.
        """
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
class AwaitableGetEipsResult(GetEipsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEipsResult(
            eips=self.eips,
            id=self.id,
            ids=self.ids,
            in_use=self.in_use,
            ip_addresses=self.ip_addresses,
            names=self.names,
            output_file=self.output_file,
            resource_group_id=self.resource_group_id,
            tags=self.tags)

def get_eips(ids=None,in_use=None,ip_addresses=None,output_file=None,resource_group_id=None,tags=None,opts=None):
    """
    This data source provides a list of EIPs (Elastic IP address) owned by an Alibaba Cloud account.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    eips_ds = alicloud.ecs.get_eips()
    pulumi.export("firstEipId", eips_ds.eips[0]["id"])
    ```



    :param list ids: A list of EIP IDs.
    :param bool in_use: Deprecated since the version 1.8.0 of this provider.
    :param list ip_addresses: A list of EIP public IP addresses.
    :param str resource_group_id: The Id of resource group which the eips belongs.
    :param dict tags: A mapping of tags to assign to the resource.
    """
    __args__ = dict()


    __args__['ids'] = ids
    __args__['inUse'] = in_use
    __args__['ipAddresses'] = ip_addresses
    __args__['outputFile'] = output_file
    __args__['resourceGroupId'] = resource_group_id
    __args__['tags'] = tags
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('alicloud:ecs/getEips:getEips', __args__, opts=opts).value

    return AwaitableGetEipsResult(
        eips=__ret__.get('eips'),
        id=__ret__.get('id'),
        ids=__ret__.get('ids'),
        in_use=__ret__.get('inUse'),
        ip_addresses=__ret__.get('ipAddresses'),
        names=__ret__.get('names'),
        output_file=__ret__.get('outputFile'),
        resource_group_id=__ret__.get('resourceGroupId'),
        tags=__ret__.get('tags'))
