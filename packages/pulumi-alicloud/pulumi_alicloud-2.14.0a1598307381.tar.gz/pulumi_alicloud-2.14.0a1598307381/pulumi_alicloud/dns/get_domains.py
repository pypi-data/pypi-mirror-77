# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetDomainsResult:
    """
    A collection of values returned by getDomains.
    """
    def __init__(__self__, ali_domain=None, domain_name_regex=None, domains=None, group_id=None, group_name_regex=None, id=None, ids=None, instance_id=None, key_word=None, lang=None, names=None, output_file=None, resource_group_id=None, search_mode=None, starmark=None, tags=None, version_code=None):
        if ali_domain and not isinstance(ali_domain, bool):
            raise TypeError("Expected argument 'ali_domain' to be a bool")
        __self__.ali_domain = ali_domain
        """
        Indicates whether the domain is an Alibaba Cloud domain.
        """
        if domain_name_regex and not isinstance(domain_name_regex, str):
            raise TypeError("Expected argument 'domain_name_regex' to be a str")
        __self__.domain_name_regex = domain_name_regex
        if domains and not isinstance(domains, list):
            raise TypeError("Expected argument 'domains' to be a list")
        __self__.domains = domains
        """
        A list of domains. Each element contains the following attributes:
        """
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        __self__.group_id = group_id
        """
        Id of group that contains the domain.
        """
        if group_name_regex and not isinstance(group_name_regex, str):
            raise TypeError("Expected argument 'group_name_regex' to be a str")
        __self__.group_name_regex = group_name_regex
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        __self__.ids = ids
        """
        A list of domain IDs.
        """
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        __self__.instance_id = instance_id
        """
        Cloud analysis product ID of the domain.
        """
        if key_word and not isinstance(key_word, str):
            raise TypeError("Expected argument 'key_word' to be a str")
        __self__.key_word = key_word
        if lang and not isinstance(lang, str):
            raise TypeError("Expected argument 'lang' to be a str")
        __self__.lang = lang
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        __self__.names = names
        """
        A list of domain names.
        """
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        __self__.resource_group_id = resource_group_id
        """
        The Id of resource group which the dns belongs.
        """
        if search_mode and not isinstance(search_mode, str):
            raise TypeError("Expected argument 'search_mode' to be a str")
        __self__.search_mode = search_mode
        if starmark and not isinstance(starmark, bool):
            raise TypeError("Expected argument 'starmark' to be a bool")
        __self__.starmark = starmark
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        __self__.tags = tags
        if version_code and not isinstance(version_code, str):
            raise TypeError("Expected argument 'version_code' to be a str")
        __self__.version_code = version_code
        """
        Cloud resolution version ID.
        """
class AwaitableGetDomainsResult(GetDomainsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainsResult(
            ali_domain=self.ali_domain,
            domain_name_regex=self.domain_name_regex,
            domains=self.domains,
            group_id=self.group_id,
            group_name_regex=self.group_name_regex,
            id=self.id,
            ids=self.ids,
            instance_id=self.instance_id,
            key_word=self.key_word,
            lang=self.lang,
            names=self.names,
            output_file=self.output_file,
            resource_group_id=self.resource_group_id,
            search_mode=self.search_mode,
            starmark=self.starmark,
            tags=self.tags,
            version_code=self.version_code)

def get_domains(ali_domain=None,domain_name_regex=None,group_id=None,group_name_regex=None,ids=None,instance_id=None,key_word=None,lang=None,output_file=None,resource_group_id=None,search_mode=None,starmark=None,tags=None,version_code=None,opts=None):
    """
    This data source provides a list of DNS Domains in an Alibaba Cloud account according to the specified filters.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    domains_ds = alicloud.dns.get_domains(domain_name_regex="^hegu",
        output_file="domains.txt")
    pulumi.export("firstDomainId", domains_ds.domains[0]["domain_id"])
    ```



    :param bool ali_domain: Specifies whether the domain is from Alibaba Cloud or not.
    :param str domain_name_regex: A regex string to filter results by the domain name. 
    :param str group_id: Domain group ID, if not filled, the default is all groups.
    :param str group_name_regex: A regex string to filter results by the group name.
    :param list ids: - A list of domain IDs.
    :param str instance_id: Cloud analysis product ID.
    :param str key_word: The keywords are searched according to the `%KeyWord%` mode, which is not case sensitive.
    :param str lang: User language.
    :param str resource_group_id: The Id of resource group which the dns belongs.
    :param str search_mode: Search mode, `LIKE` fuzzy search, `EXACT` exact search.
    :param bool starmark: Whether to query the domain name star.
    :param dict tags: A mapping of tags to assign to the resource.
    :param str version_code: Cloud analysis version code.
    """
    __args__ = dict()


    __args__['aliDomain'] = ali_domain
    __args__['domainNameRegex'] = domain_name_regex
    __args__['groupId'] = group_id
    __args__['groupNameRegex'] = group_name_regex
    __args__['ids'] = ids
    __args__['instanceId'] = instance_id
    __args__['keyWord'] = key_word
    __args__['lang'] = lang
    __args__['outputFile'] = output_file
    __args__['resourceGroupId'] = resource_group_id
    __args__['searchMode'] = search_mode
    __args__['starmark'] = starmark
    __args__['tags'] = tags
    __args__['versionCode'] = version_code
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('alicloud:dns/getDomains:getDomains', __args__, opts=opts).value

    return AwaitableGetDomainsResult(
        ali_domain=__ret__.get('aliDomain'),
        domain_name_regex=__ret__.get('domainNameRegex'),
        domains=__ret__.get('domains'),
        group_id=__ret__.get('groupId'),
        group_name_regex=__ret__.get('groupNameRegex'),
        id=__ret__.get('id'),
        ids=__ret__.get('ids'),
        instance_id=__ret__.get('instanceId'),
        key_word=__ret__.get('keyWord'),
        lang=__ret__.get('lang'),
        names=__ret__.get('names'),
        output_file=__ret__.get('outputFile'),
        resource_group_id=__ret__.get('resourceGroupId'),
        search_mode=__ret__.get('searchMode'),
        starmark=__ret__.get('starmark'),
        tags=__ret__.get('tags'),
        version_code=__ret__.get('versionCode'))
