# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class Dashboard(pulumi.CustomResource):
    char_list: pulumi.Output[str]
    """
    Configuration of charts in the dashboard.
    """
    dashboard_name: pulumi.Output[str]
    """
    The name of the Log Dashboard.
    """
    display_name: pulumi.Output[str]
    """
    Dashboard alias.
    """
    project_name: pulumi.Output[str]
    """
    The name of the log project. It is the only in one Alicloud account.
    """
    def __init__(__self__, resource_name, opts=None, char_list=None, dashboard_name=None, display_name=None, project_name=None, __props__=None, __name__=None, __opts__=None):
        """
        The dashboard is a real-time data analysis platform provided by the log service. You can display frequently used query and analysis statements in the form of charts and save statistical charts to the dashboard.
        [Refer to details](https://www.alibabacloud.com/help/doc-detail/102530.htm).

        > **NOTE:** Available in 1.86.0



        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] char_list: Configuration of charts in the dashboard.
        :param pulumi.Input[str] dashboard_name: The name of the Log Dashboard.
        :param pulumi.Input[str] display_name: Dashboard alias.
        :param pulumi.Input[str] project_name: The name of the log project. It is the only in one Alicloud account.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if char_list is None:
                raise TypeError("Missing required property 'char_list'")
            __props__['char_list'] = char_list
            if dashboard_name is None:
                raise TypeError("Missing required property 'dashboard_name'")
            __props__['dashboard_name'] = dashboard_name
            __props__['display_name'] = display_name
            if project_name is None:
                raise TypeError("Missing required property 'project_name'")
            __props__['project_name'] = project_name
        super(Dashboard, __self__).__init__(
            'alicloud:log/dashboard:Dashboard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, char_list=None, dashboard_name=None, display_name=None, project_name=None):
        """
        Get an existing Dashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] char_list: Configuration of charts in the dashboard.
        :param pulumi.Input[str] dashboard_name: The name of the Log Dashboard.
        :param pulumi.Input[str] display_name: Dashboard alias.
        :param pulumi.Input[str] project_name: The name of the log project. It is the only in one Alicloud account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["char_list"] = char_list
        __props__["dashboard_name"] = dashboard_name
        __props__["display_name"] = display_name
        __props__["project_name"] = project_name
        return Dashboard(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

