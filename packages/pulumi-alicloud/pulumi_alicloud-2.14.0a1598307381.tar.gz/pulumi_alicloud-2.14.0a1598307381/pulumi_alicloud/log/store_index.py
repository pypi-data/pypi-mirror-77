# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class StoreIndex(pulumi.CustomResource):
    field_searches: pulumi.Output[list]
    """
    List configurations of field search index. Valid item as follows:

      * `alias` (`str`) - The alias of one field.
      * `caseSensitive` (`bool`) - Whether the case sensitive for the field. Default to false. It is valid when "type" is "text" or "json".
      * `enableAnalytics` (`bool`) - Whether to enable field analytics. Default to true.
      * `includeChinese` (`bool`) - Whether includes the chinese for the field. Default to false. It is valid when "type" is "text" or "json".
      * `jsonKeys` (`list`) - Use nested index when type is json
        * `alias` (`str`) - The alias of one field.
        * `docValue` (`bool`) - Whether to enable statistics. default to true.
        * `name` (`str`) - When using the json_keys field, this field is required.
        * `type` (`str`) - The type of one field. Valid values: ["long", "text", "double"]. Default to "long"

      * `name` (`str`) - When using the json_keys field, this field is required.
      * `token` (`str`) - The string of several split words, like "\r", "#". It is valid when "type" is "text" or "json".
      * `type` (`str`) - The type of one field. Valid values: ["long", "text", "double"]. Default to "long"
    """
    full_text: pulumi.Output[dict]
    """
    The configuration of full text index. Valid item as follows:

      * `caseSensitive` (`bool`) - Whether the case sensitive for the field. Default to false. It is valid when "type" is "text" or "json".
      * `includeChinese` (`bool`) - Whether includes the chinese for the field. Default to false. It is valid when "type" is "text" or "json".
      * `token` (`str`) - The string of several split words, like "\r", "#". It is valid when "type" is "text" or "json".
    """
    logstore: pulumi.Output[str]
    """
    The log store name to the query index belongs.
    """
    project: pulumi.Output[str]
    """
    The project name to the log store belongs.
    """
    def __init__(__self__, resource_name, opts=None, field_searches=None, full_text=None, logstore=None, project=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a StoreIndex resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] field_searches: List configurations of field search index. Valid item as follows:
        :param pulumi.Input[dict] full_text: The configuration of full text index. Valid item as follows:
        :param pulumi.Input[str] logstore: The log store name to the query index belongs.
        :param pulumi.Input[str] project: The project name to the log store belongs.

        The **field_searches** object supports the following:

          * `alias` (`pulumi.Input[str]`) - The alias of one field.
          * `caseSensitive` (`pulumi.Input[bool]`) - Whether the case sensitive for the field. Default to false. It is valid when "type" is "text" or "json".
          * `enableAnalytics` (`pulumi.Input[bool]`) - Whether to enable field analytics. Default to true.
          * `includeChinese` (`pulumi.Input[bool]`) - Whether includes the chinese for the field. Default to false. It is valid when "type" is "text" or "json".
          * `jsonKeys` (`pulumi.Input[list]`) - Use nested index when type is json
            * `alias` (`pulumi.Input[str]`) - The alias of one field.
            * `docValue` (`pulumi.Input[bool]`) - Whether to enable statistics. default to true.
            * `name` (`pulumi.Input[str]`) - When using the json_keys field, this field is required.
            * `type` (`pulumi.Input[str]`) - The type of one field. Valid values: ["long", "text", "double"]. Default to "long"

          * `name` (`pulumi.Input[str]`) - When using the json_keys field, this field is required.
          * `token` (`pulumi.Input[str]`) - The string of several split words, like "\r", "#". It is valid when "type" is "text" or "json".
          * `type` (`pulumi.Input[str]`) - The type of one field. Valid values: ["long", "text", "double"]. Default to "long"

        The **full_text** object supports the following:

          * `caseSensitive` (`pulumi.Input[bool]`) - Whether the case sensitive for the field. Default to false. It is valid when "type" is "text" or "json".
          * `includeChinese` (`pulumi.Input[bool]`) - Whether includes the chinese for the field. Default to false. It is valid when "type" is "text" or "json".
          * `token` (`pulumi.Input[str]`) - The string of several split words, like "\r", "#". It is valid when "type" is "text" or "json".
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['field_searches'] = field_searches
            __props__['full_text'] = full_text
            if logstore is None:
                raise TypeError("Missing required property 'logstore'")
            __props__['logstore'] = logstore
            if project is None:
                raise TypeError("Missing required property 'project'")
            __props__['project'] = project
        super(StoreIndex, __self__).__init__(
            'alicloud:log/storeIndex:StoreIndex',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, field_searches=None, full_text=None, logstore=None, project=None):
        """
        Get an existing StoreIndex resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] field_searches: List configurations of field search index. Valid item as follows:
        :param pulumi.Input[dict] full_text: The configuration of full text index. Valid item as follows:
        :param pulumi.Input[str] logstore: The log store name to the query index belongs.
        :param pulumi.Input[str] project: The project name to the log store belongs.

        The **field_searches** object supports the following:

          * `alias` (`pulumi.Input[str]`) - The alias of one field.
          * `caseSensitive` (`pulumi.Input[bool]`) - Whether the case sensitive for the field. Default to false. It is valid when "type" is "text" or "json".
          * `enableAnalytics` (`pulumi.Input[bool]`) - Whether to enable field analytics. Default to true.
          * `includeChinese` (`pulumi.Input[bool]`) - Whether includes the chinese for the field. Default to false. It is valid when "type" is "text" or "json".
          * `jsonKeys` (`pulumi.Input[list]`) - Use nested index when type is json
            * `alias` (`pulumi.Input[str]`) - The alias of one field.
            * `docValue` (`pulumi.Input[bool]`) - Whether to enable statistics. default to true.
            * `name` (`pulumi.Input[str]`) - When using the json_keys field, this field is required.
            * `type` (`pulumi.Input[str]`) - The type of one field. Valid values: ["long", "text", "double"]. Default to "long"

          * `name` (`pulumi.Input[str]`) - When using the json_keys field, this field is required.
          * `token` (`pulumi.Input[str]`) - The string of several split words, like "\r", "#". It is valid when "type" is "text" or "json".
          * `type` (`pulumi.Input[str]`) - The type of one field. Valid values: ["long", "text", "double"]. Default to "long"

        The **full_text** object supports the following:

          * `caseSensitive` (`pulumi.Input[bool]`) - Whether the case sensitive for the field. Default to false. It is valid when "type" is "text" or "json".
          * `includeChinese` (`pulumi.Input[bool]`) - Whether includes the chinese for the field. Default to false. It is valid when "type" is "text" or "json".
          * `token` (`pulumi.Input[str]`) - The string of several split words, like "\r", "#". It is valid when "type" is "text" or "json".
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["field_searches"] = field_searches
        __props__["full_text"] = full_text
        __props__["logstore"] = logstore
        __props__["project"] = project
        return StoreIndex(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

