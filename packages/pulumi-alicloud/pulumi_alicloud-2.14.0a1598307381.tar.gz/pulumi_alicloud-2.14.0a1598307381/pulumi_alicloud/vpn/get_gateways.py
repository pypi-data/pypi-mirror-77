# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetGatewaysResult:
    """
    A collection of values returned by getGateways.
    """
    def __init__(__self__, business_status=None, gateways=None, id=None, ids=None, name_regex=None, names=None, output_file=None, status=None, vpc_id=None):
        if business_status and not isinstance(business_status, str):
            raise TypeError("Expected argument 'business_status' to be a str")
        __self__.business_status = business_status
        """
        The business status of the VPN gateway.
        """
        if gateways and not isinstance(gateways, list):
            raise TypeError("Expected argument 'gateways' to be a list")
        __self__.gateways = gateways
        """
        A list of VPN gateways. Each element contains the following attributes:
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        __self__.ids = ids
        """
        IDs of the VPN.
        """
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        __self__.name_regex = name_regex
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        __self__.names = names
        """
        names of the VPN.
        """
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        The status of the VPN
        """
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        __self__.vpc_id = vpc_id
        """
        ID of the VPC that the VPN belongs.
        """
class AwaitableGetGatewaysResult(GetGatewaysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGatewaysResult(
            business_status=self.business_status,
            gateways=self.gateways,
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            names=self.names,
            output_file=self.output_file,
            status=self.status,
            vpc_id=self.vpc_id)

def get_gateways(business_status=None,ids=None,name_regex=None,output_file=None,status=None,vpc_id=None,opts=None):
    """
    The VPNs data source lists a number of VPNs resource information owned by an Alicloud account.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    vpn_gateways = alicloud.vpn.get_gateways(business_status="Normal",
        ids=[
            "fake-vpn-id1",
            "fake-vpn-id2",
        ],
        name_regex="testAcc*",
        output_file="/tmp/vpns",
        status="active",
        vpc_id="fake-vpc-id")
    ```



    :param str business_status: Limit search to specific business status - valid value is "Normal", "FinancialLocked".
    :param list ids: IDs of the VPN.
    :param str name_regex: A regex string of VPN name.
    :param str output_file: Save the result to the file.
    :param str status: Limit search to specific status - valid value is "Init", "Provisioning", "Active", "Updating", "Deleting".
    :param str vpc_id: Use the VPC ID as the search key.
    """
    __args__ = dict()


    __args__['businessStatus'] = business_status
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['status'] = status
    __args__['vpcId'] = vpc_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('alicloud:vpn/getGateways:getGateways', __args__, opts=opts).value

    return AwaitableGetGatewaysResult(
        business_status=__ret__.get('businessStatus'),
        gateways=__ret__.get('gateways'),
        id=__ret__.get('id'),
        ids=__ret__.get('ids'),
        name_regex=__ret__.get('nameRegex'),
        names=__ret__.get('names'),
        output_file=__ret__.get('outputFile'),
        status=__ret__.get('status'),
        vpc_id=__ret__.get('vpcId'))
