# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GetConnectionsResult:
    """
    A collection of values returned by getConnections.
    """
    def __init__(__self__, connections=None, customer_gateway_id=None, id=None, ids=None, name_regex=None, names=None, output_file=None, vpn_gateway_id=None):
        if connections and not isinstance(connections, list):
            raise TypeError("Expected argument 'connections' to be a list")
        __self__.connections = connections
        """
        A list of VPN connections. Each element contains the following attributes:
        """
        if customer_gateway_id and not isinstance(customer_gateway_id, str):
            raise TypeError("Expected argument 'customer_gateway_id' to be a str")
        __self__.customer_gateway_id = customer_gateway_id
        """
        ID of the VPN customer gateway.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        __self__.ids = ids
        """
        (Optional) IDs of the VPN connections.
        """
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        __self__.name_regex = name_regex
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        __self__.names = names
        """
        (Optional) names of the VPN connections.
        """
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        __self__.output_file = output_file
        if vpn_gateway_id and not isinstance(vpn_gateway_id, str):
            raise TypeError("Expected argument 'vpn_gateway_id' to be a str")
        __self__.vpn_gateway_id = vpn_gateway_id
        """
        ID of the VPN gateway.
        """
class AwaitableGetConnectionsResult(GetConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionsResult(
            connections=self.connections,
            customer_gateway_id=self.customer_gateway_id,
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            names=self.names,
            output_file=self.output_file,
            vpn_gateway_id=self.vpn_gateway_id)

def get_connections(customer_gateway_id=None,ids=None,name_regex=None,output_file=None,vpn_gateway_id=None,opts=None):
    """
    The VPN connections data source lists lots of VPN connections resource information owned by an Alicloud account.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_alicloud as alicloud

    foo = alicloud.vpn.get_connections(customer_gateway_id="fake-cgw-id",
        ids=["fake-conn-id"],
        output_file="/tmp/vpnconn",
        vpn_gateway_id="fake-vpn-id")
    ```



    :param str customer_gateway_id: Use the VPN customer gateway ID as the search key.
    :param list ids: IDs of the VPN connections.
    :param str name_regex: A regex string of VPN connection name.
    :param str output_file: Save the result to the file.
    :param str vpn_gateway_id: Use the VPN gateway ID as the search key.
    """
    __args__ = dict()


    __args__['customerGatewayId'] = customer_gateway_id
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['vpnGatewayId'] = vpn_gateway_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('alicloud:vpn/getConnections:getConnections', __args__, opts=opts).value

    return AwaitableGetConnectionsResult(
        connections=__ret__.get('connections'),
        customer_gateway_id=__ret__.get('customerGatewayId'),
        id=__ret__.get('id'),
        ids=__ret__.get('ids'),
        name_regex=__ret__.get('nameRegex'),
        names=__ret__.get('names'),
        output_file=__ret__.get('outputFile'),
        vpn_gateway_id=__ret__.get('vpnGatewayId'))
