# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class Certificate(pulumi.CustomResource):
    certificate: pulumi.Output[str]
    created: pulumi.Output[str]
    domain_names: pulumi.Output[list]
    fingerprint: pulumi.Output[str]
    labels: pulumi.Output[dict]
    name: pulumi.Output[str]
    not_valid_after: pulumi.Output[str]
    not_valid_before: pulumi.Output[str]
    private_key: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, certificate=None, labels=None, name=None, private_key=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Hetzner Clould Certificate to represent a TLS certificate in the Hetzner Cloud.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if certificate is None:
                raise TypeError("Missing required property 'certificate'")
            __props__['certificate'] = certificate
            __props__['labels'] = labels
            __props__['name'] = name
            if private_key is None:
                raise TypeError("Missing required property 'private_key'")
            __props__['private_key'] = private_key
            __props__['created'] = None
            __props__['domain_names'] = None
            __props__['fingerprint'] = None
            __props__['not_valid_after'] = None
            __props__['not_valid_before'] = None
        super(Certificate, __self__).__init__(
            'hcloud:index/certificate:Certificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, certificate=None, created=None, domain_names=None, fingerprint=None, labels=None, name=None, not_valid_after=None, not_valid_before=None, private_key=None):
        """
        Get an existing Certificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["certificate"] = certificate
        __props__["created"] = created
        __props__["domain_names"] = domain_names
        __props__["fingerprint"] = fingerprint
        __props__["labels"] = labels
        __props__["name"] = name
        __props__["not_valid_after"] = not_valid_after
        __props__["not_valid_before"] = not_valid_before
        __props__["private_key"] = private_key
        return Certificate(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
