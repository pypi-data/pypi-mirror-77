# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetLoadBalancerResult:
    """
    A collection of values returned by getLoadBalancer.
    """
    def __init__(__self__, algorithm=None, id=None, ipv4=None, ipv6=None, labels=None, load_balancer_type=None, location=None, name=None, network_zone=None, services=None, targets=None, with_selector=None):
        if algorithm and not isinstance(algorithm, dict):
            raise TypeError("Expected argument 'algorithm' to be a dict")
        __self__.algorithm = algorithm
        if id and not isinstance(id, float):
            raise TypeError("Expected argument 'id' to be a float")
        __self__.id = id
        if ipv4 and not isinstance(ipv4, str):
            raise TypeError("Expected argument 'ipv4' to be a str")
        __self__.ipv4 = ipv4
        if ipv6 and not isinstance(ipv6, str):
            raise TypeError("Expected argument 'ipv6' to be a str")
        __self__.ipv6 = ipv6
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        __self__.labels = labels
        if load_balancer_type and not isinstance(load_balancer_type, str):
            raise TypeError("Expected argument 'load_balancer_type' to be a str")
        __self__.load_balancer_type = load_balancer_type
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if network_zone and not isinstance(network_zone, str):
            raise TypeError("Expected argument 'network_zone' to be a str")
        __self__.network_zone = network_zone
        if services and not isinstance(services, list):
            raise TypeError("Expected argument 'services' to be a list")
        __self__.services = services
        if targets and not isinstance(targets, list):
            raise TypeError("Expected argument 'targets' to be a list")
        __self__.targets = targets
        if with_selector and not isinstance(with_selector, str):
            raise TypeError("Expected argument 'with_selector' to be a str")
        __self__.with_selector = with_selector
class AwaitableGetLoadBalancerResult(GetLoadBalancerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoadBalancerResult(
            algorithm=self.algorithm,
            id=self.id,
            ipv4=self.ipv4,
            ipv6=self.ipv6,
            labels=self.labels,
            load_balancer_type=self.load_balancer_type,
            location=self.location,
            name=self.name,
            network_zone=self.network_zone,
            services=self.services,
            targets=self.targets,
            with_selector=self.with_selector)

def get_load_balancer(id=None,name=None,with_selector=None,opts=None):
    """
    Provides details about a specific Hetzner Cloud Server.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_hcloud as hcloud

    lb1 = hcloud.get_load_balancer(name="my-load-balancer")
    lb2 = hcloud.get_load_balancer(id="123")
    lb3 = hcloud.get_load_balancer(with_selector="key=value")
    ```
    """
    __args__ = dict()


    __args__['id'] = id
    __args__['name'] = name
    __args__['withSelector'] = with_selector
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('hcloud:index/getLoadBalancer:getLoadBalancer', __args__, opts=opts).value

    return AwaitableGetLoadBalancerResult(
        algorithm=__ret__.get('algorithm'),
        id=__ret__.get('id'),
        ipv4=__ret__.get('ipv4'),
        ipv6=__ret__.get('ipv6'),
        labels=__ret__.get('labels'),
        load_balancer_type=__ret__.get('loadBalancerType'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        network_zone=__ret__.get('networkZone'),
        services=__ret__.get('services'),
        targets=__ret__.get('targets'),
        with_selector=__ret__.get('withSelector'))
