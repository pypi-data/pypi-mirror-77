# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class LoadBalancerTarget(pulumi.CustomResource):
    load_balancer_id: pulumi.Output[float]
    server_id: pulumi.Output[float]
    type: pulumi.Output[str]
    use_private_ip: pulumi.Output[bool]
    def __init__(__self__, resource_name, opts=None, load_balancer_id=None, server_id=None, type=None, use_private_ip=None, __props__=None, __name__=None, __opts__=None):
        """
        Adds a target to a Hetzner Cloud Load Balancer.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_hcloud as hcloud

        my_server = hcloud.Server("myServer",
            image="ubuntu-18.04",
            server_type="cx11")
        load_balancer = hcloud.LoadBalancer("loadBalancer",
            load_balancer_type="lb11",
            location="nbg1")
        load_balancer_target = hcloud.LoadBalancerTarget("loadBalancerTarget",
            load_balancer_id=hcloud_load_balancer["load_balcancer"]["id"],
            server_id=my_server.id,
            type="server")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if load_balancer_id is None:
                raise TypeError("Missing required property 'load_balancer_id'")
            __props__['load_balancer_id'] = load_balancer_id
            __props__['server_id'] = server_id
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['use_private_ip'] = use_private_ip
        super(LoadBalancerTarget, __self__).__init__(
            'hcloud:index/loadBalancerTarget:LoadBalancerTarget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, load_balancer_id=None, server_id=None, type=None, use_private_ip=None):
        """
        Get an existing LoadBalancerTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["load_balancer_id"] = load_balancer_id
        __props__["server_id"] = server_id
        __props__["type"] = type
        __props__["use_private_ip"] = use_private_ip
        return LoadBalancerTarget(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
