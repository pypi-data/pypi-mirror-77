# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class LoadBalancer(pulumi.CustomResource):
    algorithm: pulumi.Output[dict]
    ipv4: pulumi.Output[str]
    ipv6: pulumi.Output[str]
    labels: pulumi.Output[dict]
    load_balancer_type: pulumi.Output[str]
    location: pulumi.Output[str]
    name: pulumi.Output[str]
    network_id: pulumi.Output[float]
    network_ip: pulumi.Output[str]
    network_zone: pulumi.Output[str]
    targets: pulumi.Output[list]
    def __init__(__self__, resource_name, opts=None, algorithm=None, labels=None, load_balancer_type=None, location=None, name=None, network_zone=None, targets=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Hetzner Cloud Load Balancer to represent a Load Balancer in the Hetzner Cloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_hcloud as hcloud

        myserver = hcloud.Server("myserver",
            image="ubuntu-18.04",
            server_type="cx11")
        load_balancer = hcloud.LoadBalancer("loadBalancer",
            load_balancer_type="lb11",
            location="nbg1",
            targets=[{
                "server_id": myserver.id,
                "type": "server",
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **algorithm** object supports the following:

          * `type` (`pulumi.Input[str]`)

        The **targets** object supports the following:

          * `server_id` (`pulumi.Input[float]`)
          * `type` (`pulumi.Input[str]`)
          * `use_private_ip` (`pulumi.Input[bool]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['algorithm'] = algorithm
            __props__['labels'] = labels
            if load_balancer_type is None:
                raise TypeError("Missing required property 'load_balancer_type'")
            __props__['load_balancer_type'] = load_balancer_type
            __props__['location'] = location
            __props__['name'] = name
            __props__['network_zone'] = network_zone
            __props__['targets'] = targets
            __props__['ipv4'] = None
            __props__['ipv6'] = None
            __props__['network_id'] = None
            __props__['network_ip'] = None
        super(LoadBalancer, __self__).__init__(
            'hcloud:index/loadBalancer:LoadBalancer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, algorithm=None, ipv4=None, ipv6=None, labels=None, load_balancer_type=None, location=None, name=None, network_id=None, network_ip=None, network_zone=None, targets=None):
        """
        Get an existing LoadBalancer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.

        The **algorithm** object supports the following:

          * `type` (`pulumi.Input[str]`)

        The **targets** object supports the following:

          * `server_id` (`pulumi.Input[float]`)
          * `type` (`pulumi.Input[str]`)
          * `use_private_ip` (`pulumi.Input[bool]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["algorithm"] = algorithm
        __props__["ipv4"] = ipv4
        __props__["ipv6"] = ipv6
        __props__["labels"] = labels
        __props__["load_balancer_type"] = load_balancer_type
        __props__["location"] = location
        __props__["name"] = name
        __props__["network_id"] = network_id
        __props__["network_ip"] = network_ip
        __props__["network_zone"] = network_zone
        __props__["targets"] = targets
        return LoadBalancer(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
